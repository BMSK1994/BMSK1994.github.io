<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Agent</title>
      <link href="/2022/11/18/Java-Agent/"/>
      <url>/2022/11/18/Java-Agent/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>  Java agent是通过Java Instrumentation API（<em>java.lang.intrumentation</em>）开发出的agent程序，这种程序能够以代理的形式监控或修改JVM中运行的Java程序，主要提供了动态检查或修改字节码的特性。用来实现Java调试，监控，诊断的插件工具。</p><p>  Java agent程序启动后是和JVM运行在同一个进程，大多agent的工作形式是作为服务端接收来自客户端的请求，然后根据请求命令调用JVMTI的相关接口再返回结果。</p><p>  JVMTI（JVM Tool Interface）是 Java 虚拟机所提供的 native 编程接口，可以用来开发并监控虚拟机，可以查看JVM内部的状态，并控制JVM应用程序的执行。即JVM本身就实现了对其自身状态检查的方法，agent程序只是在上层调用这些接口。JDK 5以前的agent程序，是用C&#x2F;C++编写的动态链接库，而JDK 5以后引入的Instrumentation机制，使得agent程序可以直接用Java代码编写。</p><h2 id="二、Instrument机制"><a href="#二、Instrument机制" class="headerlink" title="二、Instrument机制"></a>二、Instrument机制</h2><p>  Java agent程序有两种方式整合到目标应用（也就是目标JVM，目标进程），一种是main方法启动前执行，另一种是main方法内部通过attach来进行加载。为便于描述，称前者为Agent模式，称后者为Attach模式。</p><p>  JVM启动时，会先执行agent程序的premain方法，大部分类加载都会通过该方法，注意：是大部分，不是所有。遗漏的主要是系统类，因为很多系统类先于 agent 执行，而用户类的加载肯定是会被拦截的。也就是说，这个方法是在目标应用的main方法启动前拦截大部分类的加载活动，既然可以拦截类的加载，就可以结合第三方的字节码编译工具，比如ASM，javassist，cglib等等来改写实现类。</p><h3 id="Agent模式（目标应用main方法启动前）"><a href="#Agent模式（目标应用main方法启动前）" class="headerlink" title="Agent模式（目标应用main方法启动前）"></a>Agent模式（目标应用main方法启动前）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -javaagent:/path/to/javaagent.jar -jar application.jar</span><br><span class="line">    <span class="comment">//-javaagent，后面跟着被打包成jar包的Java agent程序路径。</span></span><br><span class="line">java -javaagent:agent1.jar -javaagent:agent2.jar -jar application.jar</span><br><span class="line">    <span class="comment">//一个java程序中-javaagent参数的个数是没有限制的，所以可以添加任意多个javaagent。所有的java agent会按照你定义的顺序执行，例如：</span></span><br></pre></td></tr></table></figure><p>  开发Agent模式的Java agent程序时，jar包内容有一定规范：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>jar包中的MANIFEST.MF 文件必须指定 Premain-Class 项</span><br><span class="line"><span class="number">2.</span>Premain-Class 指定的那个类必须实现 premain() 方法</span><br></pre></td></tr></table></figure><p>  Premain-Class项指定的代理类需要实现premain方法，当agent整合到目标应用时，会先运行premain方法再执行目标的main方法。下面两种premain方法带Instrumentation参数的会被优先加载，不存在时才加载只有String参数的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//agentArgs是一个字符串，会随着jvm启动设置的参数得到</span></span><br><span class="line"><span class="comment">//inst就是我们需要的Instrumention实例了，由JVM传入。我们可以拿到这个实例后进行各种操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span>; </span><br></pre></td></tr></table></figure><h3 id="Attach模式（目标应用之外，用一个attach应用将javaagent-jar注入到目标应用中）"><a href="#Attach模式（目标应用之外，用一个attach应用将javaagent-jar注入到目标应用中）" class="headerlink" title="Attach模式（目标应用之外，用一个attach应用将javaagent.jar注入到目标应用中）"></a>Attach模式（目标应用之外，用一个attach应用将javaagent.jar注入到目标应用中）</h3><p>  与Agent模式直接通过Java命令参数启动不同，Attach模式需要另外启动一个attach应用。</p><p>  在Attach模式整合agent程序的过程中，需要用到com.sun.tools.attach包下VirtualMachine类和VirtualMachineDescriptor类，下面是attach应用的一般实现逻辑。首先通过VirtualMachine$List方法获取系统内的所有jvm进程，再遍历jvm描述符，判断主类的类名是否为目标类，如果是的话，获取jvm进程pid，并通过VirtualMachine将agent.jar整合到目标应用的jvm上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//attach模式的实现，底层调用如下，即通过发送load命令来加载</span></span><br><span class="line"><span class="comment">//InputStream in = this.execute(&quot;load&quot;, agentLibrary, isAbsolute ? &quot;true&quot; : &quot;false&quot;, options);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main running&quot;</span>);</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vir : list) &#123;</span><br><span class="line">            System.out.println(vir.displayName());<span class="comment">//打印JVM加载类名</span></span><br><span class="line">            <span class="keyword">if</span> (vir.displayName().endsWith(<span class="string">&quot;com.test.test&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">attach</span> <span class="operator">=</span> VirtualMachine.attach(vir.id());   <span class="comment">//attach注入一个jvm id注入进去</span></span><br><span class="line">                attach.loadAgent(<span class="string">&quot;out\\Agent1-1.0-SNAPSHOT.jar&quot;</span>);<span class="comment">//加载agent</span></span><br><span class="line">                attach.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  和前面的permain类似，代理类需要定义一个agentmain方法的类，同样是带Instrumentation参数的优先级更高。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs, Instrumentation inst)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs)</span></span><br></pre></td></tr></table></figure><h3 id="Instrumentation接口和ClassFileTransformer接口的实现"><a href="#Instrumentation接口和ClassFileTransformer接口的实现" class="headerlink" title="Instrumentation接口和ClassFileTransformer接口的实现"></a>Instrumentation接口和ClassFileTransformer接口的实现</h3><p>  Agent模式或Attach模式只是把agent程序整合到目标应用的不同方式，agent程序的内容则是相同的，都是通过<em>java.lang.intrumentation</em>包中的Instrumentation接口和ClassFileTransformer接口实现，实现逻辑如下，区别仅在代理类分别实现了premain方法和agentmain方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="comment">//public static void agentmain(String agentArgs, Instrumentation instrumentation) &#123;  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;agentArgs&quot;</span>+agentArgs);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);<span class="comment">//调用addTransformer添加一个Transformer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;premain load class&quot;</span>+className); <span class="comment">//打印加载的类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Instrumentation接口和ClassFileTransformer接口更多的源码介绍记录在附录。</p><p>  总的来说，就是通过premain或agentmain表明agent程序的入口，JVM传入的instrumentation实例，主要用来设置类文件转换器。而ClassFileTransformer接口就是类文件转换器，我们通过addTransformer方法向JVM注册自定义的ClassFileTransformer，当有新的类被JVM加载时，JVM会自动回调我们定义的转换器的transform方法。</p><p>  回过头来再想想，JVMTI是基于事件驱动的，JVM每执行到一定的逻辑（比如新的类加载）就会调用一些事件的回调接口（如果有的话），这些接口可以供开发者去扩展自己的逻辑。JVM回调的是JVMTI接口，这些接口本身就是暴露出来供用户扩展，而继续往上就是我们实现的Instrumentation接口和ClassFileTransformer接口。JVMTI和java.lang.intrumentation提供的接口可以被理解为回调函数，并完成不同语言的交互问题。当我们实现agent程序时，即为JVM实现了回调函数，这些回调函数主要被用来修改字节码。</p><p>  附录中有大佬描述的JVM ClassFileLoadHook回调实现。</p><h2 id="三、打包"><a href="#三、打包" class="headerlink" title="三、打包"></a>三、打包</h2><p>在SRC\META-INF\MANIFEST.MF文件中添加内容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span></span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br><span class="line">Premain-Class: com.bmsk.App</span><br></pre></td></tr></table></figure><p>在maven项目的pom.xml中配置打包插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class="line">            &lt;/manifest&gt;</span><br><span class="line">            &lt;manifestEntries&gt;</span><br><span class="line">                &lt;Premain-Class&gt;com.bmsk.App&lt;/Premain-Class&gt;</span><br><span class="line">                &lt;Agent-Class&gt;com.bmsk.App&lt;/Agent-Class&gt;</span><br><span class="line">                &lt;Can-Redefine-Classes&gt;true&lt;/Can-Redefine-Classes&gt;</span><br><span class="line">                &lt;Can-Retransform-Classes&gt;true&lt;/Can-Retransform-Classes&gt;</span><br><span class="line">            &lt;/manifestEntries&gt;</span><br><span class="line">        &lt;/archive&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>命令行输入mvn clean -&gt; mvn package，或者直接点击maven插件的package按钮。</p><h2 id="四、OpenRASP和Java-Agent"><a href="#四、OpenRASP和Java-Agent" class="headerlink" title="四、OpenRASP和Java Agent"></a>四、OpenRASP和Java Agent</h2><p>这里以目前对Java Agent的理解，讲一讲对Open RASP的疑问吧：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>agent程序是在类加载时修改字节码，怎么样实现对方法调用的监控？是修改字节码时修改了目标类的方法，使得该方法被调用时能传递信息给外部程序记录，云控就是在这个位置吗？还是有方法调用相关的JVMTI事件，从而能挂上方法调用相关的回调接口？</span><br><span class="line"><span class="number">2.</span>云控怎样实现和优化，云控在OpenRASP的哪些位置出现，是否灵活？</span><br><span class="line"><span class="number">2.</span>agent程序和JavaScript执行引擎是怎样相互配合的，热补丁能否通过JavaScript以外其他方式实现？</span><br></pre></td></tr></table></figure><p>具体的答案还需要以后慢慢探索。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一、Java JVMTI和Instrumention机制介绍</span><br><span class="line">https:<span class="comment">//www.jianshu.com/p/eff047d4480a</span></span><br><span class="line">二、Java 安全之Java Agent</span><br><span class="line">https:<span class="comment">//www.cnblogs.com/nice0e3/p/14086165.html</span></span><br><span class="line">三、java agent简介</span><br><span class="line">https:<span class="comment">//blog.csdn.net/a724888/article/details/127004488</span></span><br><span class="line">四、javaagent使用指南</span><br><span class="line">https:<span class="comment">//www.cnblogs.com/rickiyang/p/11368932.html</span></span><br><span class="line">五、Instrumentation接口详解</span><br><span class="line">https:<span class="comment">//www.bbsmax.com/A/x9J2LvLgd6/</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Instrumentation接口源码"><a href="#Instrumentation接口源码" class="headerlink" title="Instrumentation接口源码"></a>Instrumentation接口源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加ClassFileTransformer</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加ClassFileTransformer</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除ClassFileTransformer</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否可以被重新定义</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRetransformClassesSupported</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新定义Class文件</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">redefineClasses</span><span class="params">(ClassDefinition... definitions)</span></span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException, UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否可以修改Class文件</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有加载的Class</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定类加载器已经初始化的类</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getInitiatedClasses(ClassLoader loader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取某个对象的大小</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getObjectSize</span><span class="params">(Object objectToSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加指定jar包到启动类加载器检索路径</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">appendToBootstrapClassLoaderSearch</span><span class="params">(JarFile jarfile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加指定jar包到系统类加载检索路径</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">appendToSystemClassLoaderSearch</span><span class="params">(JarFile jarfile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本地方法是否支持前缀</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isNativeMethodPrefixSupported</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置本地方法前缀，一般用于按前缀做匹配操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setNativeMethodPrefix</span><span class="params">(ClassFileTransformer transformer, String prefix)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ClassFileTransformer接口源码"><a href="#ClassFileTransformer接口源码" class="headerlink" title="ClassFileTransformer接口源码"></a>ClassFileTransformer接口源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassFileTransformer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//改变指定类的Class文件，返回修改后的字节码数组。agent程序通过定义类实现该接口，自定义实现transform，修改字节码。</span></span><br><span class="line">   <span class="comment">//传入内容包括类名className,类加载器loader，字节码数组classfileBuffer等</span></span><br><span class="line">   <span class="comment">//我们可以根据传入的类信息决定是否需要修改类字节码，修改完字节码后我们将新的类字节码返回给JVM，JVM会验证类和相应的修改是否合法，如果符合类加载要求JVM会加载我们修改后的类字节码。</span></span><br><span class="line">    <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">        ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer)</span><br><span class="line">        <span class="keyword">throws</span> IllegalClassFormatException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ClassFileLoadHook回调实现"><a href="#ClassFileLoadHook回调实现" class="headerlink" title="ClassFileLoadHook回调实现"></a>ClassFileLoadHook回调实现</h3><p>  Instrument 就是一种 JVMTIAgent，它实现了Agent_OnLoad和Agent_OnAttach两个方法，也就是在使用时，Instrument既可以在启动时加载，也可以再运行时加动态加载。</p><p>  启动时加载和运行时加载都是监听同一个JVMTI事件，那就是ClassFileLoadHook，这个是类加载的事件，在读取类文件字节码之后回调用的，这样就可以对字节码进行修改操作。</p><p>  在JVM加载类文件时，执行回调，加载Instrument agent，创建Instrumentation接口的实例并且执行premain方法，premain方法中注册自定义的ClassFileTransformer来对字节码文件进行操作，这个就是在加载时进行字节码增强的过程。</p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenRASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习日志</title>
      <link href="/2022/11/14/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
      <url>/2022/11/14/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer 专项突破</title>
      <link href="/2022/11/14/%E5%89%91%E6%8C%87offer-%E4%B8%93%E9%A1%B9%E7%AA%81%E7%A0%B4/"/>
      <url>/2022/11/14/%E5%89%91%E6%8C%87offer-%E4%B8%93%E9%A1%B9%E7%AA%81%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指Offer专项突破版"><a href="#剑指Offer专项突破版" class="headerlink" title="剑指Offer专项突破版"></a>剑指Offer专项突破版</h1><h2 id="第三章、字符串"><a href="#第三章、字符串" class="headerlink" title="第三章、字符串"></a>第三章、字符串</h2><h3 id="014-字符串中的变位词-567、8月14日"><a href="#014-字符串中的变位词-567、8月14日" class="headerlink" title="014.字符串中的变位词 (567、8月14日)"></a>014.字符串中的变位词 (567、8月14日)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：将字符串s1的各种变位词罗列出来，遍历变位词列表，调用某操作String类的API判断是否为子串。</span><br><span class="line">  a.给出子串位置api：s1.indexOf(s2);  </span><br><span class="line">  b.输出字符串的全排列：这是一个典型的回溯过程，每次先将字符串最左边位置与后面其他位置替换，再将左端位置右移一位，返回后则将最左边位置和那个其他位置替换出来，这样每次递进时后面的字符都挨个做当前最左端位置。</span><br><span class="line">      </span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：双指针+hash表。使用hash表记录s2中字符对应位置加<span class="number">1</span>，使用双指针在s1中维护一个和s2长度一致的子串，遍历双指针维护的子串时，将hash表对应字符位置减<span class="number">1</span>，当前子串遍历完毕时hash表全部值为<span class="number">0</span>则说明是变位词。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>：两个hashmap比较，一个是s1的词频，另一个是s2的滑动窗口。每次移动只在滑动窗口的hashmap上改变两端，左端字符减一，右端字符加一，再进行两个hashmap的比较，这样就不需要在滑动窗口内部进行遍历。</span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>HashMap.equals作用于基本数据类型是能实现map的直接整体比较的。观察源码后发现，map1.equals通过entrySet().iterator()这种方式遍历了map1，判断了map2是否含有相同的键m.containsKey(key)，并判断键值是否相等value.equals(m.get(key))。因此，只有value类不是基本数据类型而是自定义类时，重写了equals和hashcode方法，才需要注意这种整体map调用equals是否合理。</span><br></pre></td></tr></table></figure><h3 id="015-字符串中的所有变位词-438、8月15日"><a href="#015-字符串中的所有变位词-438、8月15日" class="headerlink" title="015.字符串中的所有变位词(438、8月15日)"></a>015.字符串中的所有变位词(438、8月15日)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：思路同题目<span class="number">14</span>中的思路<span class="number">2</span>，实现两个hashMap比较，将<span class="keyword">return</span> <span class="literal">true</span>替换为result.add(i-p.length()+<span class="number">1</span>)，即窗口左端。</span><br><span class="line"><span class="number">2.</span>变位词题目思路关键：滑动窗口只改变两端词频+双指针实现滑动窗口，hash表或数组实现窗口内词频统计。</span><br></pre></td></tr></table></figure><h3 id="016-不含重复字符的最长连续子字符串-3、8月15日"><a href="#016-不含重复字符的最长连续子字符串-3、8月15日" class="headerlink" title="016.不含重复字符的最长连续子字符串(3、8月15日)"></a>016.不含重复字符的最长连续子字符串(3、8月15日)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题在<span class="number">7</span>月<span class="number">31</span>日做过，这次做看了下以前的笔记。现在记录的更简单些。</span><br><span class="line">    a.做法是维护一个HashMap&lt;Character,Integer&gt;，记录字符和它的上次出现位置；</span><br><span class="line">    b.向右滑动窗口时，遇到重复字符，就调整窗口的左端，保证窗口左端在重复字符上次出现位置的右边；由于可能窗口左端已经被其他重复字符更新，所以会出现在本来就在本重复字符上次位置右边的情况；</span><br><span class="line">        left = Math.max(left,hashMap.get(s.charAt(i))+<span class="number">1</span>);</span><br><span class="line">    c.滑动窗口中是不含重复字符的子串，即题目需求，就是在向右滑动过程中找到最大的滑动窗口；</span><br><span class="line"><span class="number">2.</span>滑动窗口的感觉：每次滑动只有开销很小的改动。</span><br></pre></td></tr></table></figure><h3 id="017-含有所有字符的最短字符串（76、8月15日、20日）"><a href="#017-含有所有字符的最短字符串（76、8月15日、20日）" class="headerlink" title="017.含有所有字符的最短字符串（76、8月15日、20日）"></a>017.含有所有字符的最短字符串（76、8月15日、20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：因为是求最短字符串且只返回一个，就将外层循环设置为字符串长度，内层循环设置为起始位置。和变位词类似，先用hashMap记录标准t字符串的词频情况，每次遍历一个滑动窗口时，就将标准t的hashMap拷贝一份tempMap，tempMap减去窗口内标准字符次数，全部小于<span class="number">0</span>则为“含所有字符的最短字符串”。因为需要遍历滑动窗口内部，开销很大，所以在测试最后<span class="number">3</span>个测试用例时，出现了超时。</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=t.length();L&lt;=s.length();L++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i+L-<span class="number">1</span>&lt;s.length();i++)&#123;</span><br><span class="line"><span class="number">2.</span>我的想法<span class="number">2</span>：因为当外层循环确定滑动窗口大小L时，滑动窗口的移动只是改变两端字符的词频，因此不需要遍历滑动窗口改变tempMap，只需要关注两端造成的滑动窗口的词频改变，下一次移动前，计算滑动窗口hashMapS和标准t的hashMap的包含关系即可。但是，因为标准t字符串的长度可能很大，计算包含关系时，遍历标准t的hashMap造成巨大开销，在倒数第<span class="number">2</span>个测试用例上出现超时。</span><br><span class="line"><span class="number">3.</span>我的想法<span class="number">3</span>：当滑动窗口hashMapS某些元素多于标准t的hashMap时，在hashMap中减去该元素，以此减少最后计算包含关系的开销。但随着滑动窗口移动，可能又不再多于，因此不知道如何实现。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>思路<span class="number">1</span>：本题的解题思路很简单，用hashMap记录s当前子串中标准t字符的词频，先移动右指针扩展子串到满足题目，再移动左指针不断刷新minLength。前面说的“可能有不再多于”，这里是通过判断标准t字符的需求解决的：如最开始count = hashMap.size()，当移动右指针满足题目后count减少到<span class="number">0</span>，移动左指针刷新minLength致某刻count&gt;<span class="number">0</span>，说明某字符导致子串不再满足，这时就需要再移动右指针去尝试满足，直到遍历到字符串末尾。</span><br><span class="line">    这里记录下最外层<span class="keyword">while</span>循环：</span><br><span class="line">    <span class="keyword">while</span>(end&lt;s.length()||(end==s.length()&amp;&amp;count==<span class="number">0</span>))</span><br><span class="line">    (end==s.length()&amp;&amp;count==<span class="number">0</span>)是因为，当遍历到最后一个字符且满足t需求时，仍然需要移动左指针刷新minLength；(end==s.length()&amp;&amp;count!=<span class="number">0</span>)则不可，因为没法移动右指针再满足了。这种写法还能应对s和t长度均为<span class="number">1</span>的特殊情况。</span><br></pre></td></tr></table></figure><h3 id="018-有效的回文（125、8月20日）"><a href="#018-有效的回文（125、8月20日）" class="headerlink" title="018.有效的回文（125、8月20日）"></a>018.有效的回文（125、8月20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题比较简单，就是两指针分别从开始、末尾出发，在满足左指针小于右指针的情况下，移动不是字母或数字的位置，或是在字母或数字位置判断是否回文，并同时移动指针。</span><br><span class="line"><span class="number">2.</span>常用api记录：</span><br><span class="line">Character.isLetterOrDigit  <span class="comment">//返回Boolean,判断字符是否为字母或数字</span></span><br><span class="line">Character.toLowerCase  <span class="comment">//返回字符小写</span></span><br></pre></td></tr></table></figure><h3 id="019-最多删除一个字符得到回文（680、8月20日）"><a href="#019-最多删除一个字符得到回文（680、8月20日）" class="headerlink" title="019.最多删除一个字符得到回文（680、8月20日）"></a>019.最多删除一个字符得到回文（680、8月20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：设置标志位，当flag减少到-<span class="number">1</span>时跳出循环，外层循环是<span class="keyword">while</span>(i&lt;j &amp;&amp; flag&gt;=<span class="number">0</span>)，返回值是<span class="keyword">return</span> i&gt;=j。遇到一种特殊情况无法解决，即在某一刻左指针下一位等于右指针，右指针下一位也等于左指针：如<span class="string">&quot;lcupuu&quot;</span>和<span class="string">&quot;uupucul&quot;</span>，这会导致本来该移动右指针减去一个u，却使得先移动左指针减去一个c。可以想到这种情况适用回溯法。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：递归法。当不满足回文时，移动左指针或者右指针，将标志位flag设置为<span class="literal">false</span>，向下递归。</span><br><span class="line">     <span class="keyword">return</span> check(s,!flag,left+<span class="number">1</span>,right)||check(s,!flag,left,right-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="020-回文子字符串的个数（647、8月20日）"><a href="#020-回文子字符串的个数（647、8月20日）" class="headerlink" title="020.回文子字符串的个数（647、8月20日）"></a>020.回文子字符串的个数（647、8月20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，做了这些滑动窗口的题目，面对这道题还是束手无策。想到从字符串中间开始往两边开滑，那么字符串中间怎么移动呢？如何应对奇数和偶数的区别呢？归根结底是没有看作窗口，滑动窗口是一个子串，需要一个外围循环确定窗口位置，窗口再向两边扩展。</span><br><span class="line"><span class="number">2.</span>这道题直接看题解了，代码非常简单，就是递归。这样就能移动以每个字符为中心的窗口，和前面的题目不同，是递归，而没有滑动窗口对应的存储结构。windowExtend实现计算以i为中心的字符串存在多少回文，或者以(i,i+<span class="number">1</span>)为中心。</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123; count += windowExtend(s,i,i); count += windowExtend(s,i,i+<span class="number">1</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="总结之字符串"><a href="#总结之字符串" class="headerlink" title="总结之字符串"></a>总结之字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>api记录的复制：</span><br><span class="line">    s1.CharAt(index);  <span class="comment">//根据索引确定字符</span></span><br><span class="line">    s1.indexOf(s2);   <span class="comment">//给出子串位置</span></span><br><span class="line">    s.substring(minStart,minEnd);  <span class="comment">//返回子串，包头不包尾</span></span><br><span class="line">String[] t = time.split(<span class="string">&quot;:&quot;</span>);  <span class="comment">//按指定字符分割String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.join(<span class="string">&quot; &quot;</span>,t) <span class="comment">//按指定分隔符拼接一个字符串</span></span><br><span class="line">    Character.isLetterOrDigit  <span class="comment">//返回Boolean,判断字符是否为字母或数字</span></span><br><span class="line">    Character.toLowerCase  <span class="comment">//返回字符小写</span></span><br><span class="line">    hashMap.put(ch,hashMap.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);  <span class="comment">//getOrDefault，如果不存在该键就返回默认值0，省去判断</span></span><br><span class="line">    <span class="type">char</span>[] charArray = s.toCharArray();  <span class="comment">//String转char[] String -&gt; char[]</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(charArray);  <span class="comment">//char[]转String  char[] -&gt; String</span></span><br><span class="line"></span><br><span class="line">    result.toString();   <span class="comment">//StringBuffer类转String  StringBuffer -&gt; String</span></span><br><span class="line">  builder.reverse().toString();  <span class="comment">//StringBuffer类转String  先对StringBuffer进行反转</span></span><br><span class="line">    result.append(x); <span class="comment">//StringBuffer添加char型元素</span></span><br><span class="line">    result.deleteCharAt(index);  <span class="comment">//StringBuffer实现根据索引删除元素</span></span><br><span class="line"><span class="number">2.</span>变位词，想到HashMap；回文，想到双指针。</span><br><span class="line"><span class="number">3.</span>StringBuffer和StringBuilder的区别</span><br><span class="line">    标准答案：前者线程安全，后者线程不安全。前者是早期Java设计者避免开发频繁写<span class="keyword">synchronized</span>代码块造成可读性和易用性降低，就把标准库中StringBuffer、Vector、Hashtable、ByteArray&#123;Input,Output&#125;Stream 等可变对象设计成线程安全的。但后来发现多个线程同时修改一个对象的场景才是少数，故后来的ArrayList、HashMap、StringBuilder等可变类不再默认线程安全，以此换取单线程下的性能提升。</span><br><span class="line"><span class="number">4.</span>字符串的比较：</span><br><span class="line">    （<span class="number">1</span>）.String a=<span class="string">&quot;abc&quot;</span>,b=<span class="string">&quot;abc&quot;</span>;   <span class="comment">//a==b将返回true，相同的字符串在内存中只会存一份，a和b都会指向“abc”常量</span></span><br><span class="line">    （<span class="number">2</span>）.String a=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); String b=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);   </span><br><span class="line"><span class="comment">//a==b将返回false，a和b指向不同的对象</span></span><br><span class="line"><span class="comment">//a.equals(b)是比较字符串内容是否相同</span></span><br><span class="line"><span class="comment">//字符串值比较一定要用s.equals(&quot;0&quot;)，而不是s==&quot;0&quot;，这里s是通过&quot;&quot;+ch不断累加得到的。</span></span><br><span class="line"><span class="number">5.</span><span class="type">int</span>和String互相转换api：</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(str);<span class="comment">//String转int</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.valueOf(str).intValue();<span class="comment">//String装int</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(n);<span class="comment">//int转String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(n);<span class="comment">//int转String</span></span><br><span class="line"><span class="number">6.</span>ascii转换api：</span><br><span class="line">    <span class="type">char</span> <span class="variable">zimu</span> <span class="operator">=</span> (<span class="type">char</span>)(<span class="number">96</span>+<span class="number">1</span>);   <span class="comment">//结果为a</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch-<span class="string">&#x27;a&#x27;</span> <span class="comment">//结果为a的ascii编号</span></span><br><span class="line"><span class="number">7.</span>双层List&lt;List&lt;String&gt;&gt; 转 String[][]，内层不定长时的coding技巧：</span><br><span class="line">    String[][] finals = <span class="keyword">new</span> <span class="title class_">String</span>[results.size()][];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;results.size();i++)&#123;</span><br><span class="line">        List&lt;String&gt; list = results.get(i);</span><br><span class="line">        finals[i] = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">8.</span><span class="type">char</span>转<span class="type">int</span>：</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(String.valueOf(charArray[i]));</span><br></pre></td></tr></table></figure><h2 id="第四章、链表"><a href="#第四章、链表" class="headerlink" title="第四章、链表"></a>第四章、链表</h2><h3 id="021-删除链表的倒数第n个节点（19、8月21日）"><a href="#021-删除链表的倒数第n个节点（19、8月21日）" class="headerlink" title="021.删除链表的倒数第n个节点（19、8月21日）"></a>021.删除链表的倒数第n个节点（19、8月21日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，前后指针。先让一个指针first跑n个节点，再让另一个指针tail和first一起跑，这样当first到达链表末尾时，tail正好到达倒数第n个节点的前一个节点。设置dummy节点，将帮助更好理解第n个以及处理单节点输入的特殊情况。这道题调试几次就对了。</span><br></pre></td></tr></table></figure><h3 id="022-链表中环的入口节点（142、8月21日）"><a href="#022-链表中环的入口节点（142、8月21日）" class="headerlink" title="022.链表中环的入口节点（142、8月21日）"></a>022.链表中环的入口节点（142、8月21日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：一个指针遍历到某位置，下个指针从该位置开始遍历，直到与第一个指针重合。但是，循环链表没有<span class="literal">null</span>，导致循环无法停止。</span><br><span class="line"><span class="number">2.</span>我的想法<span class="number">2</span>：将链表节点放入HashSet，当再次遍历到且HashSet已经存储某节点时，就说明该节点是循环链表的入口。如果遍历链表时遇到<span class="literal">null</span>节点，说明该链表不是循环链表。注意，Set&lt;ListNode&gt;而不是Set&lt;Integer&gt;，因为测试用例中存在相同值的不同节点。</span><br><span class="line"><span class="number">3.</span>我在想，能快速写出测试用例、方便调试也算能力吧。</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>思路<span class="number">2</span>：快慢指针。如果链表中有环，快慢两个指针必然会在环中某个节点相遇。假设快指针走两步、慢指针走一步，相遇时慢指针走了k步，快指针走了2k步，到相遇时快指针比慢指针多走k步，那么k必然是环中节点数目的整数倍，那么非环部分a+没走满的部分b=节点数目整数倍，假如一个指针headA从头节点出发，另一个指针headB从相遇慢指针的k位置出发，相同速度均为一步，那么它们都需要走a个单位到达环入口。</span><br><span class="line"><span class="number">5.</span>证明：快慢指针。设链表中环外部分的长度为a，slow指针进入环后，又走了b的距离与fast相遇，还剩c的距离凑够完整环。此时，fast指针已经走完了n圈，总距离为a+n(b+c)+b，而fast指针速度为<span class="number">2</span>，slow指针速度为<span class="number">1</span>，故有：</span><br><span class="line">    a+n(b+c)+b = <span class="number">2</span>(a+b)  -&gt;  a=c+(n-<span class="number">1</span>)(b+c)</span><br><span class="line">-&gt; 从相遇点到入环点的距离加上 n-<span class="number">1</span> 圈的环长，恰好等于从链表头部到入环点的距离。</span><br></pre></td></tr></table></figure><h3 id="023-两个链表的第一个重合节点（160、8月21日）"><a href="#023-两个链表的第一个重合节点（160、8月21日）" class="headerlink" title="023.两个链表的第一个重合节点（160、8月21日）"></a>023.两个链表的第一个重合节点（160、8月21日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：将链表节点放入HashSet。headA链表先遍历一遍，将节点放入hashSet，再遍历headB链表，当遍历到hashSet中已有节点时，说明该节点是重合节点，否则，返回<span class="literal">null</span>。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：快慢指针。假设链表headA=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]，链表headB=[<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],那么可以让链表headB变为环（headB的尾节点next指向headB的头节点），整个链表变为[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]，其中<span class="number">8</span>指向<span class="number">4</span>，问题转换为寻找链表环的入口节点。但这样会改变链表结构。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">3</span>：栈。将两个链表压入两个栈，弹栈顶比较元素，直到最后一个相同元素，即从后往前比较。扩展这一想法，可以先求得两个链表的长度，将长的链表先移动d位差值，然后两个链表再同时同速度移动，这样就能同时到达交叉位置。</span><br></pre></td></tr></table></figure><h3 id="024-反转链表（206、8月22日）"><a href="#024-反转链表（206、8月22日）" class="headerlink" title="024.反转链表（206、8月22日）"></a>024.反转链表（206、8月22日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，遍历链表节点并压栈，弹栈后在最后一个元素后接<span class="literal">null</span>。这里记录下栈相关api:</span><br><span class="line">Deque&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">peek()：返回栈顶的值 ；不改变栈的值，查看栈顶的对象而不移除它。</span><br><span class="line">pop()：Stack(栈)的方法，返回栈顶的值 ；会把栈顶的值删除。</span><br><span class="line">poll：Queue(队列)的一个方法，获取并移除此队列的头，如果此队列为空，则返回<span class="literal">null</span>。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：迭代法。遍历时维护两个指针prev和cur，每轮遍历将cur.next存储起来，将cur.next修改为指向prev后，完成向前连接；接着将prev指向cur，将cur指向储存的cur.next提供下一轮遍历条件。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>：递归法，先不做。</span><br></pre></td></tr></table></figure><h3 id="025、链表中的两数相加（445、8月22日）"><a href="#025、链表中的两数相加（445、8月22日）" class="headerlink" title="025、链表中的两数相加（445、8月22日）"></a>025、链表中的两数相加（445、8月22日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，维护两个栈l1stack和l2stack，遍历两个链表并压栈，弹栈时求和，注意将最后的进位添加节点。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：先用<span class="number">24</span>题迭代法反转两个链表，再按照相同的加法逻辑求和。</span><br></pre></td></tr></table></figure><h3 id="026、重排链表（143、8月22日）"><a href="#026、重排链表（143、8月22日）" class="headerlink" title="026、重排链表（143、8月22日）"></a>026、重排链表（143、8月22日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：观察图示，即将链表转换为正向、逆向交替添加到链表。只需要将链表反转压栈，通过栈求得链表长度，按照链表长度遍历索引，如果索引模<span class="number">2</span>余<span class="number">0</span>则正向添加链表节点，如果索引模<span class="number">2</span>余<span class="number">1</span>则弹栈添加逆向链表节点，在外部修改链表结构并不会影响弹栈顺序，且弹栈后会直接修改next指针。注意将最后一个元素后接<span class="literal">null</span>避免环状链表，以及修改head指针指向dummy.next（因为函数返回<span class="keyword">void</span>）。</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)  <span class="comment">//因为目标建立len长度的链表，正向和逆向在结束时，实际都只遍历一半</span></span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：线性表。通过线性表的特定按顺序交替获取元素。</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ListNode&gt;();  <span class="comment">//线性表建表</span></span><br><span class="line">        list.get(i).next = list.get(j);<span class="comment">//线性表获取元素</span></span><br><span class="line"><span class="number">3.</span>寻找链表中点（通过快慢指针） + 链表逆序 + 合并链表，先不做，和我的想法本质一样，但更加节省空间。</span><br></pre></td></tr></table></figure><h3 id="027、回文链表（234、8月22日）"><a href="#027、回文链表（234、8月22日）" class="headerlink" title="027、回文链表（234、8月22日）"></a>027、回文链表（234、8月22日）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.我的想法：遍历链表节点并压栈。在外围循环为for(int i=0;i&lt;len/2;i++)的情况下，遍历链表并同时弹栈，观察到node.val不相等时返回false，否则循环结束返回true。为什么是len/2，nodes = [1,2,3,2,1]，len=5，&lt;5/2 = &#123;0,1&#125;。</span><br><span class="line">2.思路2：递归法，先不做。</span><br></pre></td></tr></table></figure><h3 id="028、展平多级双向链表（430、8月23日）"><a href="#028、展平多级双向链表（430、8月23日）" class="headerlink" title="028、展平多级双向链表（430、8月23日）"></a>028、展平多级双向链表（430、8月23日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题目在看到它的序列化输入时，就已经被震慑住了。看书后明白，就是链表的节点既维护双向链表的两个指针prev和next，还维护一个指向子链表的指针child，题目需求是将子链表向上整合到原链表的两个节点之间。因此是典型的递归操作。</span><br><span class="line"><span class="number">2.</span>看懂题解后复现比较简单，就是维护当前链表遍历指针node和尾指针tail，通过node遍历链表时，如果该节点存在子节点child，维护指针Child存储node.child，将node.child置为<span class="literal">null</span>，并通过Child指针递归寻找链尾，在每轮遍历将tail指向新表尾。</span><br></pre></td></tr></table></figure><h3 id="029、排序的循环链表（708、8月24日）"><a href="#029、排序的循环链表（708、8月24日）" class="headerlink" title="029、排序的循环链表（708、8月24日）"></a>029、排序的循环链表（708、8月24日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法:这道题就是在循环链表中，按照大小顺序插入链表。通过<span class="keyword">while</span>(tail.next!=head)遍历链表节点，会遇到两种情况：</span><br><span class="line">    a.插入节点位于从小到大链表的中间</span><br><span class="line">    <span class="keyword">if</span>(insertVal &gt;= tail.val &amp;&amp; insertVal &lt;= tail.next.val)</span><br><span class="line">    b.插入节点位于从小到大链表的开始或末尾</span><br><span class="line">    <span class="keyword">if</span>(tail.val&gt; tail.next.val)</span><br><span class="line">                <span class="keyword">if</span>(insertVal &gt;= tail.val || insertVal &lt;= tail.next.val)</span><br><span class="line">    在这两种情况下<span class="keyword">break</span>，在当前遍历节点tail后添加插入节点即可。如果插入节点在链尾，tail.next=head，逻辑仍然是在tail后添加插入节点。</span><br></pre></td></tr></table></figure><h3 id="总结之链表"><a href="#总结之链表" class="headerlink" title="总结之链表"></a>总结之链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>api记录的复制：</span><br><span class="line">    Deque&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        peek()：返回栈顶的值 ；不改变栈的值，查看栈顶的对象而不移除它。</span><br><span class="line">        pop()：Stack(栈)的方法，返回栈顶的值 ；会把栈顶的值删除。</span><br><span class="line">        poll：Queue(队列)的一个方法，获取并移除此队列的头，如果此队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">    List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ListNode&gt;();  <span class="comment">//线性表建表</span></span><br><span class="line">    list.get(i).next = list.get(j);<span class="comment">//线性表获取元素</span></span><br><span class="line"><span class="number">2.</span>反转链表有两种方法：其一，维护prev、cur和temp三个指针，其中temp是为了cur.next修改为指向prev时，temp存储cur.next避免破坏链表的结构；其二、遍历链表节点并压栈，弹栈构造反转链表。反转链表后，需要注意在最后一个元素后接<span class="literal">null</span>，避免环状。</span><br><span class="line"><span class="number">3.</span>添加虚节点dummy有助于避免头节点造成的边界特殊情况，用临时指针tail遍历不会改变链表结构：</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();  ... <span class="keyword">return</span> dummy.next;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> dummy;</span><br><span class="line"><span class="number">4.</span>前后双指针、快慢双指针、虚节点、接<span class="literal">null</span>避免产生环状、反转链表。</span><br></pre></td></tr></table></figure><h2 id="第二章、数组"><a href="#第二章、数组" class="headerlink" title="第二章、数组"></a>第二章、数组</h2><h3 id="006、排序数组中两个数字之和（167、8月24日）"><a href="#006、排序数组中两个数字之和（167、8月24日）" class="headerlink" title="006、排序数组中两个数字之和（167、8月24日）"></a>006、排序数组中两个数字之和（167、8月24日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：双指针。&gt;target向左移动右指针，&lt;target向右移动左指针，外层<span class="keyword">while</span>循环避免两指针相遇，=target时跳出循环。</span><br></pre></td></tr></table></figure><h3 id="007、数组中和为0的三个数（15、8月24日）"><a href="#007、数组中和为0的三个数（15、8月24日）" class="headerlink" title="007、数组中和为0的三个数（15、8月24日）"></a>007、数组中和为0的三个数（15、8月24日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：双指针。首先通过Arrays.sort(nums)将数组变为有序数组，通过<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)让第一个数确定外层循环，再维护left、right双指针，按照第<span class="number">6</span>题中求两数之和的方法确定指针位置。这是第<span class="number">2</span>次做这道题，做出来比较容易，只需注意每层循环都应该有这个去重逻辑：</span><br><span class="line">    <span class="keyword">if</span>(left!=i+<span class="number">1</span>&amp;&amp;nums[left]==nums[left-<span class="number">1</span>])&#123;</span><br><span class="line">      left++;   </span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="008、-和大于等于-target-的最短子数组（209、8月24日）"><a href="#008、-和大于等于-target-的最短子数组（209、8月24日）" class="headerlink" title="008、 和大于等于 target 的最短子数组（209、8月24日）"></a>008、 和大于等于 target 的最短子数组（209、8月24日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：双指针。先移动右指针使sum&gt;target，再移动左指针使sum&lt;target来缩小子数组长度，最后返回right-left+<span class="number">1</span>。问题是，假如输入是[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>]，右指针提前在第二个<span class="number">2</span>上停下，就会得到长度为<span class="number">4</span>的答案，实际应该在<span class="number">3</span>停下且答案为<span class="number">2</span>。可以发现，</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，双指针。改进我的思路，应该不要让右指针停下，而是在不断向右遍历直到结束；每找到答案，就在当前位置通过左指针求子数组（左指针移动会被保留），通过Math.min(result, end - start + <span class="number">1</span>)更新result。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，前缀和+二分查找，先不做。</span><br><span class="line"><span class="number">4.</span>这是第二次遇见这种思路的题，最开始写得时候不知道外围循环咋写，是按长度遍历，还是按右指针遍历。现在知道了，要按右指针遍历，解法是在每一个满足条件的右指针下更新左指针并比较result是否更小。</span><br></pre></td></tr></table></figure><h3 id="009、乘积小于k的子数组（713、8月26日）"><a href="#009、乘积小于k的子数组（713、8月26日）" class="headerlink" title="009、乘积小于k的子数组（713、8月26日）"></a>009、乘积小于k的子数组（713、8月26日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">2</span>，滑动窗口。维护双指针left、right，按右指针遍历，当累计乘积大于k后，更新左指针至小于k，统计滑动窗口内的子数组数目。这里要统计的子数组数目，是以right指针结尾的子数组，因此有(right-left+<span class="number">1</span>)个。</span><br><span class="line">a.不以right结尾的在前面已经统计过了;</span><br><span class="line">b.以right结尾，以更左的left开头的子数组是不存在的;</span><br><span class="line">  这道题结构写对了，对滑动窗口固定写法比较熟悉，但是想不出来如何统计子数组的数目，想不到(right-left+<span class="number">1</span>)。</span><br></pre></td></tr></table></figure><h3 id="010、和为k的子数组（560、8月26日）"><a href="#010、和为k的子数组（560、8月26日）" class="headerlink" title="010、和为k的子数组（560、8月26日）"></a>010、和为k的子数组（560、8月26日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：滑动窗口。按右指针遍历，当成绩不等于k后，更新左指针至等于k，并在更新过程中记录满足条件的数目。但是遇到了[<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>]这种输入，对于以<span class="number">0</span>结尾的right指针子数组，存在[<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>]和[<span class="number">0</span>]两种满足条件的情况，在前面算法中只会被记录<span class="number">1</span>次。书里说“双指针解决数组之和的前提是，数组中的所有数字都是正数”。</span><br><span class="line"><span class="number">2.</span>我的想法，暴力破解。按右指针遍历，将当前sum拷贝到tempSum中；在每一个右指针下移动左指针，同时减小tempSum，记录等于k的情况。<span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>;left&lt;right;left++) &#123;</span><br><span class="line">    tempSum -= nums[left];</span><br><span class="line">    <span class="keyword">if</span>(tempSum==k) result+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，前缀和+哈希表优化。因为[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]之和+[<span class="number">4</span>,<span class="number">5</span>]之和=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]之和，故维护HashMap记录键值对&lt;当前和,次数&gt;，这样[<span class="number">4</span>,<span class="number">5</span>]=<span class="number">9</span>就能通过<span class="number">15</span>-[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]记录这个次数。需要注意，最开始map.put(<span class="number">0</span>,<span class="number">1</span>)，即应对第一个数字为k的情况。</span><br></pre></td></tr></table></figure><h3 id="011、0和1个数相同的子数组（525、8月26日）"><a href="#011、0和1个数相同的子数组（525、8月26日）" class="headerlink" title="011、0和1个数相同的子数组（525、8月26日）"></a>011、0和1个数相同的子数组（525、8月26日）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.我的想法：虽然看了题解知道这道题和第10题想法相同，但还是不会做。只知道这种古老的Math.max在召唤我。</span><br><span class="line">2.思路1：前缀和+哈希表优化。首先很巧妙的是把0转换成-1，这样某段子数组0和1数目相同时，就有[1,2,3]之和+[4,5]之和=[1,2,3,4,5]之和的效果，因为[4,5]此时-1和1恰巧相互抵消，[1,2,3]和[1,2,3,4,5]的累计和sum相同。这样只需维护hashMap&lt;sum,出现位置&gt;，当sum再次出现时，记录其和第一次出现位置的差值，这样就能不断通过Math.max更新最长长度。这道题思路比较特殊在：</span><br><span class="line">a.把0转换成-1，子数组满足条件时累计和为0；</span><br><span class="line">b.map.put(0,-1);  因为道理上应该子数组是（sum第一次出现的下一位，本位），所以每次放入本位，第一次放入-1位。</span><br></pre></td></tr></table></figure><h3 id="012、左右两边子数组的和相等（724、8月27日）"><a href="#012、左右两边子数组的和相等（724、8月27日）" class="headerlink" title="012、左右两边子数组的和相等（724、8月27日）"></a>012、左右两边子数组的和相等（724、8月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：维护两个整型和：leftSum和rightSum，先遍历数组将rightSum设置为数组中全部元素求和，然后第二次遍历数组，每轮遍历先将本位在rightSum中剔除，再比较leftSum和rightSum，最后在leftSum加上本位。因为本位不参与左右数组求和。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：前缀和。先给整体数组求和得total，那这时就有如下关系式，无需维护leftSum：</span><br><span class="line"><span class="keyword">if</span>(sum-nums[i] == total-sum)</span><br></pre></td></tr></table></figure><h3 id="013、二维子矩阵的和（304、8月27日）"><a href="#013、二维子矩阵的和（304、8月27日）" class="headerlink" title="013、二维子矩阵的和（304、8月27日）"></a>013、二维子矩阵的和（304、8月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法：暴力破解。维护整型sum，设置两层循环不要越界即可。看其他解答好难得样子？</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=row1;i&lt;=row2;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=col1;j&lt;=col2;j++)</span><br><span class="line">                sum += matrix[i][j];</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：前缀和。维护二维数组<span class="type">int</span>[][] sums，在构造函数中给每一行求前缀和并存储，在计算子矩阵求和时，只需列下标、通过前缀和思想求得子矩阵每一行的和。这一解法中定义sums如下：</span><br><span class="line">    定义时：sums = <span class="keyword">new</span> <span class="title class_">int</span>[Length][rowLength+<span class="number">1</span>];</span><br><span class="line">    构造时：sums[i][j+<span class="number">1</span>] = matrix[i][j] + sums[i][j];</span><br><span class="line">    使用时：sum += sums[i][col2+<span class="number">1</span>]-sums[i][col1];</span><br><span class="line">因为不能像原来hashMap解决前缀和问题是，直接map.put(<span class="number">0</span>,-<span class="number">1</span>)这种处理首位，所以数组扩列。</span><br><span class="line"><span class="number">3.</span>由衷感叹，前缀和中对第一位元素处理和边界想象都是难搞的。现在都是写出算法结构后想不出来，调也调不出来，只能看题解的边界处理。</span><br></pre></td></tr></table></figure><h3 id="总结之数组"><a href="#总结之数组" class="headerlink" title="总结之数组"></a>总结之数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>最短子数组和子串问题：要按右指针遍历，解法是在每一个满足条件的右指针下更新左指针并比较result是否更小。</span><br><span class="line"><span class="number">2.</span>数组中和为<span class="number">0</span>的x个数问题中的去重逻辑：<span class="keyword">if</span>(left!=i+<span class="number">1</span>&amp;&amp;nums[left]==nums[left-<span class="number">1</span>])&#123;left++;   <span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="number">3.</span>前缀和问题：任何位置子数组的求和，都能通过两个前缀和的相减得到，一般通过hashMap存储前缀和位置或次数，边界问题需要调试。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>数组操作相关api记录复制：</span><br><span class="line">    Arrays.sort(intervals,(<span class="type">int</span>[] e1,<span class="type">int</span>[] e2)-&gt;e1[<span class="number">0</span>]-e2[<span class="number">0</span>]);  <span class="comment">//将二维数组intervals中的数组，按照索引0位置大小排序</span></span><br><span class="line"><span class="comment">//将List转换为二维数组，需要先定义有外层初值的二维数组resultArray，再调用toArray API</span></span><br><span class="line">List&lt;<span class="type">int</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[][] resultArray = <span class="keyword">new</span> <span class="title class_">int</span>[result.size()][];</span><br><span class="line">resultArray = result.toArray(resultArray);</span><br><span class="line"><span class="number">5.</span>双层List&lt;List&lt;String&gt;&gt; 转 String[][]，内层不定长时的coding技巧：</span><br><span class="line">    String[][] finals = <span class="keyword">new</span> <span class="title class_">String</span>[results.size()][];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;results.size();i++)&#123;</span><br><span class="line">        List&lt;String&gt; list = results.get(i);</span><br><span class="line">        finals[i] = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第一章、整数"><a href="#第一章、整数" class="headerlink" title="第一章、整数"></a>第一章、整数</h2><h3 id="001、整数除法（29、8月31日）"><a href="#001、整数除法（29、8月31日）" class="headerlink" title="001、整数除法（29、8月31日）"></a>001、整数除法（29、8月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>你是故意找茬是不是？直接面向结果编程。它好像是做倍数运算，介于<span class="number">3</span>倍到<span class="number">4</span>倍时就选<span class="number">3</span>倍，再继续对余数重复这一过程，还要考虑<span class="type">int</span>型<span class="number">32</span>位溢出的情况。  </span><br></pre></td></tr></table></figure><h3 id="002、二进制加法（67、8月31日）"><a href="#002、二进制加法（67、8月31日）" class="headerlink" title="002、二进制加法（67、8月31日）"></a>002、二进制加法（67、8月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>：模拟。这道题和前面链表中的两数相加解法相同。需要注意在余数和进位上的处理。另外，这道题不同于链表上的<span class="type">int</span>型整数，需要做ascii码上的减法确定其数值：</span><br><span class="line">    sum += i&gt;=<span class="number">0</span>?a.charAt(i--)-<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="003、前n个数字二进制中1的个数（338、8月31日）"><a href="#003、前n个数字二进制中1的个数（338、8月31日）" class="headerlink" title="003、前n个数字二进制中1的个数（338、8月31日）"></a>003、前n个数字二进制中1的个数（338、8月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>：按位与运算。i&amp;(i-<span class="number">1</span>)能将整数i最右边的<span class="number">1</span>变成<span class="number">0</span>。比如<span class="number">1100</span>，减<span class="number">1</span>会造成最右边的<span class="number">1</span>借位得到<span class="number">1011</span>，这样<span class="number">1100</span>&amp;<span class="number">1011</span>=<span class="number">1000</span>，就会使最右边的<span class="number">1</span>变成<span class="number">0</span>，这样循环往复知道<span class="number">1100</span>等于<span class="number">0</span>，循环次数就是<span class="number">1100</span>中<span class="number">1</span>的数目。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：动态规划。由上面关系知，i比i&amp;(i-<span class="number">1</span>)要多一个<span class="number">1</span>，这时就能写状态转移方程：</span><br><span class="line">result[i] = result[i &amp; (i-<span class="number">1</span>)] + <span class="number">1</span>;  <span class="comment">//此时边界上，result[1] == result[2] = result[0]+1;</span></span><br><span class="line"><span class="number">3.</span>这道题就先记住这两种思路，关键是i&amp;(i-<span class="number">1</span>)会做掉最右边的<span class="number">1</span>。</span><br></pre></td></tr></table></figure><h3 id="004、只出现1次的数字（137、9月1日）"><a href="#004、只出现1次的数字（137、9月1日）" class="headerlink" title="004、只出现1次的数字（137、9月1日）"></a>004、只出现1次的数字（137、9月1日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，哈希表。维护一个hashMap，当遇到旧键时就删除或者减少次数，当遇到新键时就往hashMap中添加(新键, <span class="number">2</span>)，最后hashMap中只剩目标键将其取出即可。（思路<span class="number">1</span>，当然也可以正向做，最后遍历找值为<span class="number">1</span>的键。）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，按位累加运算。</span><br><span class="line">    a.将数组中所有数字同一位置的数位相加，由于其他数都会出现<span class="number">3</span>次，故能被<span class="number">3</span>整除；</span><br><span class="line">    b.但是，目标数只出现<span class="number">1</span>次，因此它的该数位为<span class="number">1</span>时，全部数字该数位累加和mod3余<span class="number">1</span>，它的该数位为<span class="number">0</span>时，全部数字该数位累加和mod3余<span class="number">0</span>；</span><br><span class="line">    c.因此，能从全部数字数位级累加和mod3的结果上，直接推导出目标数字。</span><br><span class="line">需要记住：</span><br><span class="line">    按位累加：bitSums[i] += (num&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>;</span><br><span class="line">组合结果：result = (result&lt;&lt;<span class="number">1</span>)+bitSums[i]%<span class="number">3</span>;</span><br><span class="line"><span class="number">3.</span>题外话。任何一个数字异或它自己的结果都是<span class="number">0</span>，能解“目标只出现<span class="number">1</span>次，其他出现<span class="number">2</span>次”的题目。</span><br></pre></td></tr></table></figure><h3 id="005、单词长度的最大乘积（318、9月1日）"><a href="#005、单词长度的最大乘积（318、9月1日）" class="headerlink" title="005、单词长度的最大乘积（318、9月1日）"></a>005、单词长度的最大乘积（318、9月1日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，按位与运算。</span><br><span class="line">    a.将字符串转换为整数，比如字符串中包含<span class="string">&#x27;a&#x27;</span>，就将整数的倒数第<span class="number">1</span>位置为<span class="number">1</span>，如果字符串中包含<span class="string">&#x27;b&#x27;</span>，就将整数的倒数第<span class="number">2</span>位置为<span class="number">1</span>；</span><br><span class="line">    b.这样两个字符串如果包含相同的字符，其转换得到的整数相与时必然不会为<span class="number">0</span>，比如字符串<span class="number">1</span>有<span class="string">&#x27;a&#x27;</span>，字符串<span class="number">2</span>没有<span class="string">&#x27;a&#x27;</span>，这样<span class="number">1</span>&amp;<span class="number">0</span>=<span class="number">0</span>，只有<span class="number">1</span>&amp;<span class="number">1</span>=<span class="number">1</span>；</span><br><span class="line">需要记住：</span><br><span class="line">    记录字符串中的字符构成（不涉及次数）：  flags[i] |= <span class="number">1</span>&lt;&lt;(ch-<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="整数之总结"><a href="#整数之总结" class="headerlink" title="整数之总结"></a>整数之总结</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>基本数据类型：</span><br><span class="line"><span class="number">4</span>种整数类型：<span class="number">8</span>位的<span class="type">byte</span>，<span class="number">16</span>位的<span class="type">short</span>，<span class="number">32</span>位的<span class="type">int</span>，<span class="number">64</span>位的<span class="type">long</span>;</span><br><span class="line"><span class="number">2</span>种浮点类型：<span class="number">32</span>位的<span class="type">float</span>（储存<span class="number">8</span>位有效数字），<span class="number">64</span>位的<span class="type">double</span>(储存<span class="number">16</span>位有效数字)；</span><br><span class="line"><span class="number">1</span>种逻辑类型：<span class="type">boolean</span></span><br><span class="line"><span class="number">1</span>种字符类型：<span class="number">16</span>位的<span class="type">char</span></span><br><span class="line"><span class="number">2.</span>java中变量都是以补码的形式保存的。原码就是二进制码，其最高位为符号位；正数反码是它本身，负数反码是除符号位全部按位取反；正数的补码是它本身，负数补码是反码加一。注意：除符号位，除符号位，除符号位，按位取反。</span><br><span class="line"><span class="number">3.</span>二进制位运算有<span class="number">6</span>种，与&amp;、或|、非~、异或^、左移&lt;&lt;、右移&gt;&gt;(无符号异或，&gt;&gt;&gt;)。</span><br><span class="line"><span class="number">4.</span>位运算常用技巧：</span><br><span class="line">i&amp;(i-<span class="number">1</span>)<span class="comment">//能将整数i最右边的1变成0。1100&amp;1011=1000，因为最右边的1负责借位</span></span><br><span class="line">i&gt;&gt;<span class="number">1</span>         <span class="comment">//计算i/2  如3==1，11&gt;&gt;1=01=1，即3/2=1</span></span><br><span class="line">i&amp;<span class="number">1</span>          <span class="comment">//计算i%2  如3==11，11&amp;01=01=1，即3%2=1</span></span><br><span class="line">bitSums[i] += (num&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>;   <span class="comment">//按位累加多个数字</span></span><br><span class="line">result = (result&lt;&lt;<span class="number">1</span>)+bitSums[i]%<span class="number">3</span>;   <span class="comment">//按需求（mod3）组合结果为int</span></span><br><span class="line">flags[i] |= <span class="number">1</span>&lt;&lt;(ch-<span class="string">&#x27;a&#x27;</span>);<span class="comment">//记录字符串中的字符构成</span></span><br><span class="line">mid -= mid &amp; <span class="number">1</span>;  <span class="comment">//小于等于mid的最后一个偶数</span></span><br><span class="line"><span class="number">5.</span>二进制位运算时，最好加上括号，这里应该涉及到优先级。比如，<span class="keyword">if</span>((flags[i]&amp;flags[j])==<span class="number">0</span>)。</span><br><span class="line"><span class="number">6.</span>利用整型位运算相关的思路求解问题，很多技巧都难以想到，只能说尽量熟悉。</span><br><span class="line"><span class="number">7.</span><span class="type">int</span>/<span class="type">int</span> = <span class="type">int</span>; <span class="type">double</span>/<span class="type">int</span>=<span class="type">double</span>; <span class="type">int</span>*<span class="type">double</span>=<span class="type">double</span>;可以通过(类型)进行强制类型转换。</span><br></pre></td></tr></table></figure><h2 id="第五章、哈希表"><a href="#第五章、哈希表" class="headerlink" title="第五章、哈希表"></a>第五章、哈希表</h2><h3 id="030、插入、删除和随机访问都是O-1-的容器（380、8月28日）"><a href="#030、插入、删除和随机访问都是O-1-的容器（380、8月28日）" class="headerlink" title="030、插入、删除和随机访问都是O(1)的容器（380、8月28日）"></a>030、插入、删除和随机访问都是O(1)的容器（380、8月28日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，我的想法，调用HashSet官方API，但是没有提供getRandom类似的方法。看书后发现哈希表这章，强调的是，利用哈希表设计更加高级、更加复杂的数据结构。因此，调用官方API是可以的，但需要想新的功能怎么实现。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，这里维护一个HashMap和ArrayList。arrayList存储元素，hashMap存储元素和其在arrayList的位置。</span><br><span class="line">a.插入元素。直接在arrayList末尾插入，并在hashMap中记录位置，时间复杂度O(<span class="number">1</span>);</span><br><span class="line">b.删除元素。</span><br><span class="line">首先通过hashMap找到目标元素在arrayList中的位置，并删除目标元素，时间复杂度O(<span class="number">1</span>)；</span><br><span class="line">在hashMap中，将arrayList末尾元素的位置修改为上一步存储的位置；</span><br><span class="line">通过nums.set直接用末尾元素覆盖目标位置，时间复杂度O(<span class="number">1</span>)；</span><br><span class="line">在nums中，删除末尾元素；</span><br><span class="line">c.随机访问</span><br><span class="line">这道题在hashMap外加上数组，就是因为数组能实现而hashMap不能实现随机访问</span><br><span class="line">产生一个随机整数API：<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(nums.size());</span><br><span class="line"><span class="number">3.</span>需要思考的地方：通过外加数组实现随机访问，通过用末位元素替换而不是数组移动实现删除O(<span class="number">1</span>)。</span><br></pre></td></tr></table></figure><h3 id="031、最近最少使用缓存（146、9月1日）"><a href="#031、最近最少使用缓存（146、9月1日）" class="headerlink" title="031、最近最少使用缓存（146、9月1日）"></a>031、最近最少使用缓存（146、9月1日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，维护两个HashMap。cache存储键值对，LRU存储键和使用次数的映射。进行get和put操作时，都会在LRU中增加相应键的使用次数。当要put新键且cache.size()==capacity时，遍历LRU寻找最小使用次数的键，将该键对应的键值对在cache和LRU中移除。但是，这种结构没法在LRU中比较相同使用次数的键。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，哈希表+双向链表，LinkedHashMap。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，哈希表+双向链表，自己实现。</span><br><span class="line">a.首先定义双向链表节点DlinkedNode；</span><br><span class="line">b.定义LRU私有变量，包括当前容量size，限定容量capacity，缓存hashMap&lt;Integer,DlinkedNode&gt;，以及双向链表虚节点head、tail；缓存hashMap是为了定位当前键对应的节点，真正的顺序由双向链表维护；</span><br><span class="line">c.get操作：从hashMap取出节点后，将节点放在双向链表的表头（删除原位置，放到表头）；</span><br><span class="line">d.put操作：如果hashMap中有该键，则修改节点值、放到表头即可；如果hashMap中没有该键，则新建节点将其放入hashMap，并将其放到链表头部，如果造成超过capacity，则将tail节点前一节点在链表和hashMap删除；</span><br><span class="line"><span class="number">4.</span>思路<span class="number">2</span>中的双向链表首位都是虚节点，这和前面单链表中单独的dummy节点有所区别。</span><br></pre></td></tr></table></figure><h3 id="032、有效的变位词（242、9月2日）"><a href="#032、有效的变位词（242、9月2日）" class="headerlink" title="032、有效的变位词（242、9月2日）"></a>032、有效的变位词（242、9月2日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，哈希表。先将字符串s的所有字符放入hashMap，再用字符串t的字符减小hashMap中的值，减小到<span class="number">0</span>时删除该键。如果不存在某键，或者最终hashMap没空，则返回<span class="literal">false</span>。要考虑的情况：</span><br><span class="line">a.对于条件“字符顺序不完全相同”，并不需要记录字符位置，只需s.equals(t)排除完全相同的情况；</span><br><span class="line">b.对于字符串t提前结束，hashMap中仍有键值，只需s.length()!=t.length()排除这种情况；</span><br><span class="line">故可以通过下面的代码简化我的想法，不用再判断hashMap.size==<span class="number">0</span>：</span><br><span class="line"><span class="keyword">if</span>(s.length()!=t.length()||s.equals(t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="033、变位词组（49、9月2日）"><a href="#033、变位词组（49、9月2日）" class="headerlink" title="033、变位词组（49、9月2日）"></a>033、变位词组（49、9月2日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，转换为数字进行位元素。看到整型第<span class="number">5</span>题后，发现转会为数字，只能记录字符构成，不包含字符次数，遂放弃。看题解有用质数代替字符的，字符串转变为质数乘积，这样只有唯一质数分解，故能通过积分类同位词。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：哈希表。将变位词排序，如<span class="string">&quot;eta&quot;</span>、<span class="string">&quot;tea&quot;</span>和<span class="string">&quot;ate&quot;</span>都映射成<span class="string">&quot;aet&quot;</span>，这样维护一个HashMap&lt;String,List&lt;String&gt;&gt;，就能在一次遍历中把变位词根据其键放到对应列表中。</span><br><span class="line">注意,<span class="type">char</span>[]转String是String.valueOf(strArray)，而不是strArray.toString()，StringBuffer转String才是buffer.toString()。Arrays.sort(strArray)能直接将<span class="type">char</span>[]按照字母顺序修改排序。</span><br><span class="line">hashmap.putIfAbsent(key, value);<span class="comment">//先判断指定的键（key）是否存在，不存在则将键/值对插入到HashMap中。</span></span><br></pre></td></tr></table></figure><h3 id="034、外星语言是否排序（953、9月6日）"><a href="#034、外星语言是否排序（953、9月6日）" class="headerlink" title="034、外星语言是否排序（953、9月6日）"></a>034、外星语言是否排序（953、9月6日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，暴力破解。根据字母表将其顺序放入hashMap，从左到右对比相邻字符串；依此取两个字符串的字母，对比其在haspMap中的位置，如果相等则继续至某字符串结束；只有前一字符串先结束才说明字符顺序正确。</span><br><span class="line"><span class="number">2.</span>本题需要记住，对比字符串a和b时，</span><br><span class="line">    a.如果a[i]&lt;b[i]，那就不用再比较了，即使a更长在这一刻它已经输了，我第一次时潜意识以为更小和相等时都需要再比下去；</span><br><span class="line">    b.同理，如果a[i]&gt;b[i]那也不用再比较了，只有二者一直相等才先结束的更小；</span><br></pre></td></tr></table></figure><h3 id="035、最小时间差（539、9月6日）"><a href="#035、最小时间差（539、9月6日）" class="headerlink" title="035、最小时间差（539、9月6日）"></a>035、最小时间差（539、9月6日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，排序。将n个时间配许，排序之后就计算两相邻时间的间隔。需注意的情况是，要把排序数组的第<span class="number">1</span>位时间和最后<span class="number">1</span>位时间的时间间隔考虑在内，因为它对应着“<span class="number">00</span>:<span class="number">00</span>”这种时间是第二天的最小情况。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：用数组代替排序。因为一天有<span class="number">1440</span>分钟，可以用长度为<span class="number">1440</span>的<span class="type">boolean</span>数组记录List&lt;String&gt;中的所有时间。这里记录几个处理通用情况的手段：</span><br><span class="line">    a.遍历<span class="type">boolean</span>数组时，因为要计算与上一时间的时间间隔，第一位没有上一时间，这样处理：</span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;timeList.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(timeList[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(prev&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    minGap = Math.min(i-prev,minGap);</span><br><span class="line">                &#125; prev=i;...&#125;&#125;</span><br><span class="line">b.因为要记录<span class="type">boolean</span>数组中第一个为<span class="literal">true</span>和最后一个为<span class="literal">true</span>的元素索引，这样处理（即初始为大往小取or相反）：</span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> timeList.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">        first = Math.min(first,i);</span><br><span class="line">        last = Math.max(last,i);</span><br></pre></td></tr></table></figure><h3 id="总结之哈希表"><a href="#总结之哈希表" class="headerlink" title="总结之哈希表"></a>总结之哈希表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>LRU的实现是：hashMap&lt;Integer,DlinkedNode&gt; + DlinkedNode双向链表，表头添加，表尾删除。其中双向链表定义时，要定义首尾两个虚节点head、tail，这与单链表中单独的dummy节点有所区别。这道题比较有代表性，估计下次还是很难直接做出来。</span><br><span class="line"><span class="number">2.</span>LinkedHashMap的使用：继承LinkedHashMap，重写removeEldestEntry方法，写出用于“删除最早添加节点”的布尔表达式。</span><br><span class="line"><span class="number">3.</span>如果哈希表的键取值范围固定，并不是很大，则可以用数组模拟哈希表。例如，单词中只包含英文小写字母，那么就可以用一个长度为<span class="number">26</span>的数组来模拟这个哈希表。</span><br><span class="line"><span class="number">4.</span>常用api：</span><br><span class="line"> hashMap.put(ch,hashMap.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);  <span class="comment">//getOrDefault，如果不存在该键就返回默认值0，省去判断</span></span><br><span class="line"> hashmap.putIfAbsent(key, value);<span class="comment">//先判断指定的键（key）是否存在，不存在则将键/值对插入到HashMap中。</span></span><br><span class="line"><span class="number">5.</span>后半部分hashMap的应用每道题关联不大，可能也是状态不太好，几道题都没有第一想法。</span><br></pre></td></tr></table></figure><h2 id="第六章、栈"><a href="#第六章、栈" class="headerlink" title="第六章、栈"></a>第六章、栈</h2><h3 id="036、后缀表达式（150、9月6日）"><a href="#036、后缀表达式（150、9月6日）" class="headerlink" title="036、后缀表达式（150、9月6日）"></a>036、后缀表达式（150、9月6日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，栈。遇到操作符，就弹两次栈进行运算，并将结果压回栈中；遇到其他（数字）字符，就直接压栈；最后返回栈顶元素。</span><br><span class="line"><span class="number">2.</span>这道题比较不优雅的地方，是要对运算符进行分类，题解用了<span class="keyword">switch</span> <span class="keyword">case</span>，<span class="keyword">default</span>时说明是数字直接压栈，我用的是<span class="keyword">if</span>...<span class="keyword">else</span>。此外，可以直接用isNumber判断是否为数字，比我的List&lt;String&gt;.contains(操作符)更紧凑些，没啥难的。</span><br></pre></td></tr></table></figure><h3 id="037、小行星碰撞（735、9月6日）"><a href="#037、小行星碰撞（735、9月6日）" class="headerlink" title="037、小行星碰撞（735、9月6日）"></a>037、小行星碰撞（735、9月6日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，双栈。维护两个栈记录向左走和向右走的小行星，如果将向左走的小行星压栈时，向右走的栈顶有小行星，则比较后决定两颗行星的去留，反之亦然。最后将没有空的栈元素取出，组装成<span class="type">int</span>[]数组返回。这种想法的错误是，题目说“表示在同一行的小行星”，如果最左边的小行星决定向左移动，那天王老子也炸不了它，并不是围绕恒星，即这个题目不但考虑方向，还要考虑位置。</span><br><span class="line"><span class="number">2.</span>我的想法，单栈。终究是做出来了，是一道考虑特殊情况的题目。维护向右走小行星的栈，也维护向左走小行星的List，这样考虑：</span><br><span class="line">    （<span class="number">1</span>）.如果小行星向左走：</span><br><span class="line">    a.栈为空，直接在List中添加小行星；</span><br><span class="line">    b.栈不为空，满足(!stack.isEmpty()&amp;&amp;stack.peek()&lt;-asteroid)条件下弹栈，直到向右走小行星全军覆没或挡住这颗行星。接下来，如果全军覆没则在List中添加这颗，如果恰好相等则弹栈，如果大于则不管；</span><br><span class="line">    （<span class="number">2</span>）.如果小行星向右走则直接压栈；</span><br><span class="line">    （<span class="number">3</span>）.如果栈不为空则通过pollLast依次获取栈底元素；</span><br><span class="line">    避免pollLast（栈底），可以改为<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)，这样能从栈顶弹。</span><br><span class="line">    （<span class="number">4</span>）.List通过size转<span class="type">int</span>[size]，实在找不到高端api；</span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，单栈。题解是把朝两个方向运动的小行星都入栈，设置<span class="type">boolean</span>值alive，为每一颗向左走的小行星给一条命，只有它能：</span><br><span class="line">    alive &amp;&amp; aster &lt; <span class="number">0</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() &gt; <span class="number">0</span></span><br><span class="line">    栈为空，栈顶也是一颗向左走的小行星，没被向右走的小行星打爆或同归于尽，他才能入栈。</span><br></pre></td></tr></table></figure><h3 id="038、每日温度（739、9月6日）"><a href="#038、每日温度（739、9月6日）" class="headerlink" title="038、每日温度（739、9月6日）"></a>038、每日温度（739、9月6日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，栈。维护一个栈记录温度的索引号，从左到右遍历温度数组，</span><br><span class="line">    a.如果栈为空，就将当前温度直接压栈；</span><br><span class="line">    b.如果栈不为空，通过<span class="keyword">while</span>循环比较栈顶元素和当前温度的大小，</span><br><span class="line">    当栈顶元素对应温度&lt;当前温度时，在数组中记录对应索引的结果：result[stack.peek()] = i-stack.peek();</span><br><span class="line">    当当前温度不管小于、等于和大于栈顶温度，都需要将当前温度入栈；</span><br><span class="line">    c.最后，将栈中剩下的索引，把result数组对应位置置为<span class="number">0</span>；</span><br><span class="line">简单说下，就是栈里只记录处理不了的索引，能处理时则通过索引相减获得时间差距。这道题趴下头想一想就做出来了耶。 </span><br><span class="line"><span class="number">2.</span>关键词：栈存索引</span><br></pre></td></tr></table></figure><h3 id="【039、直方图最大矩形面积（84、9月7日）】"><a href="#【039、直方图最大矩形面积（84、9月7日）】" class="headerlink" title="【039、直方图最大矩形面积（84、9月7日）】"></a>【039、直方图最大矩形面积（84、9月7日）】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，暴力破解。不知道为啥连穷举都想不出来，一直在想着怎么和栈上靠，还有怎么区分单柱和多柱组成的面积。题解中穷举思路很简单，从左往右遍历单柱，首先将目前单柱的高设为最低，然后从目前单柱开始不断更新最低柱高，并更新最低柱高下的面积。卡在超时上。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，分治法。最大矩形面积受限于最低柱高，对于接触过最低柱高的矩形来说，最大矩形面积是全局的面积；此时只有最低柱高左侧的情况，或者最低柱高右侧的情况，可能超过最大矩形。单独分析左侧情况时，问题回到和全局类似，因此用分治法。（关键词，低柱两边）</span><br><span class="line"><span class="number">3.</span>思路<span class="number">3</span>，单调栈。这也太难了，今晚太饿没有精力想明白。（没做出来）</span><br></pre></td></tr></table></figure><h3 id="【040、矩阵中最大的矩形（85、9月7日）】"><a href="#【040、矩阵中最大的矩形（85、9月7日）】" class="headerlink" title="【040、矩阵中最大的矩形（85、9月7日）】"></a>【040、矩阵中最大的矩形（85、9月7日）】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，单调栈。将矩阵转换为题目<span class="number">39</span>中的直方图，什么神仙脑洞。（没做出来）</span><br></pre></td></tr></table></figure><h3 id="总结之栈"><a href="#总结之栈" class="headerlink" title="总结之栈"></a>总结之栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>栈相关api记录复制：</span><br><span class="line">Deque&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        peek()：返回栈顶的值 ；不改变栈的值，查看栈顶的对象而不移除它。</span><br><span class="line">        pop()：Stack(栈)的方法，返回栈顶的值 ；会把栈顶的值删除。</span><br><span class="line">        poll：Queue(队列)的一个方法，获取并移除此队列的头，如果此队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">        pollLast：Dueue(队列)的一个方法，能获取队列尾部，需要记住这里队列首部才是栈顶，而poll和pollFirst等价于pop。</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"><span class="number">2.</span>Queue是队列；Deque是双端队列，支持在两端插入和移除元素，因此可以用它模拟栈。</span><br><span class="line"><span class="number">3.</span>将栈中结果按原顺序返回：<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) result[i]=stack.pop();</span><br></pre></td></tr></table></figure><h2 id="第七章、队列"><a href="#第七章、队列" class="headerlink" title="第七章、队列"></a>第七章、队列</h2><h3 id="041、滑动窗口的平均值（346、9月10日）"><a href="#041、滑动窗口的平均值（346、9月10日）" class="headerlink" title="041、滑动窗口的平均值（346、9月10日）"></a>041、滑动窗口的平均值（346、9月10日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，队列。这道题比较简单，就是维护队列、队列最高容量和窗口内数值和这<span class="number">3</span>个变量。当队列容量到达最高容量时，从队列头部删除元素，窗口数值和减去该元素，并将新元素添加到队列尾部并加给数值和。通过维护窗口数值和sum，就不需要再遍历整个滑动窗口了。</span><br><span class="line"><span class="number">2.</span>在队列尾部添加元素api：</span><br><span class="line">offer(): 在队列尾部添加新元素，如果队列已满，返回<span class="literal">false</span>，add方法会抛出异常；</span><br></pre></td></tr></table></figure><h3 id="042、最近请求次数（933、9月11日）"><a href="#042、最近请求次数（933、9月11日）" class="headerlink" title="042、最近请求次数（933、9月11日）"></a>042、最近请求次数（933、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，队列。这道题比较简单，就是维护队列，当调用ping时，通过<span class="keyword">while</span>循环检查window.peek()&lt;t-<span class="number">3000</span>，并移除。</span><br></pre></td></tr></table></figure><h3 id="043、往完全二叉树添加节点（919、9月11日）"><a href="#043、往完全二叉树添加节点（919、9月11日）" class="headerlink" title="043、往完全二叉树添加节点（919、9月11日）"></a>043、往完全二叉树添加节点（919、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>完全二叉树，叶子节点只会出现在最下层和次下层，只有最下层不满且叶子节点集中出现在左侧。满二叉树是完全二叉树的特例。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，队列解决广度优先遍历。用队列解决广度优先遍历，是一种经典的方法，当遍历到某层节点时，将其左右子节点分别放入队列，这样就能保持广度优先遍历。每次遍历将父节点从队列前端poll掉，又在队列尾端offer其左右子节点。本题中需注意：</span><br><span class="line">    a.在构造函数记录root根节点后，就将root节点放入队列，提取其左右节点后在队列中删除root节点，并不断重复这一操作，直到某节点不具备左子节点或者右子节点跳出循环。要注意这个节点的左、右子节点都没有放入队列；</span><br><span class="line">    b.当insert新节点时，队列中存储的就是这个不完全节点，设置该节点的left或right属性，只有在right属性设置完毕，才能从队列中删除该不完全节点，并将left和right加入队列；因为这里存在一种特殊情况，如果不完全节点有left属性，而判断right==<span class="literal">null</span>的逻辑中只加入right到队列，就会使left节点没有放入，构造函数中并没有把这个left放入；</span><br><span class="line">    c.当get_root时，返回最初记录的root节点即可，队列中并不存放完整树，而是存放当前遍历到的节点；</span><br></pre></td></tr></table></figure><h3 id="044、二叉树每层的最大值（515、9月11日）"><a href="#044、二叉树每层的最大值（515、9月11日）" class="headerlink" title="044、二叉树每层的最大值（515、9月11日）"></a>044、二叉树每层的最大值（515、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，广度优先遍历。为每层维护一个len，记录该层节点数目，通过<span class="keyword">while</span>(len&gt;<span class="number">0</span>)遍历队列中节点，通过Math.max(maxVaule,t.val)更新该层最大值，将其子节点加入队列。这样当len为<span class="number">0</span>时跳出循环，队列中为新的一层节点，len更新为新层的节点数目，并重复上述。（关键词，len记录层节点数目）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，深度优先遍历。深度优先遍历时，假如访问root后再访问root.left，这时result.size为<span class="number">1</span>，深度<span class="number">0</span>+<span class="number">1</span>=<span class="number">1</span>，深度==result.size，这时就能把root.left节点的值放入到result。即最先遍历到该层的节点先将值放入result占位，后来再遍历到该层其他节点时，在result中更新该层深度对应的值。（关键词，通过深度在result中索引）</span><br></pre></td></tr></table></figure><h3 id="045、二叉树最底层最左边的值（513、9月11日）"><a href="#045、二叉树最底层最左边的值（513、9月11日）" class="headerlink" title="045、二叉树最底层最左边的值（513、9月11日）"></a>045、二叉树最底层最左边的值（513、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，广度优先遍历。为每层维护一个len，记录该层节点数目，通过<span class="keyword">while</span>(len&gt;<span class="number">0</span>)遍历队列中节点。当遍历到新层时，len更新为该层的节点数目，并将result更新为当前队列头部元素的值。这道题和第<span class="number">44</span>题广度解法一致。（关键词，len记录层节点数目）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，广度优先遍历。从右往左遍历队列中的节点，这样最底层最左边的元素，就是被最后一个访问到，记录该值即可。（关键词，从右往左）</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，深度优先遍历。用height记录遍历到的节点高度，用curHeight记录上一次更新result的高度。遍历每个节点时，先深度遍历其左子节点，再深度遍历其右子节点，直到子节点为<span class="literal">null</span>时返回。由于只在超过curHeight时才更新curHeight和result，因此到达最底层时只会更新依次result。（关键词，存档点）</span><br><span class="line">    注意，这里将curHeight和result设置为类变量，不放入函数参数，这里涉及到修改形参的知识。</span><br></pre></td></tr></table></figure><h3 id="046、二叉树的右侧视图（199、9月11日）"><a href="#046、二叉树的右侧视图（199、9月11日）" class="headerlink" title="046、二叉树的右侧视图（199、9月11日）"></a>046、二叉树的右侧视图（199、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，广度优先遍历。为每层维护一个len，记录该层节点数目，通过<span class="keyword">while</span>(len&gt;<span class="number">0</span>)遍历队列中节点。当每层len变为<span class="number">0</span>时，说明正在访问该层的最右侧节点，将节点值放入result。这道题和第<span class="number">44</span>题广度解法一致。（关键词，len记录层节点数目）</span><br></pre></td></tr></table></figure><h3 id="总结之队列"><a href="#总结之队列" class="headerlink" title="总结之队列"></a>总结之队列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>队列相关api记录复制：</span><br><span class="line">Deque&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  <span class="comment">//队列是尾部添加，头部删除</span></span><br><span class="line">offer(): 在队列尾部添加新元素，如果队列已满，返回<span class="literal">false</span>。add方法会抛出异常；</span><br><span class="line">poll()：获取并移除此队列的头，如果此队列为空，则返回<span class="literal">null</span>。remove方法会抛出异常；</span><br><span class="line"> peek()：用于在队列头部查询元素，如果此队列为空，返回<span class="literal">null</span>。element方法会抛出异常；</span><br><span class="line"><span class="number">2.</span>用队列解决广度优先遍历：这是一种经典的方法，当遍历到某层节点时，将其左右子节点分别放入队列，这样就能保持广度优先遍历。每次遍历将父节点从队列前端poll掉，又在队列尾端offer其左右子节点。</span><br><span class="line"><span class="number">3.</span>java改变传入参数的值（在深度优先遍历、回溯时经常遇到）：</span><br><span class="line">对于基本数据类型，实现的是传值，只是个形参，不会改变原有值。对于引用数据类型，对这个引用进行操作，其实也是相当于对形参的操作，不会改变原来的引用。但是，当对这个引用的属性进行操作的时候，相当于CPP中的传址调用，可以改变这个引用的属性的值。</span><br><span class="line">即修改形参，基本类型不会改变值，引用类型会改变值。如果是类变量，则会更加清晰必然修改。</span><br><span class="line"><span class="number">4.</span>队列问题的体会：</span><br><span class="line">a.队列从来不作为完整存储容器，不是作为滑动窗口，就是为树存储当前遍历到的节点；</span><br><span class="line">b.用队列做广度优先遍历是经典方法，堪比反转链表，只要记住维护len变量记录层节点数目即可；</span><br><span class="line">c.遍历访问树节点时，判断左右子树是否存在，不用<span class="keyword">if</span>...<span class="keyword">else</span>，而是<span class="keyword">if</span>、<span class="keyword">if</span>单独判断，比如只有右子树存在的情况，<span class="keyword">if</span>...<span class="keyword">else</span>就不好。</span><br></pre></td></tr></table></figure><h2 id="第八章、树"><a href="#第八章、树" class="headerlink" title="第八章、树"></a>第八章、树</h2><h3 id="047、二叉树剪枝（814、9月11日）"><a href="#047、二叉树剪枝（814、9月11日）" class="headerlink" title="047、二叉树剪枝（814、9月11日）"></a>047、二叉树剪枝（814、9月11日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，深度优先遍历。dfs函数设置布尔返回值，对于每个节点，如果左子树、右子树或者本身含<span class="number">1</span>（满足任何一个），则立刻返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。如果深度遍历到最底层<span class="literal">null</span>还没返回，说明这棵子树不含<span class="number">1</span>，返回<span class="literal">false</span>；当左、右子树不含<span class="number">1</span>时，将其置为<span class="literal">null</span>。</span><br><span class="line">注意，当输入全<span class="number">0</span>的树时，dfs处理后只剩根节点[<span class="number">0</span>]，但这不符合输出要求。此时，左右子树均为<span class="literal">null</span>，且标志位为<span class="literal">false</span>，要根据标志位决定是返会root节点，还是直接返回<span class="literal">null</span>，而不是<span class="keyword">new</span> <span class="title class_">TreeNode</span>()。（关键词，左右<span class="number">2</span>个标志位）</span><br></pre></td></tr></table></figure><h3 id="048、序列化与反序列化树（297、9月12日）"><a href="#048、序列化与反序列化树（297、9月12日）" class="headerlink" title="048、序列化与反序列化树（297、9月12日）"></a>048、序列化与反序列化树（297、9月12日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，<span class="string">&#x27;,&#x27;</span>分割+满二叉树+队列实现广度优先遍历。这道题是困难题，结合了StringBuilder、字符串分割、和队列等知识，但我竟然本地调试后，提交一次就通过了，简直unbelievable！！耍！</span><br><span class="line">（<span class="number">1</span>）序列化时，</span><br><span class="line">    a.每层节点当其本身不等于<span class="literal">null</span>时，就将其值放入StringBuilder，并将左、右子节点放入队列（不管是否为<span class="literal">null</span>）；</span><br><span class="line">    b.等于<span class="literal">null</span>时，就将“<span class="literal">null</span>,”放入StringBuilder，这样能实现满二叉树，底层没有元素的位置会被填入<span class="literal">null</span>，且<span class="literal">null</span>节点的孩子节点不会被放入队列；</span><br><span class="line">    c.输出字符串<span class="string">&quot;1,2,3,null,null,4,5,null,null,null,null,&quot;</span>；</span><br><span class="line">（<span class="number">2</span>）反序列化时，</span><br><span class="line">    a.先通过split(<span class="string">&quot;,&quot;</span>)将节点数值分割出来，再根据索引遍历，最后一个逗号后面的空不会被设为字符；</span><br><span class="line">    b.遍历时，先peek队列头部，再将本字符串转为TreeNode，如果不为<span class="literal">null</span>，则加入队列；先peek是考虑到，首字符串放入队列再peek得到的是它本身；</span><br><span class="line">    c.这时候队列维护的是“没被安装左、右子节点的parent节点”，观察到对于满二叉树，索引为奇数时是左子节点，为偶数时是右子节点，根据这一规律，在队列头部节点被安装好后poll掉它；且要设置root变量记住根节点，以便返回；（关键词，满二叉树）</span><br></pre></td></tr></table></figure><h3 id="049、从根节点到叶节点的路径数字之和（129、9月12日）"><a href="#049、从根节点到叶节点的路径数字之和（129、9月12日）" class="headerlink" title="049、从根节点到叶节点的路径数字之和（129、9月12日）"></a>049、从根节点到叶节点的路径数字之和（129、9月12日）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.思路1，深度优先搜索。因为路径相关问题，大都采用深度优先搜索。这道题用dfs更方便的原因，还在于通过path = path*10+root.val;求当前累积和，比如路径为3-&gt;9-&gt;5，3*10+9=39，39*10+5=395，就能直接把路径数字表示出来。</span><br><span class="line">对于每个节点，返回其左、右子树的累积结果时，直接return dfs(root.left,path)+dfs(root.right,path)，比如path=39，391+395=...，这都是从数值为9的节点开始的全部路径和。注意叶子节点为null，则返回0。（关键词，dfs相加）</span><br></pre></td></tr></table></figure><h3 id="050、向下的路径节点之和（437、9月12日）"><a href="#050、向下的路径节点之和（437、9月12日）" class="headerlink" title="050、向下的路径节点之和（437、9月12日）"></a>050、向下的路径节点之和（437、9月12日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，深度优先搜索+前缀和+回溯。咋这几道中等题反而越来越难想嘞？因为题目要求统计次数，故通过hashMap记录前缀和即可，键为当前累积和path，值为path的出现次数。</span><br><span class="line">    a.对于一条路径，不断深入的过程中path加上节点值，并使得hashMap中path对应的值增加<span class="number">1</span>，每次更新当前累积和path时，在hashMap中寻找(path-target)的出现次数，即为这条路径能提供的目标子串数目；</span><br><span class="line">    b.还要像题目<span class="number">49</span>，把path向左、右子节点传递下去，子节点dfs返回后，要将hashMap中path对应的值减<span class="number">1</span>，抹除本路径、本节点的影响，这样便是回溯。（关键词，前缀和、）</span><br><span class="line"><span class="number">2.</span>这道题的测试用例被添加了奇怪的东西，必须将path设置为<span class="number">64</span>位的Long。</span><br><span class="line"><span class="number">3.</span>DFS的代码都很短，但是想到却很困难。对于root节点到叶子节点的全部路径，或者从任意节点开始的部分路径，dfs怎样操作子节点还是不能轻松想到。再次遇到求部分和次数的题目，看来子数组、子串、子路径都要记住hashMap前缀和的方法。</span><br></pre></td></tr></table></figure><h3 id="051、节点之和最大的路径（124、9月12日）"><a href="#051、节点之和最大的路径（124、9月12日）" class="headerlink" title="051、节点之和最大的路径（124、9月12日）"></a>051、节点之和最大的路径（124、9月12日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，深度优先搜索。题目没有对路径限制，那对于每个节点有<span class="number">3</span>种情况，但我分析不出返回值该是啥：</span><br><span class="line">    a.b.从其他节点延申过来，经过其左子树或者右子树的路径；</span><br><span class="line">    c.从其左子树开始，经过本节点，再经过其右子树的路径；</span><br><span class="line">我的疑虑主要在，从root节点到某子节点的路径和某节点自身的左右两边路径，这两种情况怎么设计返回值？</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，深度优先搜索。对于每个节点来说，返回值是其本身的值，加上左子树或者右子树返回的值或者<span class="number">0</span>，这样它不是这条路径的核心，不同时提供左右子树，只提供一个边；对于每个节点来说(想象成root节点)，它通过比较左、右子树的返回值、以及两个返回值加上它本身这<span class="number">3</span>个对象，就能覆盖其节点上的最值信息。（关键词，返回root.val+max(left,right)）</span><br><span class="line"><span class="number">3.</span>这道题很困难，代码简单能量爆炸。</span><br></pre></td></tr></table></figure><h3 id="052、展平二叉搜索树（897、9月13日）"><a href="#052、展平二叉搜索树（897、9月13日）" class="headerlink" title="052、展平二叉搜索树（897、9月13日）"></a>052、展平二叉搜索树（897、9月13日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，二叉树中序遍历。因为二叉搜索树本身就维护了递增顺序，只需对其中序遍历，将节点放入List，再按照List中的顺序连接。连接时需要将每个节点的左指针置为空，右指针指向List下一节点，最后节点右指针置为空，记住新的root节点即可。（关键词，中序遍历）</span><br><span class="line">    本题中序遍历用dfs递归实现。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，二叉树中序遍历。List中可以不放节点，而是放节点值，重组时新建节点。</span><br><span class="line"><span class="number">3.</span>二叉搜索树，左子节点总是小于或等于根节点，而右子节点总是大于或等于根节点。</span><br></pre></td></tr></table></figure><h3 id="053、二叉搜索树中的中序后继（285、9月13日）"><a href="#053、二叉搜索树中的中序后继（285、9月13日）" class="headerlink" title="053、二叉搜索树中的中序后继（285、9月13日）"></a>053、二叉搜索树中的中序后继（285、9月13日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，栈实现中序遍历。设置标志位flag初始为<span class="literal">false</span>，栈实现中序遍历代码中，弹栈时当前节点等于目标节点，则将标志位flag置为<span class="literal">true</span>。由于当前节点的右指针为<span class="literal">null</span>时会弹栈，这时flag等于<span class="literal">true</span>跳出循环，当前节点就是目标节点。（关键词，栈实现、标志位）</span><br><span class="line"><span class="number">2.</span>本来准备用dfs递归实现，但在函数递归调用中传递标志位，并考虑返回值好麻烦，没找到时返回值咋设置。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，二叉搜索树。二叉搜索树自身就有排序功能，能根据其性质按照正确的方向去寻找，每个节点比目标值大则向左找，否则向右。注意只在比目标值大时，才将结果节点result更新储存当前节点，因为接下来往左找时新的当前节点值可能小于等于目标值，等于时result中确实存储其中序后继，小于时则不可能是中序后继。（关键词，大于目标是更新result）</span><br></pre></td></tr></table></figure><h3 id="054、所有大于等于节点的值之和（538、1038、9月13日）"><a href="#054、所有大于等于节点的值之和（538、1038、9月13日）" class="headerlink" title="054、所有大于等于节点的值之和（538、1038、9月13日）"></a>054、所有大于等于节点的值之和（538、1038、9月13日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，递归实现先遍历右子树。这道题一看涉及到累积和path，那肯定传参path，返回path。因为是二叉搜索树，根据题目应该先访问右节点，再中间节点，最后是左节点。dfs辅助函数根据前面的遍历顺序修改path值，注意如果节点等于<span class="literal">null</span>，应该返回path而不是返回<span class="number">0</span>，因为dfs函数返回的是修改后的path值，而不是修改量。（关键词，反序中序遍历）</span><br></pre></td></tr></table></figure><h3 id="055、二叉搜索树迭代器（173、9月15日）"><a href="#055、二叉搜索树迭代器（173、9月15日）" class="headerlink" title="055、二叉搜索树迭代器（173、9月15日）"></a>055、二叉搜索树迭代器（173、9月15日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，栈实现中序遍历。这道题看了很多遍不知道到底在说什么，就看了题解。next函数是返回二叉搜索树中下一个最小的节点值，因此每次访问next函数，先不断调用next指针并压栈使其触底，next弹栈一个元素取值后，将当前节点指向右指针，即完成了中序遍历。</span><br><span class="line">    （关键词，栈实现中序遍历）</span><br></pre></td></tr></table></figure><h3 id="056、二叉搜索树中两个节点之和（653、9月15日）"><a href="#056、二叉搜索树中两个节点之和（653、9月15日）" class="headerlink" title="056、二叉搜索树中两个节点之和（653、9月15日）"></a>056、二叉搜索树中两个节点之和（653、9月15日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，栈实现中序遍历+hashMap。这几道题都考察栈实现中序遍历，只需在弹栈时，在hashMap中寻找(k-val)，并将val加入hashMap，找到则返回<span class="literal">true</span>，双层<span class="keyword">while</span>循环结束则返回<span class="literal">false</span>。（关键词，栈实现中序遍历）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，双指针，先不做。</span><br></pre></td></tr></table></figure><h3 id="057、值和下标之差都在给定的范围内（220、9月15日）"><a href="#057、值和下标之差都在给定的范围内（220、9月15日）" class="headerlink" title="057、值和下标之差都在给定的范围内（220、9月15日）"></a>057、值和下标之差都在给定的范围内（220、9月15日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，TreeMap。维护一个TreeMap，键为数字，值为它在数组中的最新索引。从左向右遍历数组，取TreeMap中恰好小于等于（floor）、大于等于（ceiling）当前遍历数字的键，计算其是否满足要求，并将当前遍历数字和索引放入TreeMap。但是，这么做存在问题，假设（&#123;<span class="number">10</span>,<span class="number">100</span>,<span class="number">11</span>,<span class="number">9</span>&#125;，索引=<span class="number">1</span>，差值=<span class="number">2</span>）的数字，当遍历到<span class="number">9</span>时，ceiling会取<span class="number">10</span>，从而不满足条件，即使<span class="number">11</span>满足但不在逻辑中。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，TreeSet。维护一个TreeSet，键为数字，这里把它当作滑动窗口，当超过k时，就剔除nums[i-k]。其他步骤同上。此外，为了应付一些特殊测试用例，应该强制类型转换成<span class="number">64</span>位的<span class="type">long</span>。（关键词，滑动窗口）</span><br></pre></td></tr></table></figure><h3 id="058、日程表（729、9月15日）"><a href="#058、日程表（729、9月15日）" class="headerlink" title="058、日程表（729、9月15日）"></a>058、日程表（729、9月15日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，TreeMap。维护一个TreeMap，键为start，值为end。每次book时，（关键词，TreeMap）</span><br><span class="line">    a.先取小于等于start的最大键值对，如果value大于start，则返回<span class="literal">false</span>；</span><br><span class="line">    b.再取大于等于start的最小键值对，如果key小于end，则返回<span class="literal">false</span>；</span><br><span class="line">    因为题目规定[start,end)，因此再判断大小时，相等是没问题的，即首尾重合没有问题。</span><br><span class="line"><span class="number">2.</span>TreeSet和TreeMap使用起来很简单，遇到的题目，解题都是依次调用一遍floor和ceiling做判断，再put本元素即可。</span><br><span class="line"><span class="number">3.</span>HashMap和TreeMap是同级的，都继承AbstractMap。必须TreeMap&lt;Integer,Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();，如果前面Class为Map&lt;Integer,Integer&gt;，则会因为多态而失去TreeMap的方法。</span><br></pre></td></tr></table></figure><h3 id="总结之树"><a href="#总结之树" class="headerlink" title="总结之树"></a>总结之树</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>二叉树分类定义：</span><br><span class="line">满二叉树，除了叶子结点之外的每一个结点都有两个孩子结点；即只有有孩子，必然有两个；</span><br><span class="line">完全二叉树，除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐；和完美二叉树区别在，底层不一定完全填充；</span><br><span class="line">完美二叉树，除了叶子结点之外的每一个结点都有两个孩子，每一层(当然包含最后一层)都被完全填充，是完全二叉树的特例；</span><br><span class="line">二叉搜索树，左子节点总是小于或等于根节点，而右子节点总是大于或等于根节点；<span class="comment">//整个左子树小于根节点，而不单是左子节点小于</span></span><br><span class="line">平衡二叉树，二叉搜索树的特例，还需满足：a.左子树和右子树的高度之差的绝对值小于等于<span class="number">1</span>；b.左子树和右子树也是平衡二叉树；是为了避免二叉搜索树高度过高，使其查找、增加和删除的时间复杂度从O(h)退化到O(n)而存在；</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>DFS的代码都很短，但是想到却很困难。对于root节点到叶子节点的全部路径，或者从任意节点开始的部分路径，dfs怎样操作子节点还是不能轻松想到。再次遇到求部分和次数的题目，看来子数组、子串、子路径都要记住hashMap前缀和的方法。呜呜呜呜....</span><br><span class="line"><span class="number">3.</span>目前遇到的习题，二叉树章节基本考察dfs，队列章节则基本考察bfs。二叉树章节的前几道题，都是dfs的奇思妙想，但本章比较基础也比较关键的是，通过dfs（递归）实现前序、中序和后序遍历，另外更困难的遍历实现是利用栈。</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>二叉树前序、中序和后序遍历，栈解法：</span><br><span class="line">    a.中序遍历，双层<span class="keyword">while</span>循环，内部循环顺着左指针一直向下移动并压栈，弹栈时访问值并将当前节点指向右指针；外层循环判断当前节点是否为<span class="literal">null</span>或者栈是否为空，并以新节点接续顺着左指针压栈；实际就是每到右指针指向节点，又开始遍历其左子树；（关键词，双<span class="keyword">while</span>）</span><br><span class="line">    b.前序遍历，双层<span class="keyword">while</span>循环，和中序遍历一致，就是内层循环一直移动左指针时，就访问节点值；即假设对于最底层节点（没有右指针），中序是在弹栈弹掉最底层节点时访问它的值，再弹栈其上层根节点并访问；前序是现在压栈时访问其上层根节点，再压栈并访问最底层节点，弹栈时不访问，因此根节点最先被访问到；（关键词，双<span class="keyword">while</span>、压栈时访问）</span><br><span class="line">    c.后序遍历，双层<span class="keyword">while</span>循环，和中序遍历一致，就是维护指针prev指向上一次访问的节点，帮助弹栈时做判断。</span><br><span class="line">      弹栈时（其实是peek栈顶，这里说弹栈指对应中序遍历的代码块），</span><br><span class="line">    如果当前节点cur右指针不为<span class="literal">null</span>且没有指向prev，说明还没有访问cur右子树，将cur指向cur.right进行循环，此时不弹栈；</span><br><span class="line">    其他情况下是经典操作，直接弹栈并访问弹出节点，将prev指针指向弹出节点做记录，将cur指向<span class="literal">null</span>，等待下次循环栈顶复制；</span><br><span class="line">（关键词，双<span class="keyword">while</span>，弹栈时判断右指针是否指向上一次cur）</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>Java根据红黑树这种平衡的二叉搜索树实现TreeSet和TreeMap两种数据结构，其查找、添加和删除操作的时间复杂度都是O(logn)；TreeSet常用api：</span><br><span class="line">    ceilling  <span class="comment">//返回键大于或等于给定值的最小键，没有则返回null；</span></span><br><span class="line">    floor  <span class="comment">//返回键小于或等于给定值的最大键，没有则返回null；</span></span><br><span class="line">    higher  <span class="comment">//返回键大于给定值的最小键，没有则返回null；</span></span><br><span class="line">    lower  <span class="comment">//返回键小于给定值的最大键，没有则返回null；</span></span><br><span class="line">TreeMap常用api和TreeSet一致，只是在方法名后加Entry或者Key表示返回键值对还是键，比较的时候都是比较键；</span><br><span class="line">如果题目出现数据集合是动态的，并需要根据数据的大小实现快速查找，则使用TreeSet或TreeMap。HashMap做不到这一点，是因为其只能判断某键是否存在，并不能有“比某键大的所有数字中最小的那一个”这种功能。</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span>TreeSet和TreeMap使用起来很简单，遇到的题目，解题都是依次调用一遍floor和ceiling做判断，再put本元素即可。    </span><br><span class="line"><span class="number">7.</span>HashMap和TreeMap是同级的，都继承AbstractMap。必须TreeMap&lt;Integer,Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();，如果前面Class为Map&lt;Integer,Integer&gt;，则会因为多态而失去TreeMap的方法。</span><br></pre></td></tr></table></figure><h2 id="第九章、堆"><a href="#第九章、堆" class="headerlink" title="第九章、堆"></a>第九章、堆</h2><h3 id="059、数据流的第K大数值（703、9月16日）"><a href="#059、数据流的第K大数值（703、9月16日）" class="headerlink" title="059、数据流的第K大数值（703、9月16日）"></a>059、数据流的第K大数值（703、9月16日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，暴力破解。维护一个List存放数字，每次添加元素时，使用官方api进行逆序排列，再根据k索引到目标值。（关键词，集合api）</span><br><span class="line">Collections.sort(list, Comparator.reverseOrder());</span><br><span class="line"><span class="number">2.</span>Arrays.sort是数组排序，Collections.sort是集合排序，都可以传入Comparator接口的实现类，实现自定义排序。自定义排序这块还是不太熟悉，PriorityQueue、上面的逆排序都需要自定义排序比较器，后面需要掌握。</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，最小堆。维护一个PriorityQueue，其默认是最小堆，堆顶是整个堆的最小值，这个堆的目的是保存数组中前k大的数字。设计add函数时，按如下逻辑。因为只维护了PriorityQueue，空间复杂度为O(k)。（关键词，前k大元素的最小堆）</span><br><span class="line">a.如果当前堆大小小于k，直接将数字添加到堆;</span><br><span class="line">b.如果当前堆大小大于等于k，且要添加的数字超过堆顶，删除堆顶，并将新数字放入PriorityQueue，否则无视新数字；</span><br><span class="line">c.这样每次返回堆顶，堆顶是前k大数字中的最小值，即为第k大的数字；</span><br><span class="line"> <span class="number">4.</span>最小堆常求前k大元素，最大堆常求前k小元素，是反的。</span><br></pre></td></tr></table></figure><h3 id="060、出现频率最高的k个数字（347、9月16日）"><a href="#060、出现频率最高的k个数字（347、9月16日）" class="headerlink" title="060、出现频率最高的k个数字（347、9月16日）"></a>060、出现频率最高的k个数字（347、9月16日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，最小堆。先遍历一遍，将数字和出现次数放入hashMap；再遍历hashMap，按照上一题的方式，不满时放入最小堆，满时比较堆顶元素决定是否删除堆顶并放入。但是，这么做出现了问题，因为放入堆时会根据数字大小构造最小堆，而不是数字频率。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，最小堆。维护一个PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt;，构造函数传入的Comparator用键的值比较。</span><br><span class="line">    PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; minHeap =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;e1.getValue()-e2.getValue());</span><br><span class="line">这里用了lambda表达式。（关键词，最小堆放entry）</span><br></pre></td></tr></table></figure><h3 id="061、和最小的k个数对（373、9月16日）"><a href="#061、和最小的k个数对（373、9月16日）" class="headerlink" title="061、和最小的k个数对（373、9月16日）"></a>061、和最小的k个数对（373、9月16日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，最大堆。维护一个PriorityQueue&lt;<span class="type">int</span>[]&gt;，自定义Comparator如下：</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;(e2[<span class="number">0</span>]+e2[<span class="number">1</span>])-(e1[<span class="number">0</span>]+e1[<span class="number">1</span>]));</span><br><span class="line">两层<span class="keyword">for</span>循环遍历两个数组，按照上一题的方式，不满时放入最大堆，满时比较堆顶元素决定是否删除堆顶并放入。</span><br><span class="line">遍历完后，如果最大堆的大小小于k，则再两层<span class="keyword">for</span>循环遍历两个数组将所有结果放入返回值；否则将堆中结果放入返回值。</span><br><span class="line">（关键词，最大堆<span class="type">int</span>[]）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，我的想法优化。因为两个数组是递增排序的，双层<span class="keyword">for</span>循环时不必遍历全部元素，都只用遍历前k个：</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Math.min(k,nums1.length);i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; Math.min(k,nums2.length); j++) &#123;</span><br><span class="line">  此外，可以用<span class="keyword">while</span>(!maxHeap.isEmpty())避免最大堆大小小于k，即双层<span class="keyword">for</span>的全部结果数目小于k的情况，不用额外再双<span class="keyword">for</span>原始数组。</span><br></pre></td></tr></table></figure><h3 id="总结之堆"><a href="#总结之堆" class="headerlink" title="总结之堆"></a>总结之堆</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>Arrays.sort是数组排序，Collections.sort是集合排序，都可以传入Comparator接口的实现类，实现自定义排序。自定义排序这块还是不太熟悉，PriorityQueue、上面的逆排序都需要自定义排序比较器，后面需要掌握。</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>堆分类定义（堆通常用完全二叉树实现，最大特点是最值位于堆顶）：</span><br><span class="line">    最大堆，每个节点的值总是大于或等于其任意子节点的值；在最大堆中，根节点就是整个堆的最大值；</span><br><span class="line">    最小堆，每个节点的值总是小于或等于其任意子节点的值；在最小堆中，根节点就是整个堆的最小值；</span><br><span class="line"><span class="number">3.</span>堆的经典面试题，就是求一个数据集合中值最大或最小的k个元素；如果面试题是求出一个动态集合中的最大值或最小值，考虑用堆。最小堆常求前k大元素，最大堆常求前k小元素，是反的。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>Java提供了PriorityQueue实现堆结构，默认情况下是一个最小堆，如果使用最大堆调用构造函数时就需要传入Comparator改变比较排序规则，其常用api：</span><br><span class="line">add(e)  <span class="comment">//插入新的元素，会抛出异常；而offer(e)等效但不抛异常，而是返回null</span></span><br><span class="line">remove  <span class="comment">//删除堆顶元素，会抛出异常；而poll等效但不抛出异常，而是返回null</span></span><br><span class="line">element <span class="comment">//返回堆顶元素，会抛出异常；而peek等效但不抛出异常</span></span><br><span class="line">    Java中PriorityQueue实现了Queue接口，但它并不是一个队列，不按照“先入先出”顺序删除元素；它本质是一个堆，每次调用remove或者poll都是删除堆顶元素。最大堆中每次删除值最大的元素，最小堆中每次删除值最小的元素。element和peek同理。</span><br><span class="line"><span class="number">5.</span>PriorityQueue中，使用lambda表达式自定义Comparator例子：</span><br><span class="line">   PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; minHeap =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;e1.getValue()-e2.getValue()); </span><br></pre></td></tr></table></figure><h2 id="第十章、前缀树"><a href="#第十章、前缀树" class="headerlink" title="第十章、前缀树"></a>第十章、前缀树</h2><h3 id="062、实现前缀树（208、9月16日）"><a href="#062、实现前缀树（208、9月16日）" class="headerlink" title="062、实现前缀树（208、9月16日）"></a>062、实现前缀树（208、9月16日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，前缀树。定义前缀树节点时，可以将其children指针指向长度为<span class="number">26</span>的TrieNode数组，因为前缀树一般考察小写字母，此外，维护一个布尔标志位，表示路径截止到该字符是否为字符串。本题需要先定义静态前缀树节点类，在insert、search和startsWith方法实现时，根据children指针遍历路径时，记住根节点是空的，还有children数组中不为<span class="literal">null</span>的单元即代表有效字母即可。（关键词，定义TrieNode）</span><br></pre></td></tr></table></figure><h3 id="063、替换单词（648、9月17日）"><a href="#063、替换单词（648、9月17日）" class="headerlink" title="063、替换单词（648、9月17日）"></a>063、替换单词（648、9月17日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，前缀树。用前缀树解决问题分为两步，第一步是创建前缀树，第二步是在前缀树中查找。</span><br><span class="line">创建前缀树时，</span><br><span class="line">遍历前缀树，当children对应字母指针为<span class="literal">null</span>时，在该字母指针上添加新节点，遍历晚字符串将当前节点isWord标志位设置为<span class="literal">null</span>。注意，对于字典中的每个字符串，都是从root节点开始遍历前缀树，每到新字符串要将node指向root；</span><br><span class="line">在前缀树中查找时，通过StringBuilder累积路径，当isWord标志位为<span class="literal">true</span>说明是最短前缀，或者children对应字母指针为<span class="literal">null</span>说明不存在前缀，这时候跳出循环并根据条件返回。</span><br><span class="line">在主函数中，通过以下api分割和组合字符串：</span><br><span class="line"> String[] units = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>,units);</span><br></pre></td></tr></table></figure><h3 id="064、神奇的字典（676、9月17日）"><a href="#064、神奇的字典（676、9月17日）" class="headerlink" title="064、神奇的字典（676、9月17日）"></a>064、神奇的字典（676、9月17日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，前缀树。创建前缀树逻辑如旧。在前缀树中查找时，显然是用递归。每次访问新的字母时，尝试当前节点的<span class="number">26</span>个children字母指针，并根据是否为当前字母，决定“已修改次数标志位”是否加<span class="number">1</span>，并继续递归。对于我目前水平来说，还是不熟悉dfs方法传参和返回值的设计：</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TrieNode root,String word,<span class="type">int</span> i,<span class="type">int</span> edit)</span>  <span class="comment">//传参新节点，word，当前字母位置，修改次数</span></span><br><span class="line">需要考虑的情况：</span><br><span class="line">    a.<span class="literal">false</span>边界：root为<span class="literal">null</span>，说明不存在该字母指针，即字典不存在该单词；</span><br><span class="line">    b.<span class="literal">true</span>边界：当前字母位置i走到尽头，root是单词，已经修改一次；</span><br><span class="line">    c.当前字母位置i没有走到尽头，且标志位修改小于等于<span class="number">1</span>次，继续递归；</span><br><span class="line">    d.方法边界：其他情况都返回<span class="literal">false</span>，<span class="literal">true</span>只有“<span class="literal">true</span>边界”那一种情况；</span><br><span class="line">    （关键词，dfs）</span><br></pre></td></tr></table></figure><h3 id="065、最短的单词编码（820、9月17日）"><a href="#065、最短的单词编码（820、9月17日）" class="headerlink" title="065、最短的单词编码（820、9月17日）"></a>065、最短的单词编码（820、9月17日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>题目解释，这道题是给出单词数组words，但希望换成字符串s表示，并且字符串尽可能短。要求words[i]在s中以#结束，故不能考虑前缀重合，这时候就需要把一些尾缀相同的words[i]联合起来，但是为了表明words[i]在s中的开始位置，就用indices[i]索引words[i]的开始位置。题目答案要给出最短的字符串s长度。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，前缀树。将words中的单词逆序生成前缀树，实际维护了后缀相同的单词，此时要查询生成最短字符串的长度。对字符串a和b来说，如果a恰被淹没在b的路径里，那么只需累加b的长度；如果a和b只是部分前缀重合，那么a和b的长度都需要累加，这样能发现，最短字符串即全部叶子节点到root节点的路径。由于只需要统计长度，那就递归即可。dfs函数的设计还是很巧妙：</span><br><span class="line">    a.先将标志位isLeaf设置为<span class="literal">true</span>；</span><br><span class="line">    b.遍历<span class="number">26</span>个字母指针，如果指针不指向<span class="literal">null</span>，继续递归，并把标志位修改为<span class="literal">false</span>；</span><br><span class="line">    c.继而判断标志位是否为<span class="literal">true</span>，如果为<span class="literal">true</span>说明没有修改，即children指针均指向<span class="literal">null</span>，是叶子节点，此时累加长度；</span><br><span class="line">    初始化length为<span class="number">1</span>，即root节点（空节点）为<span class="number">1</span>，第一个节点时length为<span class="number">2</span>，满足“第一个字母#”长度为<span class="number">2</span>的要求。（关键词，dfs）</span><br><span class="line"><span class="number">3.</span>前缀树中dfs用标志位判断是否为叶子节点，不用root==<span class="literal">null</span>，因为大多数children指针确实为<span class="literal">null</span>。</span><br></pre></td></tr></table></figure><h3 id="066、单词之和（677、9月17日）"><a href="#066、单词之和（677、9月17日）" class="headerlink" title="066、单词之和（677、9月17日）"></a>066、单词之和（677、9月17日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashMap+前缀树。维护一个HashMap&lt;String,Integer&gt;和一个前缀树。insert方法把新键值插入hashMap的同时，还要把新键加入到前缀树中。这里重点说sum方法，是我为数不多自己实现回溯：</span><br><span class="line">    先通过prefix字符串遍历到最后的节点，并将prefix加入StringBuilder，进入dfs函数：</span><br><span class="line">     dfs(TrieNode node,<span class="type">int</span>[] sum,StringBuilder builder,<span class="type">int</span> index)</span><br><span class="line">    a.遍历当前节点node的<span class="number">26</span>个字母指针，如果不为<span class="literal">null</span>，将builder增加当前字母，并放入dfs继续递归，传入下一层字符的索引值index+<span class="number">1</span>，回溯时再在builder中删除当前字母；注意index初始为prefix长度，而不是<span class="number">0</span>；</span><br><span class="line">    b.如果当前节点为单词，将builder转化为字符串，从hashMap中根据键取值，并累积到最终结果；（关键词，dfs+hashMap）</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，前缀树。相比我的想法改进在，如果一个节点对应一个字符串的最后一个字符，那么该节点的整数字段的值就设为字符串的值，否则设为<span class="number">0</span>；这时候需要修改TrieNode定义，不再需要<span class="type">boolean</span>标志位isWord，而是整数值value。</span><br></pre></td></tr></table></figure><h3 id="067、最大的异或（421、9月17日）"><a href="#067、最大的异或（421、9月17日）" class="headerlink" title="067、最大的异或（421、9月17日）"></a>067、最大的异或（421、9月17日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，暴力破解。双层<span class="keyword">for</span>循环遍历，Math.max(value,nums[i]^nums[j])，然而超时了。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，前缀树。因为对于整数异或位运算，相异为<span class="number">1</span>，相同为<span class="number">0</span>，为使结果数值更大，应该尽量高位为<span class="number">1</span>。故构建前缀树时，高位作为前缀。遍历nums整数数组时，从高位开始遍历当前数字num的<span class="number">32</span>位，看前缀树是否有与当前位不同的位，</span><br><span class="line">    a.如果有则将node节点优先移动到该位，并将结果的该位置为<span class="number">1</span>；  xor = (xor&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    b.没有则移动到相同位，并将结果的该位置为<span class="number">0</span>；  xor = xor&lt;&lt;<span class="number">1</span>;</span><br><span class="line">当前数字num按位访问结束后，通过Math.max(max,xor)更新结果值。（关键词，高位前缀树取不同）</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span>回忆整数章节技巧：</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> (num&gt;&gt;i)&amp;<span class="number">1</span>;   <span class="comment">//从32位整数高位开始，右移i位，每次只保留末尾位</span></span><br></pre></td></tr></table></figure><h3 id="总结之前缀树"><a href="#总结之前缀树" class="headerlink" title="总结之前缀树"></a>总结之前缀树</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>前缀树定义：</span><br><span class="line">前缀树是一棵多叉树，一个节点可能有多个子节点。前缀树中除根节点外，每个节点表示字符串中的一个字符，而字符串由前缀树的路径表示。例如，“can”和“cat”前两个字符相同，它们在前缀树对应的两条路径中最开始的<span class="number">3</span>个节点重叠（根节点，<span class="string">&#x27;c&#x27;</span>和<span class="string">&#x27;a&#x27;</span>）。</span><br><span class="line"><span class="number">2.</span>前缀树主要用来解决字符串查找相关的问题，一般题目要求根据字符串的前缀进行查找。用前缀树解决问题分为两步，第一步是创建前缀树，第二步是在前缀树中查找。这部分需要熟练TrieNode节点定义、创建前缀树经典代码这<span class="number">2</span>步惯性操作，查找通常用dfs比较多样。</span><br><span class="line"><span class="number">3.</span>可以按需求修改TrieNode定义，比如增加字段<span class="type">int</span> value，记录单词对应的值。</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>越来越觉得，递归、回溯以及dfs方法要从四个方向考虑：<span class="literal">false</span>边界、<span class="literal">true</span>边界、继续递归条件和方法边界，而传参和返回值看代码需要什么，是后面才补充的。这部分还是不太熟练。</span><br><span class="line"><span class="number">5.</span>前缀树中dfs用标志位判断是否为叶子节点，不用root==<span class="literal">null</span>，因为大多数children指针确实为<span class="literal">null</span>。</span><br></pre></td></tr></table></figure><h2 id="第十三章、回溯法"><a href="#第十三章、回溯法" class="headerlink" title="第十三章、回溯法"></a>第十三章、回溯法</h2><h3 id="079、所有子集（78、9月18日）"><a href="#079、所有子集（78、9月18日）" class="headerlink" title="079、所有子集（78、9月18日）"></a>079、所有子集（78、9月18日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，回溯法。从左到右遍历整数数组nums，用subSet记录当前集合。遍历到每个元素时，可以选择不放入当前元素继续递归；或者将当前元素放入subSet后继续递归，递归结束将元素从当前集合删除。当遍历深度达到数组长度，则将subSet纳入结果。这道题需要注意：</span><br><span class="line">a.使用LinkedList，在删除元素时用removeLast方法；而不是使用List，删除元素时用remove(index)。这是因为，假设当前index为<span class="number">2</span>，subSet=[<span class="number">3</span>]，即前两次加的都是空，这样remove(<span class="number">2</span>)时就会越界，为了恢复状态应该用removeLast方法；</span><br><span class="line">b.双层List嵌套结果，需要用下面的方式放入结果。如果直接result.add(subSet)，后面再操作subSet时，会改变result中subSet值：</span><br><span class="line">result.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(subSet));</span><br><span class="line">（关键词，回溯经典）</span><br></pre></td></tr></table></figure><h3 id="080、含有k个元素的组合（77、9月18日）"><a href="#080、含有k个元素的组合（77、9月18日）" class="headerlink" title="080、含有k个元素的组合（77、9月18日）"></a>080、含有k个元素的组合（77、9月18日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，回溯法。显然不能穷举，k为多少就设多少层循环，应该传index回溯。这道题和上一道逻辑相同，因为需要提取k个数，所以外界判断subSet是否到达k，达到则纳入结果；当没有到达k时，有两种选择，可以选择不放入当前元素继续递归，给其他元素一个机会；或者将当前元素放入subSet后继续递归，递归结束将元素从当前集合删除。需注意当前元素不可越界，越界后会走不到判断逻辑并返回，不会继续越界。</span><br><span class="line">     <span class="keyword">if</span>(subSet.size()==k)&#123;</span><br><span class="line">            results.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(subSet));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(start&lt;=n)&#123;</span><br><span class="line">                dfs(n,k,start+<span class="number">1</span>,subSet,results);</span><br><span class="line">                </span><br><span class="line">                subSet.add(start);</span><br><span class="line">                dfs(n,k,start+<span class="number">1</span>,subSet,results);</span><br><span class="line">                subSet.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">（关键词，回溯经典）</span><br></pre></td></tr></table></figure><h3 id="081、允许重复选择元素的组合（39、9月19日）"><a href="#081、允许重复选择元素的组合（39、9月19日）" class="headerlink" title="081、允许重复选择元素的组合（39、9月19日）"></a>081、允许重复选择元素的组合（39、9月19日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯法。做完前几道有点进步了，按照惯性思路完成本题。dfs函数设计如下，index用于定位当前数字，sum是当前累积和，subSet是本集合，results是最终结果集合。</span><br><span class="line">dfs(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> index, <span class="type">int</span>[] sum, LinkedList&lt;Integer&gt; subSet,List&lt;List&lt;Integer&gt;&gt; results)</span><br><span class="line">dfs逻辑为，当前累计和sum小于target时，有两种选择：</span><br><span class="line">    a.index加一，不访问本索引数字，直接递进下个数字的dfs；</span><br><span class="line">    b.subSet和sum都累加本索引数字，index不变进入下一轮dfs，dfs结束后subSet和sum恢复原状，这样涵盖了多次使用一个数字的情况；</span><br><span class="line">当前累积和sum等于target时，将本集合subSet纳入结果；超过target则没有逻辑自动返回；</span><br><span class="line">（关键词，重复不加）</span><br></pre></td></tr></table></figure><h3 id="082、含有重复元素集合的组合（40、9月19日）"><a href="#082、含有重复元素集合的组合（40、9月19日）" class="headerlink" title="082、含有重复元素集合的组合（40、9月19日）"></a>082、含有重复元素集合的组合（40、9月19日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯法。经过题解点拨，“避免重复组合的方法是，当在某一步决定跳过某个值为m的数字时，跳过所有值为m的数字”。因此dfs逻辑为，当前累积和sun小于target时只有一种选择：</span><br><span class="line">subSet和sum都累加本索引数字，index加一，进入下一轮dfs，dfs结束后subSet和sum恢复原状，这样就不会使用某元素多次；</span><br><span class="line">但是，需要解决不同位置、值相同元素造成的结果重复。这时候，可以先通过Arrays.sort(candidates)排序初始数组，遍历到某数字时，如果下一数字等于本数字，就不断自增index直到不同的数字再dfs。（关键词，要跳全跳）</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>写完才发现完全依靠这句点拨，否则还是难想，辅以示例；比如原始数字集合candidates为[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]，某目标subSet为[<span class="number">2</span>,<span class="number">2</span>]，但会有<span class="number">3</span>种重复，用上面的逻辑，决定调<span class="number">2</span>时会跳出所有的<span class="number">2</span>，那么就会排除重复解：</span><br><span class="line">    a.跳过第一个<span class="number">2</span>，保留后两个<span class="number">2</span>；b.跳过中间的<span class="number">2</span>，保留前后的<span class="number">2</span>；</span><br><span class="line">这样，任何对<span class="number">2</span>的需求，都是取靠前位置的<span class="number">2</span>，靠后位置的<span class="number">2</span>不被选择故不会重复。</span><br></pre></td></tr></table></figure><h3 id="083、没有重复元素集合的全排列（46、9月19日）"><a href="#083、没有重复元素集合的全排列（46、9月19日）" class="headerlink" title="083、没有重复元素集合的全排列（46、9月19日）"></a>083、没有重复元素集合的全排列（46、9月19日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，回溯法。题解的思路基于示例更好说明，假设输入集合[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]，对于第一个位置，这<span class="number">3</span>个数字都有可能；对于第二个位置，只有<span class="number">2</span>个数字有可能；第三个位置已经没得选择。dfs函数设计如下：</span><br><span class="line">    a.当索引i达到数组长度时，将当前数组转换为List并纳入结果；</span><br><span class="line">    b.当索引i还没有达到数组长度时，从i开始，后面的每个数字都可以与i位置数字交换，i自增后进入下一轮dfs，dfs结束后将i位置和j位置数字交换回来；</span><br><span class="line">这种思路，每次交换到前面的数字都不再被访问，随着i的增加后面位置情况减少。</span><br><span class="line">（关键词，回溯交换）</span><br></pre></td></tr></table></figure><h3 id="084、含有重复元素集合的全排列（47、9月19日）"><a href="#084、含有重复元素集合的全排列（47、9月19日）" class="headerlink" title="084、含有重复元素集合的全排列（47、9月19日）"></a>084、含有重复元素集合的全排列（47、9月19日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯法。当索引i还没有到达数组长度时，从i开始，后面的每个数字只有与位置i的数字不同，都可以与i位置数字交换，其他步骤同第<span class="number">83</span>题。但是，有很多测试用例没通过。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，回溯法。观察题解发现，这里不能只判断“后面的每个数字只有与位置i的数字不同”，还有如果某数字已经与位置i的数字交换，那么与其值相同的数字就不应该再与位置i的数字交换。比如数组[<span class="number">1</span>,<span class="number">2</span>,i=<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]，这时候第二个<span class="number">3</span>不应该交换，第二个<span class="number">5</span>也不应该交换。</span><br><span class="line">（关键词，回溯交换+hashSet）</span><br></pre></td></tr></table></figure><h3 id="085、生成匹配的括号（22、9月19日）"><a href="#085、生成匹配的括号（22、9月19日）" class="headerlink" title="085、生成匹配的括号（22、9月19日）"></a>085、生成匹配的括号（22、9月19日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯法。这应该是第二次做这道题，虽然间隔很久，但是还是做出来了。思路就是，通过StringBuilder增加‘(’字符，进入下一轮dfs，dfs结束后将该字符从builder中移除，再同样操作‘)’字符。当递进深度达到<span class="number">2</span>*n时，判断字符串是否为有效括号，有效则纳入结果。</span><br><span class="line">    判断有效括号： ‘(’字符时压栈，‘)’字符时弹栈，弹栈时如果栈为空则<span class="literal">false</span>，全部字符遍历结束则返回<span class="literal">true</span>。</span><br><span class="line">但是，只击败了<span class="number">5</span>%的同学，肯定不是最优解了。  （关键词，先递进再判断）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，回溯法。相比我的优点是，不用专门判断括号是否有效。由于只存在圆括号“()”，那只需注意两点：</span><br><span class="line">    a.‘(’括号和‘)’括号，数目都不能超过n；</span><br><span class="line">    b.为满足括号匹配，任意时刻左括号数目 &gt;= 右括号数目；</span><br><span class="line">因此，当left&lt;n时，dfs进入left+<span class="number">1</span>；当left&gt;right时，dfs进入right+<span class="number">1</span>。  （关键词，left&gt;=n）</span><br></pre></td></tr></table></figure><h3 id="086、分割回文字符串（131、9月20日）"><a href="#086、分割回文字符串（131、9月20日）" class="headerlink" title="086、分割回文字符串（131、9月20日）"></a>086、分割回文字符串（131、9月20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯法。从start开始遍历，如果从start开始到i结束(包括i)的字符串为回文字符串，那就通过s.substring(start,i+<span class="number">1</span>)把这段字符串切割出来，从(i+<span class="number">1</span>)进入下一轮dfs，dfs结束后将该段字符串删除。</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.length();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPara(s,start,i))&#123;</span><br><span class="line">判断回文字符串的isPara方法，是用双指针实现，通过<span class="keyword">while</span>确定左右两指针是否相遇，在这一过程对比字符。又是只击败了<span class="number">5</span>%，可能还是最后双层List&lt;List&lt;String&gt;&gt; 转 String[][]的步骤太耗费时间。</span><br><span class="line">    （关键词，先判断后递进）</span><br><span class="line"><span class="number">2.</span>双层List&lt;List&lt;String&gt;&gt; 转 String[][]，内层不定长时的coding技巧：</span><br><span class="line">    String[][] finals = <span class="keyword">new</span> <span class="title class_">String</span>[results.size()][];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;results.size();i++)&#123;</span><br><span class="line">        List&lt;String&gt; list = results.get(i);</span><br><span class="line">        finals[i] = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="087、复原IP（93、9月20日）"><a href="#087、复原IP（93、9月20日）" class="headerlink" title="087、复原IP（93、9月20日）"></a>087、复原IP（93、9月20日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，回溯法。当没有遍历到末尾，且<span class="string">&#x27;.&#x27;</span>字符数量不足<span class="number">3</span>时，对于当前字符有两种选择：</span><br><span class="line">    a.如果seg加当前字符后仍然有效，可以不创建新段，直接seg+ch，并进入下一轮dfs；</span><br><span class="line">    <span class="keyword">if</span>(isAvaliable(seg+ch))</span><br><span class="line">    b.如果<span class="string">&#x27;.&#x27;</span>字符数量小于<span class="number">3</span>，且当前段有字符，可以创建新段<span class="string">&#x27;&#x27;</span>+ch，并在ip上添加当前段seg+<span class="string">&#x27;.&#x27;</span>，再进入下一轮dfs；</span><br><span class="line"><span class="keyword">if</span>(numSplit&lt;<span class="number">3</span>&amp;&amp;seg.length()&gt;<span class="number">0</span>)</span><br><span class="line">这道题的边界条件比较复杂，比较难想到。此外，其isAvaliable方法设计很简洁，即规定范围且要满足<span class="number">0</span>的出现要求：</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(s)&lt;=<span class="number">255</span>&amp;&amp;(s.equals(<span class="string">&quot;0&quot;</span>)||s.charAt(<span class="number">0</span>)!=<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">这道题解法并没有回溯，更像是所有可能走到头的穷举。估计下次做还是做不出来hhhh</span><br><span class="line">（关键词，先判断后递进）</span><br><span class="line"><span class="number">2.</span>字符串值比较一定要用s.equals(<span class="string">&quot;0&quot;</span>)，而不是s==<span class="string">&quot;0&quot;</span>，这里s是通过<span class="string">&quot;&quot;</span>+ch不断累加得到的。</span><br></pre></td></tr></table></figure><h3 id="总结之回溯法"><a href="#总结之回溯法" class="headerlink" title="总结之回溯法"></a>总结之回溯法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>官方描述提炼：</span><br><span class="line">a.在采用回溯法解决问题时，如果到达树形结构的叶子节点，就找到了问题的一个解；</span><br><span class="line">b.如果在前往某个节点时对问题的解的状态进行了修改，那么在回溯到它的父节点时要记得清除相应的修改；</span><br><span class="line">c.如果明确知道某些子树没有必要遍历，那么在遍历的时候应该避开这些子树以优化效率，这种操作叫剪枝；</span><br><span class="line"><span class="number">2.</span>组合（子集）不看顺序，排列需要注意顺序（排列题目用swap）。</span><br><span class="line"><span class="number">3.</span>LinkedList类有removeLast方法，而ArrayList类并没有，注意多态别List。</span><br><span class="line"><span class="number">4.</span>双层List嵌套结果，需要用下面的方式放入结果。如果直接result.add(subSet)，后面再操作subSet时，会改变result中subSet值：</span><br><span class="line">result.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(subSet));</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>回溯法dfs函数的经典结构（组合问题）：</span><br><span class="line">    <span class="keyword">if</span>(subSet.size()==k)&#123;</span><br><span class="line">            results.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(subSet));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(start&lt;=n)&#123;</span><br><span class="line">                dfs(n,k,start+<span class="number">1</span>,subSet,results);</span><br><span class="line">                </span><br><span class="line">                subSet.add(start);</span><br><span class="line">                dfs(n,k,start+<span class="number">1</span>,subSet,results);</span><br><span class="line">                subSet.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="number">6.</span>避免重复组合的方法是，当在某一步决定跳过某个值为m的数字时，跳过所有值为m的数字。</span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> index;</span><br><span class="line">    <span class="keyword">while</span>(step+<span class="number">1</span>&lt;candidates.length&amp;&amp;candidates[step+<span class="number">1</span>] == candidates[step])&#123;</span><br><span class="line">        step += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(candidates, target, step + <span class="number">1</span>, sum, subSet, results);</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>双层List&lt;List&lt;String&gt;&gt; 转 String[][]，内层不定长时的coding技巧：</span><br><span class="line">    String[][] finals = <span class="keyword">new</span> <span class="title class_">String</span>[results.size()][];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;results.size();i++)&#123;</span><br><span class="line">        List&lt;String&gt; list = results.get(i);</span><br><span class="line">        finals[i] = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>适合回溯法的问题的一个特点是解决这个问题存在多个解，而且题目往往要求列出所有的解。</span><br></pre></td></tr></table></figure><h2 id="第十一章、二分查找"><a href="#第十一章、二分查找" class="headerlink" title="第十一章、二分查找"></a>第十一章、二分查找</h2><h3 id="068、查找插入位置（35、9月23日）"><a href="#068、查找插入位置（35、9月23日）" class="headerlink" title="068、查找插入位置（35、9月23日）"></a>068、查找插入位置（35、9月23日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，穷举。从左到右遍历数组，如果当前数字大于等于目标值，返回当前索引；否则遍历结束后，返回数组长度，即目标值应该插入有序数组的最后一位。（关键词，穷举）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，二分查找。经典的二分查找代码，维护left和right双指针，当left&lt;=right时，每轮取中间与目标值比较，根据大小关系决定移动哪个指针，下一轮遍历哪半部分。其中，left等于right是因为，长度为<span class="number">1</span>的子数组也是有效范围。</span><br><span class="line">    稍有不同的是，指针越界则返回left指针，说明上一轮指针重合，target恰好介于二者之间。</span><br></pre></td></tr></table></figure><h3 id="069、山峰数组的顶部（852、9月23日）"><a href="#069、山峰数组的顶部（852、9月23日）" class="headerlink" title="069、山峰数组的顶部（852、9月23日）"></a>069、山峰数组的顶部（852、9月23日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，穷举+标志位。维护一个整型标志位flagIndex，记录山峰位置索引。从索引<span class="number">1</span>开始，从左到右遍历数组，如果当前值大于上一个值，就更新flagIndex，否则跳出循环，返回结果flagIndex。本题简单是因为输入是标准的山峰数组。（关键词，标志位）</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，二分查找。经典二分查找代码，但不知道如何维护边界。因为山峰的范围在[<span class="number">1</span>,length-<span class="number">2</span>]，故左指针从<span class="number">1</span>开始，右指针从（length-<span class="number">1</span>）开始，其他不变。（关键词，山峰边界）</span><br></pre></td></tr></table></figure><h3 id="070、排序数组中只出现一次的数字（540、9月23日）"><a href="#070、排序数组中只出现一次的数字（540、9月23日）" class="headerlink" title="070、排序数组中只出现一次的数字（540、9月23日）"></a>070、排序数组中只出现一次的数字（540、9月23日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，穷举+标志位。维护一个整型标志位flag，记录当前遍历节点。因为是有序列表，如果本元素和前元素相等，就将flag恢复为Integer.MIN_VALUE，如果不相等，则返回上一元素。遍历到新数字时，如果flag等于Integer.MIN_VALUE，说明前两元素相等并清空了flag，这时候要将flag设置为本数字，避免本数字为最后的数字。（关键词，标志位）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，二分查找。对于<span class="number">3</span>前面的每个数对如(<span class="number">1</span>,<span class="number">1</span>)，第一个数是偶数；对于<span class="number">3</span>后面的每个数对如(<span class="number">4</span>,<span class="number">4</span>)，第一个数是奇数。因此，每次取到偶数mid时，如果nums[mid] == nums[mid + <span class="number">1</span>]说明mid是在<span class="number">3</span>之前，就移动左指针到mid+<span class="number">2</span>（下一个偶数），反之移动右指针到mid。（关键词，索引奇偶性找规律）</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">    [偶,奇,偶,奇,偶,奇,偶,奇,偶]</span><br><span class="line">    （二分查找看了几遍，没做出来）</span><br></pre></td></tr></table></figure><h3 id="071、按权重生成随机数（528、9月26日）"><a href="#071、按权重生成随机数（528、9月26日）" class="headerlink" title="071、按权重生成随机数（528、9月26日）"></a>071、按权重生成随机数（528、9月26日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，前缀和+二分查找。这道题要求按权重获取随机数，题解思路的精妙之处，在于维护一个前缀和数组，比如权重[<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]，维护一个前缀和数组[<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">12</span>],从[<span class="number">1</span>,<span class="number">12</span>]的范围里通过random API平均取随机数，如果取到<span class="number">9</span>，就对应取到前缀和数组中的索引<span class="number">3</span>，这样就实现了下标按权重随机获取。Solution构造方法初始化前缀和数组，pickIndex方法[<span class="number">0</span>,权重总和]随机获取值后，在前缀和数组里二分查找获取索引。</span><br><span class="line">    （关键词，前缀和数组）</span><br><span class="line"><span class="number">2.</span>本题数组中存着前缀和，因此要在[<span class="number">1</span>,total]中随机取值</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Random</span>.nextInt(total);  <span class="comment">//在[0,total-1]中随机取值</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Random</span>.nextInt(total)+<span class="number">1</span>;  <span class="comment">//在[1,total]中随机取值</span></span><br></pre></td></tr></table></figure><h3 id="072、求平方根（69、9月25日）"><a href="#072、求平方根（69、9月25日）" class="headerlink" title="072、求平方根（69、9月25日）"></a>072、求平方根（69、9月25日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，二分查找。每次取left、right指针的中间，如果mid*mid小于目标值，移动左指针到(mid-<span class="number">1</span>)，否则移动右指针到(mid+<span class="number">1</span>)。注意，判断条件left&lt;=right，这样如果目标值为<span class="number">0</span>就能处理。结果返回(left-<span class="number">1</span>)，因为mid才是平方恰小于目标值的数。（关键词，二分查找）</span><br><span class="line">    还需要<span class="type">long</span>来处理一些特别的测试用例。</span><br></pre></td></tr></table></figure><h3 id="073、狒狒吃香蕉（875、9月26日）"><a href="#073、狒狒吃香蕉（875、9月26日）" class="headerlink" title="073、狒狒吃香蕉（875、9月26日）"></a>073、狒狒吃香蕉（875、9月26日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，二分查找。没想到这样的题也能用二分查找，首先是在给定速度speed下时间的计算公式：</span><br><span class="line"><span class="type">int</span> <span class="variable">curTime</span> <span class="operator">=</span> (pile+speed-<span class="number">1</span>)/speed;</span><br><span class="line">time += curTime;</span><br><span class="line">这道题的思路就是，在最低、最高速度范围内，通过二分查找选出速度，并计算时间，如果时间低于目标值，就减小速度的最高界，反之增加速度的最低界。根据题解，狒狒吃香蕉速度最低每小时<span class="number">1</span>根，最高每小时最大堆根，因此将left、right指针分别指向<span class="number">0</span>和max，在二分查找时更新left、right指针，并更新获得的最低速度。</span><br><span class="line">    （关键词，二分查找速度+计算时间再判断）</span><br></pre></td></tr></table></figure><h3 id="总结之二分查找"><a href="#总结之二分查找" class="headerlink" title="总结之二分查找"></a>总结之二分查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>在一个长度为n的数组中查找一个数字，从左到右遍历的话需要O(n)的时间；如果数组是排序的（通常递增），那么可以采用二分查找进行优化。二分查找步骤如下：</span><br><span class="line">取出位于数组中间的数字和目标数字比较，如果中间数字大于目标数字，那么只需要查找数组的前半部分，没必要再看后半部分。</span><br><span class="line"><span class="number">2.</span>经典二分查找代码：（关键词，left和right双指针，每轮取中间）</span><br><span class="line">    经典的二分查找代码，维护left和right双指针，当left&lt;=right时，每轮取中间与目标值比较，根据大小关系决定移动哪个指针，下一轮遍历哪半部分。其中，left等于right是因为，长度为<span class="number">1</span>的子数组也是有效范围。</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            right = mid-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> left;  <span class="comment">//如果找不到则返回比target大的后一位</span></span><br><span class="line"><span class="number">3.</span>Random API复制记录：</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Random</span>.nextInt(total);  <span class="comment">//在[0,total-1]中随机取值</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Random</span>.nextInt(total)+<span class="number">1</span>;  <span class="comment">//在[1,total]中随机取值</span></span><br></pre></td></tr></table></figure><h2 id="第十二章、排序"><a href="#第十二章、排序" class="headerlink" title="第十二章、排序"></a>第十二章、排序</h2><h3 id="074、合并区间（56、9月26日）"><a href="#074、合并区间（56、9月26日）" class="headerlink" title="074、合并区间（56、9月26日）"></a>074、合并区间（56、9月26日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，先排序再比较。先将二维数组内层根据start从小到达排序，这时候就可比较相邻数组的end。这里使用双重<span class="keyword">while</span>控制，对于内层<span class="keyword">while</span>，如果遍历到的新数组start仍小于临时数组的end，就将新数组范围添加到临时数组（即更新临时数组end），直到某新数组不符合要求，则将临时数组添加到结果集中，在当前遍历点开始新一轮外层循环。</span><br><span class="line">    （关键词，排序后双<span class="keyword">while</span>）</span><br><span class="line"><span class="number">2.</span>数组操作相关api：</span><br><span class="line">    Arrays.sort(intervals,(<span class="type">int</span>[] e1,<span class="type">int</span>[] e2)-&gt;e1[<span class="number">0</span>]-e2[<span class="number">0</span>]);  <span class="comment">//将二维数组intervals中的数组，按照索引0位置大小排序</span></span><br><span class="line"><span class="comment">//将List转换为二维数组，需要先定义有外层初值的二维数组resultArray，再调用toArray API</span></span><br><span class="line">List&lt;<span class="type">int</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[][] resultArray = <span class="keyword">new</span> <span class="title class_">int</span>[result.size()][];</span><br><span class="line">resultArray = result.toArray(resultArray);</span><br></pre></td></tr></table></figure><h3 id="075、数组相对排序（1122、9月27日）"><a href="#075、数组相对排序（1122、9月27日）" class="headerlink" title="075、数组相对排序（1122、9月27日）"></a>075、数组相对排序（1122、9月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>计数排序：如果数组长度为n，整数范围（最大整数和最小整数的差值）为k，对于k远小于n的场景，计数排序的时间复杂度优于其他基于比较的排序算法（如归并排序，快速排序等）。计数排序的基本思想是，先统计数组中每个整数在数组中出现的次数，然后按照从小到大的顺序将每个整数按照它出现的次数填到数组中。</span><br><span class="line">    即先根据输入的极值为每个可能的位置挖好坑（辅助数组），再遍历数组将每个位置的次数输入辅助数组，最后按顺序遍历辅助数组即可得到有序的结果。时间复杂度O(n+k)，空间复杂度O(k)。（关键词，counts数组）</span><br><span class="line">    <span class="comment">//计数排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            min = Math.min(min,num);</span><br><span class="line">            max = Math.max(max,num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] counts = <span class="keyword">new</span> <span class="title class_">int</span>[max-min+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            counts[num-min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num=min;num&lt;=max;num++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(counts[num-min]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                nums[i++] = num;</span><br><span class="line">                counts[num-min] -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，计数排序。题目提示<span class="number">0</span> &lt;= arr1[i], arr2[i] &lt;= <span class="number">1000</span>，给出了数字范围k，是可以用计数排序的提示。先定义counts数组为<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>]，将arr1数组中每个数字的次数填入counts数组的对应索引位置，遍历arr2数组将counts数组对应数字依次取出，再将counts数组剩余元素依次取出，即可得到有序结果。（关键词，arr1放入counts[<span class="number">1001</span>]）</span><br></pre></td></tr></table></figure><h3 id="076、数组中的第k大的数字（215、9月27日）"><a href="#076、数组中的第k大的数字（215、9月27日）" class="headerlink" title="076、数组中的第k大的数字（215、9月27日）"></a>076、数组中的第k大的数字（215、9月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>快速排序：快速排序的基本思想是分治法，排序过程如下：在输入数组中随机选取一个元素作为中间值（pivot），然后对数组进行分区（partition），使所有比中间值小的数据移动到数组的左边，所有比中间值大的数据移动到数组的右边。接下来对两侧的子数组用相同的步骤排序，直到子数组只有一个数字为止。（关键词，随机获取中间值+small指针交换）</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray_quick(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">        quicksort(nums,<span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end&gt;start)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> partition(nums,start,end);</span><br><span class="line">            quicksort(nums,start,pivot-<span class="number">1</span>);</span><br><span class="line">            quicksort(nums,pivot+<span class="number">1</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//small指针始终指向已经发现的最后一个小于中间值的数字</span></span><br><span class="line"><span class="comment">//即对于某一子数组，从左到右遍历时，如果发现nums[i]小于中间值，就和small指针位置的数字交换；介于small到i的数字，都是比中间值要大的数字，当i到达end时，将small指针位置数字和end交换，就使得大于中间值的数字放在了右边。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(end-start+<span class="number">1</span>)+start;</span><br><span class="line">        swap(nums,random,end);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">small</span> <span class="operator">=</span> start - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;end;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[end])&#123;</span><br><span class="line">                small++;</span><br><span class="line">                swap(nums,i,small);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        small++;</span><br><span class="line">        swap(nums,small,end);</span><br><span class="line">        <span class="comment">//不是返回random，而是返回small，观察两次交换，random位置的值先到end，再到了small</span></span><br><span class="line">        <span class="keyword">return</span> small;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> index1,<span class="type">int</span> index2)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index1!=index2)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[index1];</span><br><span class="line">            nums[index1] = nums[index2];</span><br><span class="line">            nums[index2] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，快速排序+二分查找。先通过partition方法获取确定的中间值索引index，如果index小于目标索引位置，说明需要在右侧子数组中继续寻找，将二分查找的left指针指向index+<span class="number">1</span>；如果index大于目标索引位置，说明需要在左侧子数组中继续寻找，将二分查找的right指针指向index-<span class="number">1</span>；并继续递归调用partition方法，直到撞出目标索引位置后返回。（关键词，快排+二分查找）</span><br></pre></td></tr></table></figure><h3 id="077、链表排序（148、9月27日）"><a href="#077、链表排序（148、9月27日）" class="headerlink" title="077、链表排序（148、9月27日）"></a>077、链表排序（148、9月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>归并排序：归并排序也是一种基于分治法的排序算法，为了排序长度为n的数组，需要先排序两个长度为n/<span class="number">2</span>的子数组，然后合并两个排序的子数组。示例：  需要维护两个数组来回倒腾（关键词，子数组翻倍排序）</span><br><span class="line">    [<span class="number">4</span>,<span class="number">1</span>, <span class="number">5</span>,<span class="number">6</span>, <span class="number">2</span>,<span class="number">7</span>, <span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line">  -&gt;[<span class="number">1</span>,<span class="number">4</span>, <span class="number">5</span>,<span class="number">6</span>, <span class="number">2</span>,<span class="number">7</span>, <span class="number">3</span>,<span class="number">8</span>]</span><br><span class="line">  -&gt;[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>    <span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">  -&gt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>   ]</span><br><span class="line"><span class="comment">//归并排序 非递归实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray_guibing(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] src = nums;</span><br><span class="line">        <span class="type">int</span>[] dst = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">    <span class="comment">//外层遍历每次翻倍合并两个数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> seg=<span class="number">1</span>;seg&lt;length;seg+=seg)&#123;</span><br><span class="line">            <span class="comment">//内层遍历从左到右，合并排序2*seg范围里的两个有序子数组，</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> start=<span class="number">0</span>;start&lt;length;start+=seg*<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> Math.min(start+seg, length);</span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(start+seg*<span class="number">2</span>,length);</span><br><span class="line">                <span class="type">int</span> i=start,j=mid,k=start;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;mid||j&lt;end)&#123;</span><br><span class="line">                    <span class="comment">//靠右的子数组可能先结束，如果其提前结束，就只选取前一数组的值</span></span><br><span class="line">                    <span class="keyword">if</span>(j == end||(i&lt;mid&amp;&amp;src[i]&lt;src[j]))&#123;</span><br><span class="line">                        dst[k++] = src[i++];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dst[k++] = src[j++];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换src和temp，屠龙勇士终成龙</span></span><br><span class="line">            <span class="type">int</span>[] temp = src;</span><br><span class="line">            src = dst;</span><br><span class="line">            dst = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并排序 递归实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray_guibing2(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">        <span class="type">int</span>[] dst = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        dst = Arrays.copyOf(nums,nums.length);</span><br><span class="line">        mergeSort(nums,dst,<span class="number">0</span>,nums.length);</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] src,<span class="type">int</span>[] dst,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start+<span class="number">1</span>&gt;=end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start+end)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(dst,src,start,mid);</span><br><span class="line">        mergeSort(dst,src,mid,end);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start,j = mid,k = start;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;mid||j&lt;end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j == end||(i&lt;mid&amp;&amp;src[i]&lt;src[j]))&#123;</span><br><span class="line">                dst[k++] = src[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dst[k++] = src[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，归并排序。最近有点急火攻心，感冒了也迷茫了，在不知道的位置滚雪球，真的是在前进吗？总体结构如下代码，先通过split方法（快慢指针）获取链表的中间位置并切开，递归调用sortList将两边排序好后，再用merge方法组合两个链表。在merge方法中，因为传入两个链表的目的就是合并，因此可以移动两个链表的头指针，比较两个头指针大小后接到新链表cur上。</span><br><span class="line">    （关键词，快慢指针切开+归并排序）</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head2</span> <span class="operator">=</span> split(head);</span><br><span class="line">        </span><br><span class="line">        head1 = sortList(head1);</span><br><span class="line">        head2 = sortList(head2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(head1,head2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="078、合并排序链表（23、9月27日）"><a href="#078、合并排序链表（23、9月27日）" class="headerlink" title="078、合并排序链表（23、9月27日）"></a>078、合并排序链表（23、9月27日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，最小堆。定义PriorityQueue如下，首先将每个链表的表头放入minHeap，由于是最小堆，此时poll操作获取值最小的节点，先将该节点链入新列表，再将其next指针指向的节点再放入minHeap，重复次操作直到最小堆为空。</span><br><span class="line">PriorityQueue&lt;ListNode&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;e1.val-e2.val);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，归并排序。将这些列表看作经典代码split方法切割后的列表。这时候只有对两边数组排序后再合并即可。注意边界调节，如果某范围start+<span class="number">1</span>==end，说明只有一条链表，此时不用再切开递进，直接返回后准备在上一层和另一条链表进行合并。</span><br><span class="line">    （关键词，索引切开+链表归并排序+最小单位是一条链表）</span><br></pre></td></tr></table></figure><h3 id="总结之排序"><a href="#总结之排序" class="headerlink" title="总结之排序"></a>总结之排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>面试经常要求应聘者比较插入排序、冒泡排序、堆排序、计数排序、归并排序和快速排序等不同算法的优劣，需要能够从额外空间消耗、平均时间复杂度和最差时间复杂度方面比较，最可能遇到的是计数排序、快速排序和归并排序。</span><br><span class="line"><span class="number">2.</span>排序能够为二分查找创建基础，在时间复杂度允许的情况下，可以先排序再解题。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>数组操作相关api记录复制：</span><br><span class="line">    Arrays.sort(intervals,(<span class="type">int</span>[] e1,<span class="type">int</span>[] e2)-&gt;e1[<span class="number">0</span>]-e2[<span class="number">0</span>]);  <span class="comment">//将二维数组intervals中的数组，按照索引0位置大小排序</span></span><br><span class="line"><span class="comment">//将List转换为二维数组，需要先定义有外层初值的二维数组resultArray，再调用toArray API</span></span><br><span class="line">List&lt;<span class="type">int</span>[]&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[][] resultArray = <span class="keyword">new</span> <span class="title class_">int</span>[result.size()][];</span><br><span class="line">resultArray = result.toArray(resultArray);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>计数排序定义即经典代码 见<span class="number">075</span>、数组相对排序；      时间O(n+k)</span><br><span class="line">  快速排序定义即经典代码 见<span class="number">076</span>、数组中的第k大的数字；  平均时间O(nlogn)</span><br><span class="line">  归并排序定义即经典代码 见<span class="number">077</span>、链表排序； 时间O(nlogn)  空间O(n)</span><br><span class="line"><span class="number">5.</span>链表归并排序，合并时的经典复用代码（即按顺序合并两条有序的单链表）：</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge</span><span class="params">(ListNode head1,ListNode head2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span>(head1!=<span class="literal">null</span>&amp;&amp;head2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head1.val&lt;=head2.val)&#123;</span><br><span class="line">                cur.next = head1;</span><br><span class="line">                <span class="comment">//改造链表是因为，当被传入merge时已经是切成的小段，目的就是连城大段</span></span><br><span class="line">                head1= head1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = head2;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = head1==<span class="literal">null</span>?head2:head1;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">6.</span>从<span class="number">8</span>月<span class="number">14</span>日走向<span class="number">9</span>月<span class="number">27</span>日，从最开始感受到稳定进步的兴奋，到现在每天滚着雪球惯性向前的茫然，这一个半月，听着师兄们找工作的挫败感，记起最初Java安全岗的梦想飘然远逝，在西电的深色夜幕中，汹涌人潮在黑暗中起落不止，失去光彩的星星一颗颗砸入噤声的大海。</span><br><span class="line">不管怎么样，一个原以为坚持不下来的小阶段，还是磕磕绊绊地完成了，我知道了刷题到底是怎么回事。在接下来的“动态规划”和“图”两章中，我要适当放慢自己地脚步，将刷题约束在明确时间范围内，并在十月结束前刷完这本书，结束笔记。剩下的时间追逐梦想吧！！！</span><br></pre></td></tr></table></figure><h2 id="第十四章、动态规划"><a href="#第十四章、动态规划" class="headerlink" title="第十四章、动态规划"></a>第十四章、动态规划</h2><h3 id="088、爬楼梯的最少成本（746、10月31日）"><a href="#088、爬楼梯的最少成本（746、10月31日）" class="headerlink" title="088、爬楼梯的最少成本（746、10月31日）"></a>088、爬楼梯的最少成本（746、10月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>打算用整个十一月把top100和剑指offer2刷完，遂重启该部分，开始学习动态规划。</span><br><span class="line"><span class="number">2.</span>我的想法，递归。我知道爬楼梯的公式是f(x)=f(x-<span class="number">1</span>)+f(x-<span class="number">2</span>)，但显然使用递归是不理智的，因为对于dfs(<span class="number">8</span>)或dfs(<span class="number">9</span>)都要计算dfs(<span class="number">7</span>)及以下，时间开销很大所以没通过。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，动态规划。用迭代实现，规定dp[i]从i位置起步的最小开销，则有dp[<span class="number">0</span>]=cost[<span class="number">0</span>]，dp[<span class="number">1</span>]=cost[<span class="number">1</span>]，从i=<span class="number">2</span>开始计算即可。</span><br></pre></td></tr></table></figure><h3 id="089、房屋偷盗（198、10月31日）"><a href="#089、房屋偷盗（198、10月31日）" class="headerlink" title="089、房屋偷盗（198、10月31日）"></a>089、房屋偷盗（198、10月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，动态规划。感觉自己还是挺聪明的，懂得变化。这道题不能偷盗相邻的房子，和爬楼梯的最少成本很相似，因此，定义dp[i]表示偷盗到第i个房子的积累金额，那么dp[i]的计算由于无后效性，不应该太远：</span><br><span class="line">合法的上一次偷盗是dp[i-<span class="number">2</span>]，但是dp[i-<span class="number">2</span>]不能包括dp[i-<span class="number">3</span>]的情况，故表示该情况为dp[i-<span class="number">1</span>]-nums[i]，故计算公式如下：</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">2</span>],dp[i-<span class="number">1</span>]-nums[i-<span class="number">1</span>])+nums[i];   <span class="comment">//两种情况：不相邻的合法、相邻的合法</span></span><br></pre></td></tr></table></figure><h3 id="090、环形房屋偷盗（213、10月31日）"><a href="#090、环形房屋偷盗（213、10月31日）" class="headerlink" title="090、环形房屋偷盗（213、10月31日）"></a>090、环形房屋偷盗（213、10月31日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。这道题相比第<span class="number">89</span>道题多了一条限制，即路径中不可以同时出现第<span class="number">0</span>号屋子和第(nums.length-<span class="number">1</span>)号屋子。因此，将问题划分为两个子问题，[<span class="number">0</span>,nums.length-<span class="number">2</span>]范围里的最优解和[<span class="number">1</span>,nums.lenght-<span class="number">1</span>]范围里的最优解，只需要将输入数组范围改变即可。</span><br><span class="line">    对于[<span class="number">1</span>,nums.lenght-<span class="number">1</span>]范围，可以初始化dp[<span class="number">0</span>]=<span class="number">0</span>，dp[<span class="number">1</span>]=nums[<span class="number">1</span>]，dp[<span class="number">2</span>]=nums[<span class="number">2</span>]，从i=<span class="number">3</span>开始公式计算；对于[<span class="number">0</span>,nums.length-<span class="number">2</span>]范围照旧即可。最后返回这两个最优解中的最大值。</span><br><span class="line">    此外，需要注意nums.length&lt;=<span class="number">2</span>时的特殊情况。</span><br></pre></td></tr></table></figure><h3 id="091、粉刷房子（256、11月2日）"><a href="#091、粉刷房子（256、11月2日）" class="headerlink" title="091、粉刷房子（256、11月2日）"></a>091、粉刷房子（256、11月2日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。没得想法，看到题解状态转移公式时恍然大悟，一共有三个表达式r(i)、b(i)和g(i)，计算方法一致皆为</span><br><span class="line">    r(i) = min(b(i-<span class="number">1</span>),g(i-<span class="number">1</span>))+cost[i][<span class="number">0</span>]  <span class="comment">//r(i)表示本次选择粉刷红色时，从0到i所有房子的最小成本</span></span><br><span class="line">因此，每栋房子粉刷的颜色受上一幢房子决定，无后效性。</span><br><span class="line">    <span class="keyword">return</span> Math.min(r[n-<span class="number">1</span>],Math.min(b[n-<span class="number">1</span>],g[n-<span class="number">1</span>]));  <span class="comment">//三值比较更为优雅的写法</span></span><br><span class="line">因为转移公式中只涉及dp[i-<span class="number">1</span>]和dp[i]，可以进一步减小空间复杂度：</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">如示例中，b[i-<span class="number">1</span>]表示为dp[(j+<span class="number">1</span>)%<span class="number">3</span>][(i-<span class="number">1</span>)%<span class="number">2</span>]，g[i-<span class="number">1</span>]表示为dp[(j+<span class="number">2</span>)%<span class="number">3</span>][(i-<span class="number">1</span>)%<span class="number">2</span>]。</span><br></pre></td></tr></table></figure><h3 id="092、翻转字符（926、11月3日）"><a href="#092、翻转字符（926、11月3日）" class="headerlink" title="092、翻转字符（926、11月3日）"></a>092、翻转字符（926、11月3日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。显然这道题要分情况讨论，应该有两个状态转移方程。根据题解，设f(i)表示把字符串中从<span class="number">0</span>到i的字符变成符合要求的字符并且最后一个字符是<span class="string">&#x27;0&#x27;</span>所需最少翻转次数；设g[i]表示把字符串从<span class="number">0</span>到i的字符变成符合要求并且最后一个字符时<span class="string">&#x27;1&#x27;</span>所需最少反转次数。</span><br><span class="line">当字符串中下标i的字符是<span class="string">&#x27;0&#x27;</span>时，f(i)=f(i-<span class="number">1</span>)，是<span class="string">&#x27;1&#x27;</span>时则f(i)=f(i-<span class="number">1</span>)+<span class="number">1</span>；</span><br><span class="line">当字符串中下标i的字符是<span class="string">&#x27;0&#x27;</span>时，g(i)=min&#123;f(i-<span class="number">1</span>),g(i-<span class="number">1</span>)&#125;+<span class="number">1</span>，是<span class="string">&#x27;1&#x27;</span>时则g(i)=min(f(i-<span class="number">1</span>),g(i-<span class="number">1</span>))；</span><br><span class="line"><span class="number">2.</span>做这道题时，猜到会和粉刷房子一样，存在两个转移方程。但还是差点感觉，所有转移函数的定义都是包含本索引的，在本索引做了什么事情后，从<span class="number">0</span>到本索引的最小成本。无后效性，本索引i的成本只与(i-<span class="number">1</span>)相关，除非(i-<span class="number">1</span>)不能表达所有情况，才会与(i-<span class="number">2</span>)相关，但是不会太远。</span><br></pre></td></tr></table></figure><h3 id="093、最长斐波那契数列（873、11月3日）"><a href="#093、最长斐波那契数列（873、11月3日）" class="headerlink" title="093、最长斐波那契数列（873、11月3日）"></a>093、最长斐波那契数列（873、11月3日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划+hashMap。这道题很难，状态转移公式为 dp(i,j) = dp(j,k)+<span class="number">1</span>，即假如(k,j,i)组成了斐波那契数列，则其延续的是(?,k,j)数列的长度。转移公式是通过(i,j)两位确定下来，即数列也是通过两位才能确定，单纯的i并不能确定。 </span><br><span class="line">    （关键词， 双层数组 dp(i,j) = dp(j,k)+<span class="number">1</span>）</span><br><span class="line"><span class="number">2.</span>此外，需要注意<span class="keyword">return</span> result&gt;<span class="number">0</span>?result+<span class="number">2</span>:<span class="number">0</span>，即最终数列还包含前<span class="number">2</span>个数字。</span><br></pre></td></tr></table></figure><h3 id="094、最少回文分割（132、11月5日）"><a href="#094、最少回文分割（132、11月5日）" class="headerlink" title="094、最少回文分割（132、11月5日）"></a>094、最少回文分割（132、11月5日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。首先维护二维数组isHuwen[i][j]，表示从i到j的字符串是否为回文。通过Arrays.fill填满<span class="literal">true</span>，然后双层<span class="keyword">for</span>循环，外层i从n-<span class="number">1</span>到<span class="number">0</span>，内层j从<span class="number">0</span>到i+<span class="number">1</span>到n。这两步很有技巧性，也是本题的关键，这里说明：</span><br><span class="line">a.填满True的原因，计算公式为下面式子，如果i=<span class="number">3</span>，j=<span class="number">4</span>，isHuiwen[<span class="number">4</span>][<span class="number">3</span>]没有意义，所以要isHuiwen[<span class="number">4</span>][<span class="number">3</span>]=<span class="literal">true</span>，这样只考虑前面</span><br><span class="line">    isHuiwen[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; isHuiwen[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">b.为什么从末尾开始，是因为计算isHuiwen[i][j]时，isHuiwen[i+<span class="number">1</span>][j-<span class="number">1</span>]已经被上一层外层循环计算了.如果从<span class="number">0</span>开始，要计算isHuiwen[<span class="number">0</span>][<span class="number">3</span>]，此时isHuiwen[<span class="number">1</span>][<span class="number">2</span>]还没被计算。</span><br><span class="line">最后要计算分割次数f，就是从<span class="number">0</span>开始遍历，如果isHuiwen[<span class="number">0</span>][i]为<span class="literal">true</span>则f[i]=<span class="number">0</span>；如果isHuiwen[<span class="number">0</span>][i]为<span class="literal">false</span>，则 <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)，min&#123;f[j&#125;]+<span class="number">1</span>=f[i]；最后返回f[n-<span class="number">1</span>]；</span><br><span class="line">        </span><br><span class="line"><span class="number">2.</span>Arrays.fill(g[i], <span class="literal">true</span>);  <span class="comment">//g是二维数组，则需要for循环索引填充每层一维数组g[i]</span></span><br></pre></td></tr></table></figure><h3 id="095、最长公共子序列（1143、11月9日）"><a href="#095、最长公共子序列（1143、11月9日）" class="headerlink" title="095、最长公共子序列（1143、11月9日）"></a>095、最长公共子序列（1143、11月9日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。确实打不过，没办法实力差距，一直都在想将dp[i][j-&gt;m]和dp[i-&gt;n][j]都设置为dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>，但是逻辑有点乱。这道题关键想法在，dp[i-<span class="number">1</span>][j-<span class="number">1</span>]是第（i开始至末尾）个text1字符和第（j开始至末尾）个text2字符没参与过的，</span><br><span class="line">a.如果第i个text1字符和第j个text2字符相等，则dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>，即使j前的text2字符也可能与（i）相等；</span><br><span class="line">b.如果第i个text1字符和第j个text2字符不等，则dp[i][j] = Math.max(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j])，即可能(i）或(j)造成了相等，并继续维持下去；</span><br><span class="line">这样的好处是a情况，后来又有一个j字符与i相等，并不是从dp[i][(j-<span class="number">1</span>)以前]去计算。</span><br><span class="line"><span class="number">2.</span>本题需要考虑dp[<span class="number">0</span>][<span class="number">0</span>]，所以设置dp大小为dp[n+<span class="number">1</span>][m+<span class="number">1</span>], 注意dp和text1、text2的索引关系即可。</span><br><span class="line"><span class="number">3.</span>做dp的题好有意思唉，各种各样的转移方程都见过了，还是做不出来啊啊。</span><br></pre></td></tr></table></figure><h3 id="096、字符串交织（97、11月9日）"><a href="#096、字符串交织（97、11月9日）" class="headerlink" title="096、字符串交织（97、11月9日）"></a>096、字符串交织（97、11月9日）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。感觉和上一道题很像，但是还是做不出来。根据题解分析下吧。定义dp[i][j]表示s1的前i个字符和s2的前j个字符能否组成s3的前（i+j）个字符。那么dp[i][j]既可能因为第（i-<span class="number">1</span>）个s1字符变为<span class="literal">true</span>，也可能因为第（j-<span class="number">1</span>）个s2字符变为<span class="literal">true</span>，故计算如下：</span><br><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j]&amp;&amp;(s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>));    <span class="comment">//因为第(i-1)个字符</span></span><br><span class="line">dp[i][j] = dp[i][j] || (dp[i][j-<span class="number">1</span>]&amp;&amp;(s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>)));   <span class="comment">//因为第(j-1)个字符</span></span><br><span class="line">此外，需要注意还要计算dp[<span class="number">1</span>][<span class="number">0</span>]、dp[<span class="number">2</span>][<span class="number">0</span>]、dp[<span class="number">0</span>][<span class="number">1</span>]、dp[<span class="number">0</span>][<span class="number">2</span>]等，故不能 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>)。</span><br></pre></td></tr></table></figure><h3 id="总结之动态规划"><a href="#总结之动态规划" class="headerlink" title="总结之动态规划"></a>总结之动态规划</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.爬楼梯问题、房屋偷盗问题的根源公式都是f(x)=f(x-1)+f(x-2)，即x位置的状态计算由它的相邻位置和它的最后不相邻位置决定。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOT 100</title>
      <link href="/2022/11/14/HOT-100/"/>
      <url>/2022/11/14/HOT-100/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode刷题笔记"><a href="#Leetcode刷题笔记" class="headerlink" title="Leetcode刷题笔记"></a>Leetcode刷题笔记</h1><h2 id="1-两数之和（7月31日）"><a href="#1-两数之和（7月31日）" class="headerlink" title="1.两数之和（7月31日）"></a>1.两数之和（7月31日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">int</span>[]型返回值占位 <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="number">2.</span>哈希表实现</span><br><span class="line"><span class="comment">//使用哈希表，可以将寻找 target - x 的时间复杂度降低到从O(N)降低到O(1)。</span></span><br><span class="line">    <span class="comment">//思路：把前面的数字和索引放入hashmap中，遍历到后面的数字时只需对hashmap做一次查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum2(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashmap.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashmap.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashmap.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-两数相加（7月31日）"><a href="#2-两数相加（7月31日）" class="headerlink" title="2.两数相加（7月31日）"></a>2.两数相加（7月31日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>头插法的起始写法（别用“头部循环外处理+l1.next判断”了，是真的逻辑乱）</span><br><span class="line">    ListNode head=<span class="literal">null</span>,tail=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>(l1!=<span class="literal">null</span>||l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">        tail = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>对齐技巧</span><br><span class="line">    <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> l1!=<span class="literal">null</span>?l1.val:<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> l2!=<span class="literal">null</span>?l2.val:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串（7月31日、滑动窗口）"><a href="#3-无重复字符的最长子串（7月31日、滑动窗口）" class="headerlink" title="3.无重复字符的最长子串（7月31日、滑动窗口）"></a>3.无重复字符的最长子串（7月31日、滑动窗口）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 花了很长时间没有做出来，我的想法是，维护两个hashMap，分别存储&lt;字母，该字母后的长度&gt;和&lt;字母，该字母的出现位置&gt;，当某个字母判断为重复后，删除该字母及其出现位置以前所有其他字母的hashMap。这样做，倒在了最后两个测试用例，</span><br><span class="line">    分析发现超时原因主要出现在删除该位置以前所有的haspMap，改进增加限制条件“自上一次删除后”，通过测试，击败<span class="number">9.63</span>%哈哈</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>滑动窗口</span><br><span class="line">    滑动窗口就是一个队列，这个队列维护无重复字符的最长子串，每当遇到重复字符时，我们更新队列左端；</span><br><span class="line">    更新队列左端会遇到两种情况，假设重复字符a已经在hashMap中：</span><br><span class="line">    以baba为例，左端更新到第二个b的位置，字符a的位置小于队列左端，说明第一个字符a出现后，其他字符的重复造成左端更新大于第一个a的位置，此时队列左端就需要保持不动；</span><br><span class="line">    以cabab为例，左端更新到c的位置，字符a的位置大于队列左端，说明从c以来，a的重复出现打破了队列维护的无重复子串，此时队列左端就需要更新到a的位置；</span><br><span class="line">    这两种情况，为了维护队列，更新左端都是考虑重复字符第一次出现位置和旧左端谁更大：</span><br><span class="line">    left = Math.max(left,map.get(s.charAt(i)));</span><br><span class="line"></span><br><span class="line">在队列右端向右探索时，右端接触的字符需要更新位置：map.put(s.charAt(i),i+<span class="number">1</span>)；这里加一是因为左端要从hashMap中取，而本字符造成了重复，它的下一位才是不重复的；</span><br><span class="line">    并计算当前维护无重复子串队列的长度：max = Math.max(max,i-left+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>我的思路为什么慢了？</span><br><span class="line">    向右探索时，我是遍历维护的hashMap，为每个元素维护的子串长度加一，并判断是否大于maxValue；当遇到重复元素时，我需要找到该重复元素旧位置以前的其他元素，因为他们的子串因为包含此元素子串，所以要从hashMap中删除这些其他元素。即向右探索存在两个遍历。</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数（8月1日）"><a href="#4-寻找两个正序数组的中位数（8月1日）" class="headerlink" title="4.寻找两个正序数组的中位数（8月1日）"></a>4.寻找两个正序数组的中位数（8月1日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>本题一遍过了，就是中位数是两个有序数组中的第 (m+n)/<span class="number">2</span> 个元素和第 (m+n)/<span class="number">2</span> 个元素的平均值，故遍历只需进行到两个数组总长度的中间位置。需要注意一个数组先结束的情况，外层套上数组边界判断，这种情况下只探索另一数组。</span><br><span class="line"><span class="number">2.</span><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=(nums1.length+nums2.length)/<span class="number">2</span>;i++)，这样小于等于的话，如果总长度为奇数，中间位置即为最后元素；如果总长度为偶数，中间位置即为最后两个元素取平均；注意先要把<span class="keyword">for</span>循环i最后多加的<span class="number">1</span>去掉。</span><br></pre></td></tr></table></figure><h2 id="5-最长回文子串（8月6日、动态规划）"><a href="#5-最长回文子串（8月6日、动态规划）" class="headerlink" title="5.最长回文子串（8月6日、动态规划）"></a>5.最长回文子串（8月6日、动态规划）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题比较困难，甚至暴力破解都想不出来，看题解第一次接触动态规划。动态规划是一种用空间换时间的做法，即把一些子序列的结果保存起来，长序列利用子序列的结果。本题中假设例子是“babac”，已知子序列“aba”的结果为回文，那只需要考虑两端b≠c，即长序列不是回文。</span><br><span class="line"><span class="number">2.</span>因为是从短序列推导长序列，应该外围遍历是序列长度，计算每个位置开始的固定序列长度的结果，遍历长序列时，只需利用dp[i][j] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>];获得长序列的结果。</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">2</span>;L&lt;=len;L++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="number">3.</span>考虑的特殊情况，a.单字符即为回文；b.双字符没有子序列，直接给出结果；c.在每个双层遍历后判断是否大于maxlen且为回文，并记录该序列的起始位置，用于返回裁剪字符串。</span><br></pre></td></tr></table></figure><h2 id="10-正则表达式匹配（8月6日、动态规划）"><a href="#10-正则表达式匹配（8月6日、动态规划）" class="headerlink" title="10.正则表达式匹配（8月6日、动态规划）"></a>10.正则表达式匹配（8月6日、动态规划）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看晕了，DP太难啦</span><br></pre></td></tr></table></figure><h2 id="11-盛最多水的容器（8月6日、双指针）"><a href="#11-盛最多水的容器（8月6日、双指针）" class="headerlink" title="11.盛最多水的容器（8月6日、双指针）"></a>11.盛最多水的容器（8月6日、双指针）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法是，用冒泡排序的结构遍历一遍所有可能的情况，更新maxValue，但是超出了时间限制。</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="number">2.</span>双指针代表的是，可以作为容器边界的所有位置的范围，开始时，左右指针分别指向左右边界。每次计算容量后，只移动一个指针，且移动高度更低的指针。</span><br><span class="line">这是因为，假设指针距离为t，此时右指针位置桶壁更高，则容量为min(x,y)*t=x*t,</span><br><span class="line">假设向左移动右指针，指针距离t-<span class="number">1</span>，min(x,<span class="keyword">new</span> <span class="title class_">y</span>)&lt;=x,则此时min(x,<span class="keyword">new</span> <span class="title class_">y</span>)*(t-<span class="number">1</span>)&lt;x*t,</span><br><span class="line">说明这种移动没有任何意义，从这种移动出发找不到比当前位置更高的容量，所以移动的条件是移动更低桶壁的指针位置。</span><br><span class="line">结束的条件是，因为是每次只移动一个指针，即两个指针最终不能指向同一位置。<span class="keyword">while</span>(left!=right)</span><br><span class="line"><span class="number">3.</span>双指针算法没超过时间限制的原因是，一直在剔除不可能的情况。时间复杂度为O(N)，只需遍历数组一次。</span><br></pre></td></tr></table></figure><h2 id="15-三数之和（8月7日、排序-双指针）"><a href="#15-三数之和（8月7日、排序-双指针）" class="headerlink" title="15.三数之和（8月7日、排序+双指针）"></a>15.三数之和（8月7日、排序+双指针）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法是三重循环，运行后发现还需要编写去重，那铁定得超时了。查看题解说三重循环+哈希去重是一般想法，肯定会超时，这里哈希去重指的是哪种操作呢？</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：如果数组是有序的，枚举到的三元组(a,b,c)满足a&lt;=b&lt;=c,保证了内容(a,b,c)不会以(b,a,c)、(c、a、b)等其他顺序出现，故数组应该有序。此外，如果满足“对每一重循环而言，相邻两次枚举的元素不能相同”，即每个数字都有代表元，三重循环每一重不会遍历到相同元素，不同层会遍历到同一元素，但序列递增导致序列不同，这样就彻底做到去重。</span><br><span class="line">Arrays.sort(nums); <span class="comment">//无需返回值的数组排序</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">//结果数组的定义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;      <span class="comment">//每层遍历范围的衔接，因为等于i+1，或者后面式子不等于才该遍历</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + <span class="number">1</span>; k &lt; nums.length; k++)&#123; </span><br><span class="line">但是，这种算法还是会导致运行超时，时间复杂度仍然是O(N^<span class="number">3</span>)。</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>思路<span class="number">3</span>：当固定第<span class="number">1</span>重循环元素i后，第<span class="number">2</span>、<span class="number">3</span>重循环就会存在并列关系，和为(<span class="number">0</span>-nums[i])。这样随着第<span class="number">2</span>重循环元素严格递增，势必存在第<span class="number">3</span>重循环元素严格递减，那么就可以用双指针，左指针右移，右指针左移，导致整体需要遍历元素数目减少。</span><br><span class="line">  a.我的实现： <span class="keyword">while</span>(j&lt;k)为外层，当nums[j] + nums[k] &lt; target时将左指针右移，&gt;target时将右指针左移，=target时记录位置并将两个指针同时移动；需要处理的特殊情况是，当同层循环遍历相同元素时应<span class="keyword">continue</span>，故有两个<span class="keyword">continue</span>判断。</span><br><span class="line">  b.Leetcode的实现：<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> first + <span class="number">1</span>; second &lt; n; ++second)为外层，即以second为基准，相比我的优化是，当&gt;target时一直将右指针左移，即能在到一个second时就最大限度降低右指针，到下一个second时third也足够小。</span><br><span class="line">      <span class="keyword">while</span> (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) --third;</span><br><span class="line">            </span><br><span class="line"><span class="number">4.</span>Leetcode定义：这个方法就是我们常说的「双指针」，当我们需要枚举数组中的两个元素时，如果我们发现随着第一个元素的递增，第二个元素是递减的，那么就可以使用双指针的方法，将枚举的时间复杂度从O(N^<span class="number">2</span>)减少至O(N)。本题由于存在第一重循环，双指针复杂度O(N^<span class="number">2</span>)。</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>简述：确定第一重循环后，问题简化为双指针问题，移动指针的策略是：由于右指针左移会减小target，即尽可能左移右指针,求得在当前左指针下等于target的位置；当和&lt;target后，将左指针右移使和增大，在新左指针下再继续移动右指针。故Leetcode的<span class="keyword">for</span>循环实现更清晰些。</span><br></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合（8月7日、回溯）"><a href="#17-电话号码的字母组合（8月7日、回溯）" class="headerlink" title="17.电话号码的字母组合（8月7日、回溯）"></a>17.电话号码的字母组合（8月7日、回溯）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>第一次做本题是抱着学习常用api的目的，比如这里的StringBuffer类，能通过：a.append方法添加<span class="type">char</span>类型元素，b.通过deleteCharAt方法实现根据索引删除元素，c.通过toString方法把结果转化为String类。这就能实现一个类似python中“ <span class="string">&quot;&quot;</span>+a ”这样的效果。</span><br><span class="line"><span class="number">2.</span>因为想不通到底要写多少层<span class="keyword">for</span>循环才行，看了题解。题解用了回溯算法，就是递归。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>：通过StringBuffer类创建一个字符缓冲区，每到一层获取一个元素，继续向更深层递进，直到层数达到数字序列的长度，保存结果后开始返回；返回到每一层，先删除本层缓存的元素，再将本层另一元素放入缓冲区，继续向深层递进，直到每层的循环都结束。因为达到最大长度才需要记录结果，故函数不需要思考返回值。</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点（8月8日、快慢指针）"><a href="#19-删除链表的倒数第-N-个结点（8月8日、快慢指针）" class="headerlink" title="19.删除链表的倒数第 N 个结点（8月8日、快慢指针）"></a>19.删除链表的倒数第 N 个结点（8月8日、快慢指针）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>在对链表进行操作时，一种常用的技巧是添加一个哑节点（dummy node），它的next指针指向链表的头节点。这样一来，我们就不需要对头节点进行特殊的判断了。</span><br><span class="line"><span class="number">2.</span>思路一：先遍历链表获取链表长度，再从头节点开始遍历，遍历到（L-n+<span class="number">1</span>）个节点时，它就是需要删除的节点。以[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">2</span>为例</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;length-n+<span class="number">1</span>;i++)&#123; cur = cur.next;&#125;</span><br><span class="line"><span class="comment">//由于加了dummy节点，先有i再有对应位置node，所以最后到node3结束，i增加为4跳出，恰删除node4</span></span><br><span class="line"><span class="comment">//需要有dummy节点，是假如是以[1],1为例，cur.next会报错，即没有把头节点普通化，放到普通节点的逻辑里。</span></span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>：快慢指针，先不做。</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号（8月8日）"><a href="#20-有效的括号（8月8日）" class="headerlink" title="20.有效的括号（8月8日）"></a>20.有效的括号（8月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题比较简单，就是用栈解决，当(、&#123;、[来时压栈，当)、]、&#125;来时开始判断合法性并弹栈，这个时候栈为空或者栈顶不是对应括号即为非法。此外，通过字符串长度是否为偶数，也能先判断合法性。</span><br><span class="line"><span class="number">2.</span>常用建栈api的掌握：</span><br><span class="line">Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();   <span class="comment">//此时可用stack.peek()，.push(cur)、.pop()等栈方法</span></span><br><span class="line"><span class="number">2.</span>在这里记录史凯超的一个问题：<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();这种为什么要这样写？</span><br><span class="line">  这是对依赖倒置原则：</span><br><span class="line">    a.这样当某位置需要存储list时，它可以设置为接受List从而既存储ArrayList，有存储LinkedList；</span><br><span class="line">    b.list只能使用ArrayList中已经实现了的List接口中的方法，而没有在List接口中定义的方法不能被访问到。</span><br></pre></td></tr></table></figure><h2 id="21-合并两个有序链表-8月8日"><a href="#21-合并两个有序链表-8月8日" class="headerlink" title="21.合并两个有序链表(8月8日)"></a>21.合并两个有序链表(8月8日)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题比较简单，虽然第一次写，先判断是否为空，又判断大小，代码重复性很大，没有注意可以直接用原链的节点。但是，还使用到了前面学习的dummy节点技巧，这是因为假如<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>在<span class="number">4</span>语句后，就会使得链尾添加一个新节点，此时已跳出循环，结果为[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>],考虑去除<span class="number">0</span>的逻辑很麻烦；改进应该是先添加节点，再填充新节点数据，但这样第一个节点直接用了list3tail.next就没被处理，所以应该设一个head的前驱节点dummy，返回dummy.next，这样就能把head节点和后续位置节点一样处理。</span><br><span class="line">    ListNode list3dummy=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">list3tail</span> <span class="operator">=</span> list3dummy;</span><br><span class="line"><span class="keyword">while</span>(tail1!=<span class="literal">null</span>||tail2!=<span class="literal">null</span>)&#123;</span><br><span class="line">    。。。</span><br><span class="line">     <span class="keyword">if</span>(tail1.val&gt;=tail2.val)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();  <span class="comment">//1</span></span><br><span class="line">            list3tail.next = node;           <span class="comment">//2</span></span><br><span class="line">            list3tail = node;                <span class="comment">//3</span></span><br><span class="line">            list3tail.val=tail2.val;         <span class="comment">//4</span></span><br><span class="line">            tail2 = tail2.next;        </span><br><span class="line">   &#125;</span><br><span class="line">        。。。</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">return</span> list3dummy.next;</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>：递归法，先不做</span><br></pre></td></tr></table></figure><h2 id="22-括号生成（8月11日）"><a href="#22-括号生成（8月11日）" class="headerlink" title="22.括号生成（8月11日）"></a>22.括号生成（8月11日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法是按照<span class="number">20</span>题“有效的括号”那样做，并加上回溯的结构，即新输入满足一定要求后才能回溯。但可能花了<span class="number">2</span>小时写了一泡狗屎，不知道为啥理不清栈在回溯中的表现，明明应该出栈的括号却能剩下来，stack.size()变成了当前字符中左括号的数目，太烧脑了，调试傻了，再做也是浪费时间。TMD,真是超级无比垃圾狗蛋题。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>：暴力破解。就是先通过递归生成指定长度的括号，再判断括号字符串是否有效。这里判断括号是否有效的思路比<span class="number">20</span>题简单，因为只判断圆括号<span class="string">&#x27;()&#x27;</span>,只需维护一个循环外<span class="type">int</span>变量balance，当<span class="string">&#x27;(&#x27;</span>来时balance加<span class="number">1</span>，当<span class="string">&#x27;)&#x27;</span>来时balance减<span class="number">1</span>，每轮循环balance小于<span class="number">0</span>说明括号无效，数组遍历完balance为<span class="number">0</span>也说明括号无效，否则有效。这里收获了<span class="type">char</span>[]和String互相转换的API:</span><br><span class="line">String -&gt; <span class="type">char</span>[] : <span class="type">char</span>[] charArray = s.toCharArray();</span><br><span class="line"><span class="type">char</span>[] -&gt; String : <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(charArray);</span><br><span class="line">StringBuffer -&gt; String : result.toString()   result为StringBuffer类</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>：回溯法。这种方法比较难想，因为只有圆括号<span class="string">&#x27;()&#x27;</span>,添加右括号只需注意，不要在当下超过左括号数目，添加左括号只需不大于n即可。在这种情况下，逻辑变成了，当满足数目条件时才添加括号、递归并回溯，StringBuffer满足长度要求时放入结果。不是最后做判断。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;String&gt; ans,StringBuffer cur,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> max)</span>;</span><br></pre></td></tr></table></figure><h2 id="23-合并K个升序链表（8月12日）"><a href="#23-合并K个升序链表（8月12日）" class="headerlink" title="23.合并K个升序链表（8月12日）"></a>23.合并K个升序链表（8月12日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法是，以最左边的数组为curValue，并考虑到链表遍历为空的情况下向右更新curValue。<span class="keyword">for</span>向右遍历数组时，通过<span class="keyword">while</span>遍历数组元素，小于curValue的将被添加到链表，维护两个指针，一个指向链表尾部，一个指向上一次更新curValue的位置，这样就能在curValue左右添加链表节点。当然这个思路最后乱掉了，因为不知道如何描述listFinal的前一个节点。</span><br><span class="line"><span class="number">2.</span>我最初的想法是，维护一个和链表长度相同的数组，记录每个输入链表数组的头指针位置，在每轮中取头指针数组中最小的链表节点，并更新该链表的头指针，直到所有头指针都指向<span class="literal">null</span>。这种想法的问题是如何求最小，最简单的思路是利用具有排序功能的集合，在更新节点放入集合时就排号序，这样就能更容易地实现。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>：使用优先队列。用优先队列实现上一想法，定义Status类实现comparable接口，其中compareTo实现如下：</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Status status2)</span> &#123;<span class="keyword">return</span> <span class="built_in">this</span>.val - status2.val;&#125;</span><br><span class="line">将每个链表数组的头指针按<span class="keyword">new</span> <span class="title class_">Status</span>(node.val, node)放入优先队列，queue.poll()后会弹出最小元素，这样将该最小的头指针后移继续放入queue.offer(<span class="keyword">new</span> <span class="title class_">Status</span>(f.ptr.next.val, f.ptr.next))，最后直到优先队列为空。</span><br></pre></td></tr></table></figure><h2 id="94、二叉树中序遍历（10月6日）"><a href="#94、二叉树中序遍历（10月6日）" class="headerlink" title="94、二叉树中序遍历（10月6日）"></a>94、二叉树中序遍历（10月6日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，栈实现二叉树中序遍历。这是经典代码，带没想到这么快就忘了呜呜呜</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            cur = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="101、对称二叉树（10月6日）"><a href="#101、对称二叉树（10月6日）" class="headerlink" title="101、对称二叉树（10月6日）"></a>101、对称二叉树（10月6日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，递归。判断二叉树是否对称需要看<span class="number">3</span>点：</span><br><span class="line">a.左树根节点的值 == 右树根节点的值；</span><br><span class="line">b.左树的左子树 和 右树的右子树 对称；</span><br><span class="line">c.左树的右子树 和 右数的左子树 对称；</span><br><span class="line">其中，b和c两点就是递归点，设计比较左子树和右子树的递归函数即可，此外再考虑特殊情况。</span><br></pre></td></tr></table></figure><h2 id="102、二叉树的层序遍历（10月6日）"><a href="#102、二叉树的层序遍历（10月6日）" class="headerlink" title="102、二叉树的层序遍历（10月6日）"></a>102、二叉树的层序遍历（10月6日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，我的想法，队列实现二叉树广度优先遍历。这是经典代码，记住要维护每层的长度len即可</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">while</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.pop();</span><br><span class="line">                result.add(node.val);</span><br><span class="line">                len -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            results.add(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="104、二叉树的最大深度（10月6日）"><a href="#104、二叉树的最大深度（10月6日）" class="headerlink" title="104、二叉树的最大深度（10月6日）"></a>104、二叉树的最大深度（10月6日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，递归。递归函数设计如下，每个节点和根节点一样，都向左子树和右子树深度优先遍历，并记录当前深度，当遇到左子树或右子树为空时，通过Math.max更新当前最大深度。</span><br><span class="line">     dfs(TreeNode root,<span class="type">int</span>[] maxDeep,<span class="type">int</span> deep)</span><br></pre></td></tr></table></figure><h2 id="105、从前序与中序遍历序列构造二叉树（10月7日）"><a href="#105、从前序与中序遍历序列构造二叉树（10月7日）" class="headerlink" title="105、从前序与中序遍历序列构造二叉树（10月7日）"></a>105、从前序与中序遍历序列构造二叉树（10月7日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，递归。这道题想起来是很困难的，核心点是，因为题目说明元素不相同，前序遍历首先会访问根节点，再到中序遍历中寻找根节点，则中序遍历根节点左侧为左子树，中序遍历根节点右侧为右子树。如</span><br><span class="line">    前序遍历：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]    中序遍历：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>] -&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="number">0</span> [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    也可以看到：左子树长度等于 <span class="number">3</span>-<span class="number">0</span>=<span class="number">3</span>，这时候前序遍历左子树索引范围[<span class="number">0</span>+<span class="number">1</span>,<span class="number">0</span>+<span class="number">3</span>]，右子树索引范围为[<span class="number">0</span>+<span class="number">3</span>+<span class="number">1</span>,<span class="number">5</span>]；</span><br><span class="line">    <span class="comment">//表示从ininorder_start开始，不包含inorder_index的串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">preorder_len</span> <span class="operator">=</span> inorder_index - inorder_start;</span><br><span class="line">    <span class="comment">//后面4个int变量，分别是前序、后续遍历的索引起始范围，都是可以渠道的</span></span><br><span class="line">    root.left = dfs(preorder,hashMap,preorder_start+<span class="number">1</span>,preorder_start+preorder_len,inorder_start,inorder_index-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">因为preorder_len是根据中序遍历计算的，不懂，下次再做吧</span><br></pre></td></tr></table></figure><h2 id="121、买卖股票的最佳时机（10月6日）"><a href="#121、买卖股票的最佳时机（10月6日）" class="headerlink" title="121、买卖股票的最佳时机（10月6日）"></a>121、买卖股票的最佳时机（10月6日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，左指针。双层<span class="keyword">for</span>循环会超过时间限制，因此维护一个指向当前最小元素的指针。从左到右遍历时，如果当前元素小于左指针指向的元素，就更新左指针；如果当前元素大于左指针指向的元素，就通过Math.max更新最大利润。</span><br></pre></td></tr></table></figure><h2 id="136、只出现一次的数字（10月7日）"><a href="#136、只出现一次的数字（10月7日）" class="headerlink" title="136、只出现一次的数字（10月7日）"></a>136、只出现一次的数字（10月7日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，HashSet。从左到右遍历数组，如果当前数组元素不在hashSet中，将数组元素放入hashSet；存在则移除该数组元素，最终hashSet仅存的元素就是该数字。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，按位异或。因为其他数字都出现两次，^为异或，a^a=<span class="number">0</span>，<span class="number">0</span>^a=a，</span><br><span class="line">    且异或满足交换律和结合律：a^b^c=(a^b)^c=a^(b^c)=(a^c)^b</span><br><span class="line">    设result初值为<span class="number">0</span>，故从左到右遍历，通过result ^= num更新result，结果只剩唯一值。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，按位累加运算。维护一个大小为<span class="number">32</span>的数组bitNums，表示一个整数的每一位，通过bitNums[i] += (num&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>;累加得到所有数字的和，再通过<span class="keyword">for</span>(<span class="number">32</span>)中的result = (result&lt;&lt;<span class="number">1</span>)+bitNums[i]%<span class="number">2</span>;得到那唯一的数字；</span><br><span class="line">    bitNums[i] += (num&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>;    <span class="comment">//仅保留最后一位，因为1的前面位置全为0</span></span><br><span class="line"> result = (result&lt;&lt;<span class="number">1</span>)+bitNums[i]%<span class="number">2</span>;    <span class="comment">//不断左移，在末尾加上低位</span></span><br><span class="line"><span class="number">2.</span>HashSet遍历的两种方式：</span><br><span class="line">    a.迭代器</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();  </span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;  </span><br><span class="line">        System.out.println(iterator.next());              </span><br><span class="line">    &#125;</span><br><span class="line">b.直接遍历</span><br><span class="line">    <span class="keyword">for</span> (String s:set) &#123;  </span><br><span class="line"> System.out.println(s);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="34、在排序数组中查找元素的第一个和最后一个位置（10月8日）"><a href="#34、在排序数组中查找元素的第一个和最后一个位置（10月8日）" class="headerlink" title="34、在排序数组中查找元素的第一个和最后一个位置（10月8日）"></a>34、在排序数组中查找元素的第一个和最后一个位置（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>师爷，翻译翻译，什么叫TMD、TMD非递减？</span><br><span class="line">  好嘞，意思是关键字递增序排列，但是并非单调递增（因为有重复的关键字）从小到大或者允许中间有相等的情形。</span><br><span class="line"><span class="number">2.</span>我的想法，二分查找。由于是递增但是非单调的序列，故能使用二分查找。首先用二分查找确定nums中等于target的一个数的位置，再以该数为起点，确定相同值的最小索引和最大索引。本题从二分查找出发很好想，下面是二分查找经典代码（left、right指针）：</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">targetIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right = mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            targetIndex = mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="49、字母异位词分组（10月8日）"><a href="#49、字母异位词分组（10月8日）" class="headerlink" title="49、字母异位词分组（10月8日）"></a>49、字母异位词分组（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashMap。这道题以前做过，又忘了。核心是维护一个HashMap&lt;String,List&lt;String&gt;&gt;，key为Arrays.sort(strArray)排序好的字符串，这样“tea”、“ate”、“eat”的key都为“aet”，就能放到value的列表中储存。</span><br></pre></td></tr></table></figure><h2 id="53、最大子数组和（10月8日）"><a href="#53、最大子数组和（10月8日）" class="headerlink" title="53、最大子数组和（10月8日）"></a>53、最大子数组和（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>子序列可以不连续，连续必然是子序列。</span><br><span class="line"><span class="number">2.</span>我的想法，滑动窗口。使用双层<span class="keyword">for</span>循环，外层确定窗口大小len，内层从左到右遍历，并通过Math.max更新窗口的最大sum。但是，这会导致O(n^<span class="number">2</span>)的复杂度，在最后的测试用例上出现超时。</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，动态规划。动态规划的关键在于：如何定义状态？（如何定义子问题？）</span><br><span class="line">题解中的思路转变是这样，子问题这样定义：[-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    经过-<span class="number">2</span>的连续子数组的最大和是多少？</span><br><span class="line">    经过<span class="number">1</span>的连续子数组的最大和是多少？  ...</span><br><span class="line">但是这样定义，子问题之间很难看出联系，这说明子问题的描述不够准确，转换为：</span><br><span class="line">    以-<span class="number">2</span>结尾的连续子数组的最大和是多少？</span><br><span class="line">    以<span class="number">1</span>结尾的连续子数组的最大和是多少？  ...</span><br><span class="line">这时候子问题就产生了联系，状态转移方程如下：</span><br><span class="line">当dp[i-<span class="number">1</span>]&lt;<span class="number">0</span>时，dp[i]=nums[i];</span><br><span class="line">当dp[i-<span class="number">1</span>]&gt;<span class="number">0</span>时，dp[i] = dp[i-<span class="number">1</span>]+nums[i];</span><br><span class="line">从左到右求解状态转移方程，并找出dp[i]中的最大值，即可解本题。</span><br><span class="line"><span class="number">3.</span>第一次正面认识动态规划，记录两点收获：</span><br><span class="line">    a.动态规划中状态的定义和题目中问题的定义并不相等，求解完状态再分析才能解出题目；</span><br><span class="line">    b.动态规划中子问题（状态）的定义需要有无后效性，后面求解的子问题不再影响前面解出的结果；</span><br></pre></td></tr></table></figure><h2 id="124、二叉树的最大路径和（10月8日）"><a href="#124、二叉树的最大路径和（10月8日）" class="headerlink" title="124、二叉树的最大路径和（10月8日）"></a>124、二叉树的最大路径和（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，深度优先搜索。这道题以前做得很痛苦，这次看到了关键的提示root.val+max(left,right)，还是比较轻松做出来了。对于每个节点，它负责的是：</span><br><span class="line">a.在该节点更新最大值maxValue，考虑：root.val，root.val+left，root.val+right，root.val+left+right四种情况，为了使代码更加优雅，可以用<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Math.max(<span class="number">0</span>,dfs(root.left,maxSumLeft));</span><br><span class="line">b。向上层返回root.val+max(left,right)；</span><br></pre></td></tr></table></figure><h2 id="300、最长上升子序列（10月8日）"><a href="#300、最长上升子序列（10月8日）" class="headerlink" title="300、最长上升子序列（10月8日）"></a>300、最长上升子序列（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。感觉这种子数组、子序列问题，就要将子问题设置为：</span><br><span class="line"><span class="comment">//状态：以i结尾的最长递增子序列</span></span><br><span class="line">用双层<span class="keyword">for</span>循环做，外层确定当前状态，内层确定[<span class="number">0</span>,当前状态-<span class="number">1</span>]对当前状态的影响，状态转移方程为：</span><br><span class="line">     dp[i] = max(dp[<span class="number">0</span>],dp[<span class="number">1</span>],...,dp[i-<span class="number">1</span>])+<span class="number">1</span>;  <span class="comment">//其中，max中的dp[j]需满足nums[当前]&gt;nums[j]</span></span><br><span class="line">找到最大的dp即为题解。</span><br></pre></td></tr></table></figure><h2 id="347、前K个高频元素（10月8日）"><a href="#347、前K个高频元素（10月8日）" class="headerlink" title="347、前K个高频元素（10月8日）"></a>347、前K个高频元素（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>PriorityQueue默认是最小堆，即Comparator为(e1,e2)-&gt;&#123;e1-e2&#125;，元素按照升序排列；</span><br><span class="line">    如果要降序排列，则比较器的顺序为(e1,e2)-&gt;&#123;e2-e1&#125;，降序排列队列头部为最大值。</span><br><span class="line"><span class="number">2.</span>我的想法，hashMap+PriorityQueue。维护一个hashMap&lt;数字，次数&gt;，将hashMap的键值对放入PriorityQueue根据值维护的最小堆，注意最小堆大小超过k时，要先放入新键值，再剔除堆顶。</span><br><span class="line">    PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;(e1.getValue()-e2.getValue()));</span><br></pre></td></tr></table></figure><h2 id="32、最长有效括号（10月8日）"><a href="#32、最长有效括号（10月8日）" class="headerlink" title="32、最长有效括号（10月8日）"></a>32、最长有效括号（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，动态规划。设置子问题为，以当前字符结尾的有小括号子串长度。</span><br><span class="line">当前字符为<span class="string">&#x27;(&#x27;</span>时，dp[i]=<span class="number">0</span>；</span><br><span class="line">当前字符为<span class="string">&#x27;)&#x27;</span>时，</span><br><span class="line">    a.如果前一字符为<span class="string">&#x27;(&#x27;</span>则将dp[i]初值设为<span class="number">2</span>，并循环累加<span class="number">2</span>个字符前有效<span class="string">&#x27;)&#x27;</span>的dp；</span><br><span class="line">    b.如果前一字符为<span class="string">&#x27;)&#x27;</span>，则dp[i] = dp[i-<span class="number">1</span>]+<span class="number">2</span>；如果(i-<span class="number">1</span>)的串再加补全<span class="string">&#x27;(&#x27;</span>前还是有效<span class="string">&#x27;)&#x27;</span>,则：</span><br><span class="line">    dp[i] = dp[i-<span class="number">1</span>]+<span class="number">2</span>+dp[i-<span class="number">2</span>-dp[i-<span class="number">1</span>]];</span><br><span class="line">    但是，没有考虑完整情况。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，动态规划。本以为又会耗费很多时间，一看题解发现和我考虑的情况一致，就是我外加了上述的循环累加，修改为<span class="keyword">if</span>即通过。</span><br><span class="line">    Q：为什么循环累加不行？</span><br><span class="line">    A：上面b情况，考虑的是<span class="string">&quot;...))&quot;</span>，靠前面的<span class="string">&#x27;(&#x27;</span>补全当前<span class="string">&#x27;)&#x27;</span>后，如果此前还位有效<span class="string">&#x27;)&#x27;</span>，则应该再加上其dp；</span><br><span class="line">       上面a情况，考虑的是<span class="string">&quot;...()&quot;</span>，写<span class="keyword">while</span>循环考虑的是<span class="string">&quot;...)()&quot;</span>，其中前面的<span class="string">&#x27;)&#x27;</span>有效，应该不断向前循环累加有效<span class="string">&#x27;)&#x27;</span>的dp，但这是不对的，不必要再循环，更前面的有效<span class="string">&#x27;)&#x27;</span>已经在先遇到的<span class="string">&#x27;)&#x27;</span>dp所包含。</span><br><span class="line">    总而言之，非常非常接近答案，但是长时间的思考愈发理不清前面的状态，甚至可以向，dp中本来就不应该有<span class="keyword">while</span>。</span><br><span class="line">    简介，前面为(，再考虑一层；前面为)，再考虑两层。</span><br></pre></td></tr></table></figure><h2 id="206、反转链表（10月8日）"><a href="#206、反转链表（10月8日）" class="headerlink" title="206、反转链表（10月8日）"></a>206、反转链表（10月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，迭代法三指针。反转链表迭代法，就是要维护pre，cur和after三枚指针，最开始将cur指向head.next，pre指向head，pre.next指向<span class="literal">null</span>，通过以下方式更新链表：</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">after</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = after;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">这种方式的坏处是，如果head指向<span class="literal">null</span>，就需要额外的判断，所以初值设置应该为：</span><br><span class="line">    cur指向head，pre指向<span class="literal">null</span>。</span><br></pre></td></tr></table></figure><h2 id="114、二叉树展开为链表（10月9日）"><a href="#114、二叉树展开为链表（10月9日）" class="headerlink" title="114、二叉树展开为链表（10月9日）"></a>114、二叉树展开为链表（10月9日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>经典的栈实现二叉树前序遍历</span><br><span class="line">    Deque&lt;TreeNode&gt; stack= <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;TreeNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//访问cur.val</span></span><br><span class="line">            list.add(cur);</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.pop();</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>我的想法，二叉树前序遍历。经典的二叉树前序遍历代码，不断遍历left指针，遇到<span class="literal">null</span>时弹栈，获取最近的right指针，再进行相同操作。没啥可说的，list中是前序遍历结果，通过perv、curr指针从<span class="number">1</span>遍历完即可。不用考虑末尾的双<span class="literal">null</span>，因为在原链表该节点也是双<span class="literal">null</span>。这样空间复杂度是O(n)，不是O(<span class="number">1</span>)。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">3</span>，空间复杂度为O(<span class="number">1</span>)的方法。涉及到指针这种引用类型，很多转引用、存储后的操作是不能保护值的，这在做这些题的时候要注意。题解的思想很简单，就是通过cur的left指针不为空时，就尽可能沿着right方向遍历cur.left节点，并将cur.right接在cur.left.right的最底层。因为对左子树来说，也是最右边的节点被最后访问，把root节点的右子树接在左子树最右边的底层是合理的。</span><br></pre></td></tr></table></figure><h2 id="31、下一个排列（10月10日）"><a href="#31、下一个排列（10月10日）" class="headerlink" title="31、下一个排列（10月10日）"></a>31、下一个排列（10月10日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，两次遍历。寻找下一个排列，本质是从后向前扫描时，要找到顺序对满足a[i]&lt;a[i+<span class="number">1</span>]，这时候从[i+<span class="number">1</span>,len-<span class="number">1</span>]范围内从后向前找到a[j]满足a[j]&gt;a[i]，因为此时[i+<span class="number">1</span>,len-<span class="number">1</span>]都不存在顺序对，故a[j]恰比a[i]大。替换a[i]和a[j]后，将[i+<span class="number">1</span>,len-<span class="number">1</span>]按顺序排列。</span><br><span class="line">    如“<span class="number">652341</span>”，第一个顺序对是“<span class="number">34</span>”，a[i]=<span class="number">3</span>，a[j]=<span class="number">4</span>，此时下一个排列是“<span class="number">652413</span>”，前面的<span class="number">2</span>不会替换<span class="number">3</span>，因为高位压阵，恰下一个；</span><br><span class="line">    如“<span class="number">652431</span>”，第一个顺序对是“<span class="number">24</span>”，a[i]=<span class="number">2</span>，a[j]=<span class="number">3</span>，此时下一个排列是“<span class="number">653124</span>”；</span><br><span class="line">    （没啥好说的，记住从后往前找顺序对，替换后在排列即可。）</span><br><span class="line"><span class="number">2.</span>实现过程，由于i+<span class="number">1</span>往后都是倒序排列，要实现顺序排列只需依次交换两端元素:</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        swap(nums,left,right);</span><br><span class="line">        left++;right--;</span><br><span class="line">    &#125;</span><br><span class="line">另外如果输入为“<span class="number">654321</span>”这种极端情况，第一次遍历结束必然i为-<span class="number">1</span>，判断此情况后，直接reverse(nums,i+<span class="number">1</span>);并返回即可。</span><br></pre></td></tr></table></figure><h2 id="33、搜索旋转排序数组（10月10日）"><a href="#33、搜索旋转排序数组（10月10日）" class="headerlink" title="33、搜索旋转排序数组（10月10日）"></a>33、搜索旋转排序数组（10月10日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，本来以为题意是，寻找旋转前数组中目标值的索引，先遍历找到旋转点i后，然后根据nums[<span class="number">0</span>]、nums[i]和target的大小关系，再到两段顺序序列中找到目标值索引，并根据长度恢复出旋转前索引。后来，发现题解好像就是找旋转后的索引，那一轮<span class="keyword">for</span>就搞定。但是，这时候复杂度为O(n)，不满足题意。</span><br><span class="line"><span class="number">2.</span>我的想法，二分查找。根据target和nums[<span class="number">0</span>]的关系，可以知道target出现在前一段序列or后一段序列。</span><br><span class="line">    如果出现在前一段序列，二分查找时mid&gt;=nums[<span class="number">0</span>]，说明mid也落入前一段，这时候可以按一般二分查找移动指针，否则只移动right指针到mid-<span class="number">1</span>；</span><br><span class="line">    如果出现在后一段序列，二分查找时mid&lt;nums[<span class="number">0</span>]（注意不带等于），说明mid也落入后一段，这时候可以按一般二分查找移动指针，否则只移动left指针到mid+<span class="number">1</span>；</span><br><span class="line">    （关键词，根据target和nums[<span class="number">0</span>]的关系进入不同的二分查找策略）</span><br></pre></td></tr></table></figure><h2 id="39、组合总和（10月10日）"><a href="#39、组合总和（10月10日）" class="headerlink" title="39、组合总和（10月10日）"></a>39、组合总和（10月10日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯。定义dfs函数如下，当sum等于目标值target时，将<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(result)添加到results中。但是，这样做得问题是会产生重复，如[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]，[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]，并且想不到去重策略。</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target,<span class="type">int</span> deep,<span class="type">int</span> sum,List&lt;Integer&gt; result,List&lt;List&lt;Integer&gt;&gt; results)</span></span><br><span class="line"><span class="number">2.</span>没必要记录深度，可以在返回时用combine.remove(combine.size() - <span class="number">1</span>)清除效果。</span><br><span class="line"><span class="number">3.</span>重复的原因在，没有按照一个方向选取元素，如[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>]，假设取完元素<span class="number">2</span>后再取元素<span class="number">3</span>，则不能折回来再取元素<span class="number">2</span>，这时候就要记录遍历的index，遇到每个元素应该选择本元素（index不增）或者跳过（index+<span class="number">1</span>）。这时多一种最终判断，就是：</span><br><span class="line">    <span class="keyword">if</span>(index==candidates.length) <span class="keyword">return</span>; <span class="comment">//否则会栈溢出</span></span><br><span class="line">(关键词，按顺序加索引，不加深度)</span><br></pre></td></tr></table></figure><h2 id="40、接雨水（10月11日）"><a href="#40、接雨水（10月11日）" class="headerlink" title="40、接雨水（10月11日）"></a>40、接雨水（10月11日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，来自评论区的总结，找左右两边最大值中的小者，减去本身高度。这时候在[<span class="number">1</span>,heigh.length-<span class="number">1</span>]范围内从左到右遍历，遍历到heigh[j]时，寻找它左侧、右侧最大值maxLeft、maxRight，如果都小于等于它本身则result+<span class="number">0</span>，否则result+min&#123;maxLeft,maxRight&#125;-heigh[j]。时间复杂度O(n^<span class="number">2</span>)。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，动态规划。上一种解法中，时间复杂度为O(n^<span class="number">2</span>)的原因，在于需要搜索heigh[j]左右两侧的最大值，如果已知两边最值，时间复杂度就能降到O(n)。可以维护两个数组leftMax[]、rightMax[]记录每个j两侧最值，先通过从前向后、从后向前扫描初始化这两个数组。再从左向右遍历累加结果。</span><br><span class="line"><span class="number">3.</span>思路<span class="number">3</span>，双指针。进一步观察发现，并不需要明确知道最大值，维护两个指针left、right，left从<span class="number">0</span>开始向右移动，right从height.length - <span class="number">1</span>开始向左移动，只要：</span><br><span class="line">    a.height[left]&lt;height[right]，则必有 leftMax&lt;rightMax，此时移动left指针</span><br><span class="line">    b.height[left]≥height[right]，则必有 leftMax≥rightMax，此时移动right指针</span><br><span class="line">    这样每次只移动更小处的指针。</span><br></pre></td></tr></table></figure><h2 id="84、柱状图中的最大矩形（10月11日）"><a href="#84、柱状图中的最大矩形（10月11日）" class="headerlink" title="84、柱状图中的最大矩形（10月11日）"></a>84、柱状图中的最大矩形（10月11日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>来自评论区的总结，题解讲得有点复杂，不利于理解。。。说白了，这题考的基础模型其实就是：在一维数组中对每一个数找到第一个比自己小的元素。这类“在一维数组中找第一个满足某种条件的数”的场景就是典型的单调栈应用场景。</span><br><span class="line"><span class="number">2.</span>第一次遇见单调栈，思路原理是，如果新元素小于栈顶元素，就一直弹栈，直到新元素大于栈顶元素：</span><br><span class="line">此时，栈顶元素是新元素左边，比新元素小的第一个元素；</span><br><span class="line">每次弹栈时，新元素是栈顶元素右边，比栈顶元素小的第一个元素；</span><br><span class="line">这样经过一次遍历，就能找到数组中每个元素左右两边第一个比它小的元素，当然还是更关注左边。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>思路<span class="number">1</span>，单调栈。目标是计算每个高度限制的最大矩形面积，从左到右遍历高度：</span><br><span class="line"><span class="number">1.</span>假如新元素大于栈顶元素，则直接压栈，不是该高度的出场日；</span><br><span class="line"><span class="number">2.</span>假如新元素小于栈顶元素，就将栈顶元素出栈，对于这个出栈的元素A而言，</span><br><span class="line">a.新元素是A右边，比A小的第一个元素；</span><br><span class="line">b.新的栈顶元素，是A左边比A小的第一个元素；</span><br><span class="line">这样就得到了当前出栈高度左右两边的界限，从而可知当前出栈高度为上限的最大矩形面积。</span><br><span class="line">(简言之，所有面积都是出栈时候求的，因为只有出栈的元素，才会有左边界和右边界)</span><br><span class="line"><span class="number">4.</span>这道题解法的巧妙之处在于创建新数组new_heights，在原始数组左右两端各补一个<span class="number">0</span>。</span><br><span class="line"> <span class="type">int</span>[] new_heights = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; heights.length + <span class="number">1</span>; i++) &#123;</span><br><span class="line">     new_heights[i] = heights[i - <span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">这样做的好处是，能够省去很麻烦的边界判断：</span><br><span class="line">a.在前端补<span class="number">0</span>，使得第<span class="number">0</span>个元素有了左边界；</span><br><span class="line">b.在后端补<span class="number">0</span>，能避免由于输入数组是单调增，导致一直在压栈，只有出栈时有边界才会计算面积。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>本题是困难题，第一次接触单调栈，简直疯狂掉头发，希望能记住吧，弹栈有边界才更新面积。。。</span><br></pre></td></tr></table></figure><h2 id="70、爬楼梯（10月11日）"><a href="#70、爬楼梯（10月11日）" class="headerlink" title="70、爬楼梯（10月11日）"></a>70、爬楼梯（10月11日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>本题只需记住f(x)=f(x−<span class="number">1</span>)+f(x−<span class="number">2</span>)，因为对于这一阶台阶来说，可能是跨越一步上来的，也可能是跨越两步过来的：</span><br><span class="line">跨越一步上来时，f(x)和f(x-<span class="number">1</span>)的次数相同；跨越两步上来时，f(x)和f(x-<span class="number">2</span>)的次数相同，因此f(x)=f(x−<span class="number">1</span>)+f(x−<span class="number">2</span>)；</span><br><span class="line"><span class="number">2.</span>没啥说的，baby请你记住f(x)=f(x−<span class="number">1</span>)+f(x−<span class="number">2</span>)这个公式。爬楼梯啊爬楼梯~~~</span><br></pre></td></tr></table></figure><h2 id="46、全排列（10月17日）"><a href="#46、全排列（10月17日）" class="headerlink" title="46、全排列（10月17日）"></a>46、全排列（10月17日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题前面做过，一周没有刷题了手很生，看了题目只知道用回溯。实则全排列问题一定涉及交换，需要写swap辅助函数，此时本题就变简单了，只需维护index到达数组长度时放入结果，不到数组长度时index和后面每一个位置交换。</span><br></pre></td></tr></table></figure><h2 id="56、合并区间（10月17日）"><a href="#56、合并区间（10月17日）" class="headerlink" title="56、合并区间（10月17日）"></a>56、合并区间（10月17日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题前面也做过，甚至今天就用它优化了实验方案，但是又忘了该咋排序。解题逻辑是，双<span class="keyword">while</span>循环，每轮外围<span class="keyword">while</span>循环维护一个<span class="type">int</span>[] tmpResult，将其赋值为start区间，当下一区间和tmp区间产生交互时，将tmp区间右端更新为两者右端的最大值，并继续向右递进<span class="keyword">while</span>循环，直到不产生交互，将tmp区间放入结果，并从当前区间开展新一轮外层<span class="keyword">while</span>。</span><br><span class="line">    Arrays.sort(intervals,(<span class="type">int</span>[] e1,<span class="type">int</span>[] e2)-&gt;e1[<span class="number">0</span>]-e2[<span class="number">0</span>]); <span class="comment">//这里需要注明类型</span></span><br></pre></td></tr></table></figure><h2 id="55、跳跃游戏（10月18日）"><a href="#55、跳跃游戏（10月18日）" class="headerlink" title="55、跳跃游戏（10月18日）"></a>55、跳跃游戏（10月18日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，贪心算法。贪心算法(又称贪婪算法)是指,在对问题求解时,总是做出在当前看来是最好的选择。这道题需要理解题意，对于序列[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]而言，第<span class="number">0</span>个位置跨度为<span class="number">3</span>，能到第<span class="number">3</span>个位置，不会更远。因此从左到右遍历，每次更新能到达的最远位置，如果最远位置大于（nums.length - <span class="number">1</span>）,则为True；遍历到末尾，则为<span class="literal">false</span>。注意只有遍历i&lt;=maxValue时，才去更新maxValue。</span><br></pre></td></tr></table></figure><h2 id="78、子集（10月18日）"><a href="#78、子集（10月18日）" class="headerlink" title="78、子集（10月18日）"></a>78、子集（10月18日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，回溯。这道题可能做过，做出来还是比较容易。思路就是，维护一个表示深度的变量index，当index没到达nums.length时，可以选择result不添加index位置的元素进行回溯，或者添加index位置的元素进行回溯，回溯结束后从result删除该元素。</span><br></pre></td></tr></table></figure><h2 id="96、不同的二叉搜索树（10月18日）"><a href="#96、不同的二叉搜索树（10月18日）" class="headerlink" title="96、不同的二叉搜索树（10月18日）"></a>96、不同的二叉搜索树（10月18日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。这道题没啥说的，确实没思路。没写</span><br></pre></td></tr></table></figure><h2 id="98、验证二叉搜索树（10月18日）"><a href="#98、验证二叉搜索树（10月18日）" class="headerlink" title="98、验证二叉搜索树（10月18日）"></a>98、验证二叉搜索树（10月18日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题更新了我对二叉搜索树的认识，它不是单纯的根节点大于左子节点，小于右子节点，而且根节点要大于左子树的所有节点，小于右子树的所有节点。这样，中序遍历二叉搜索树时，一定得到单调升的结果。比如[<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line"><span class="number">5</span> - (<span class="number">4</span> <span class="number">6</span>)- ((<span class="literal">null</span> <span class="literal">null</span>) (<span class="number">3</span> <span class="number">7</span>))  <span class="comment">//其中右子树的节点3小于根节点5，所以不是二叉搜索树</span></span><br><span class="line">很自然想到，对于压栈的每个节点，要判断是否左节点小于它，再走到左节点；对于弹栈的每个节点，要判断是否右节点大于它，再走到右节点；此外，还要考虑到根节点<span class="number">5</span>大于很久以后的右节点<span class="number">3</span>这种情况，就很复杂。</span><br><span class="line">    当知道二叉树的中序遍历是单调升后，就可以省去以上判断，维护一个pre节点记录上次遍历到的有值节点，然后只判断是否单调升。</span><br><span class="line"> 此外，由于存在特殊测试用例，需要<span class="type">double</span> <span class="variable">preValue</span> <span class="operator">=</span> -Double.MAX_VALUE。</span><br></pre></td></tr></table></figure><h2 id="141、环形链表（10月18日）"><a href="#141、环形链表（10月18日）" class="headerlink" title="141、环形链表（10月18日）"></a>141、环形链表（10月18日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，快慢指针。这道题以前做过，稍微有点忘了，解法有两种：哈希表、快慢指针。用快慢指针做时，<span class="keyword">while</span>(slow!=fast)内部只需要在fast==<span class="literal">null</span>||fast.next==<span class="literal">null</span>为<span class="literal">true</span>时返回<span class="literal">false</span>，这样能保证fast.next.next能被访问到，那slow指针更能被访问到。</span><br></pre></td></tr></table></figure><h2 id="139、单词拆分（10月20日）"><a href="#139、单词拆分（10月20日）" class="headerlink" title="139、单词拆分（10月20日）"></a>139、单词拆分（10月20日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>最近做题陷入了怪圈，必须瞟眼答案关键字，有概率恍然大悟，然后遇到复杂的边界条件，总是差些火候写对，最终还是得看完整答案修修补补。比如这道题，我有经验设置<span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()+<span class="number">1</span>]; ，因为我知道<span class="number">0</span>位置不好对付就整体右移，但这时候边界条件又把我整怕了唉~</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，动态规划。设置子问题dp[i]表示前i个字符是否在wordDict中，从左到右遍历i，再从左到i遍历j，如果dp[j]为真且剩下到i的单词在wordDict中，则dp[i]为<span class="literal">true</span>。</span><br></pre></td></tr></table></figure><h2 id="142、环形链表Ⅱ（10月20日）"><a href="#142、环形链表Ⅱ（10月20日）" class="headerlink" title="142、环形链表Ⅱ（10月20日）"></a>142、环形链表Ⅱ（10月20日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashSet。从头开始遍历链表，将链表节点放入hashSet，如果hashSet中已经包含该节点，说明该节点是环的起始节点。</span><br><span class="line"><span class="number">2.</span>我的想法，快慢指针。快指针和慢指针相遇时，设从头到环入口的距离为a，环的周长为b，相遇位置与环入口距离为c，则快指针走过的路径长度为a+Xb+c，慢指针走过的路径长度为a+Yb+c，快慢指针的路径长度差值为b的整数倍。</span><br><span class="line">a+Xb+c = <span class="number">2</span>*(a+Yb+c)  =&gt;  a+c = (X-2Y)*b   <span class="comment">//环外的长度a + 未走满的部分b = 环周长的整数倍</span></span><br><span class="line">  求到这个有点闷，毕竟不知道确切多少倍，就无法得到周长。实际上，如果此时还有一个慢指针从起始点出发，他走距离a到达环入口，同时本慢指针从该点继续移动，也走距离a就能到达环入口，故这两个慢指针相遇点为环入口。</span><br><span class="line">    注意，写代码时外围 <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)，而不是<span class="keyword">while</span>(slow!=fast)，后者初始化时给slow、fast都赋值head不好做判断，且初始化为head.next、head.next.next会陷入无穷循环。</span><br></pre></td></tr></table></figure><h2 id="234、回文链表（10月20日）"><a href="#234、回文链表（10月20日）" class="headerlink" title="234、回文链表（10月20日）"></a>234、回文链表（10月20日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，快慢指针。先快慢指针找到链表中间，再将后半部分链表反转，再将前半部分和反转后的后半部分进行比较。</span><br><span class="line">    注意，快慢指针找链表中间需要dummy节点，这样能保证不管链表是单数还是双数，下一节点都是后半部分的起始节点。</span><br></pre></td></tr></table></figure><h2 id="283、移动零（10月21日）"><a href="#283、移动零（10月21日）" class="headerlink" title="283、移动零（10月21日）"></a>283、移动零（10月21日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，双指针。再次败北，麻了不说了。思路很简单，就是left指针指向已经处理好的序列，即最后一个非零树，右边指针一直向右遍历，如果该位置非零，则交换left、right指针指向的元素。</span><br></pre></td></tr></table></figure><h2 id="148、排序链表（10月21日）"><a href="#148、排序链表（10月21日）" class="headerlink" title="148、排序链表（10月21日）"></a>148、排序链表（10月21日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，优先队列。将链表节点放入最小堆priorityQueue，依次出堆后形成新链表。</span><br><span class="line"> PriorityQueue&lt;ListNode&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;(e1.val-e2.val));</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，归并排序。首先记住归并排序不是二分查找，是从左到右均分为长度<span class="number">2</span>的小段，排序后合并为长度<span class="number">4</span>的小段，重复此操作。本题的归并实现，是先用快慢指针找到链表中点，将前后两段排序后，再通过依次比较两个链表节点大小从而连接起来。</span><br><span class="line">    注意,这里递归是直接调用原函数sortList，需要在原函数判断<span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"><span class="comment">//没啥可说的，第二次用这个思路做，算是重写的时候快了点吧。</span></span><br></pre></td></tr></table></figure><h2 id="160、相交链表（10月21日）"><a href="#160、相交链表（10月21日）" class="headerlink" title="160、相交链表（10月21日）"></a>160、相交链表（10月21日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashSet。将链表headA的所有节点放入hashSet，遍历headB的节点，如果某节点在hashSet中已经存在，就返回该节点；如果循环结束，就返回<span class="literal">null</span>；</span><br><span class="line"><span class="number">2.</span>思路<span class="number">2</span>，双指针。设链表headA非公共部分为a，链表headB非公共部分为b，链表公共部分为c，如果两个速度为<span class="number">1</span>的指针分别从headA、headB出发，则有：</span><br><span class="line">    a+c+b == b+c+a  <span class="comment">//即只有某指针走到末尾就切换赛道，必然会在下次c的起始节点相遇</span></span><br><span class="line">如果headA和headB不相交</span><br><span class="line">    a+<span class="number">0</span>+b = b+<span class="number">0</span>+a  <span class="comment">//即必然会在null相遇</span></span><br><span class="line"><span class="number">3.</span>这道题思路很多，归根结底是想解决掉链表headA和headB间的长度差值。</span><br></pre></td></tr></table></figure><h2 id="146、LRU缓存（10月22日）"><a href="#146、LRU缓存（10月22日）" class="headerlink" title="146、LRU缓存（10月22日）"></a>146、LRU缓存（10月22日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的思路，双项链表+hashMap。这道题需要维护双向链表节点head和tail，在初始化时连接两个节点如下。接下来不管put还是get操作，不能移动head和tail节点。</span><br><span class="line">    比如添加新节点到链表头部时，将新节点置为head，这是不对的，这会导致原始head节点（值为<span class="number">0</span>）被移动到链表中央。</span><br><span class="line">head.next = tail;</span><br><span class="line">tail.prev = head;</span><br><span class="line">当get或put操作一个已经存在的键时，需要从head.next开始遍历，直到tail结束寻找val为该键的链表节点，代码如下，这也是上面不能移动head和tail节点的原因：</span><br><span class="line">    <span class="type">DoubleNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(temp!=tail)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.val==key)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">此外，注意删除双向链表节点时指针和真实引用的区别即可。</span><br><span class="line">第二次做这道题，一直没敢做，以为还是做不出来，没想到调试着思路还挺流畅，再接再厉！！</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，双向链表+hashMap。官方题解中，hashMap定义如下：</span><br><span class="line">    Map&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, DLinkedNode&gt;();</span><br><span class="line">双向链表中存储<span class="type">int</span> key，<span class="type">int</span> value，很容易理解，能够通过键直接确定节点位置，从而省去<span class="keyword">while</span>循环。</span><br></pre></td></tr></table></figure><h2 id="169、多数元素（10月23日）"><a href="#169、多数元素（10月23日）" class="headerlink" title="169、多数元素（10月23日）"></a>169、多数元素（10月23日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashMap。维护一个hashMap记录每个数字的出现次数，最后遍历hashMap返回出现次数超过n/<span class="number">2</span>的数字。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，排序。由于只有一个多数元素，且出现次数超过n/<span class="number">2</span>，所以排序好后数组中间位置元素一定是该元素。</span><br><span class="line"><span class="number">3.</span>写了下冒泡排序，第二行<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length-<span class="number">1</span>-i;j++)，但显然这种数据不适合冒泡，比Arrays.sort(nums);慢太多。</span><br></pre></td></tr></table></figure><h2 id="287、寻找重复数（10月23日）"><a href="#287、寻找重复数（10月23日）" class="headerlink" title="287、寻找重复数（10月23日）"></a>287、寻找重复数（10月23日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，hashSet。维护一个hashSet存储已经访问过的数字，如果某数字再次出现，则hashSet中存在，返回该数字。</span><br><span class="line"><span class="comment">//这道题有二分查找、快慢指针等方法，且题目要求了O(1)的时间复杂度没办法，就这样吧思路有点特殊，不想深入。</span></span><br></pre></td></tr></table></figure><h2 id="208、实现前缀树（10月24日）"><a href="#208、实现前缀树（10月24日）" class="headerlink" title="208、实现前缀树（10月24日）"></a>208、实现前缀树（10月24日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，前缀树。这是第二次做这道题，本来以为TrieNode中维护“children = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];”，但如何指向下一节点却犯了难，实则TrieNode定义代码如下，在children节点中的isWord字段记录其是否为单词，其他操作顺水推舟：</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TrieNode[] children;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isWord;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>前缀树主要用来实现字符串查找，解题的步骤有两步，第一步是创建前缀树，第二步是在前缀树中查找。这种题，需要熟悉TrieNode的定义、创建前缀树经典代码这两步惯性操作。</span><br></pre></td></tr></table></figure><h2 id="215、数组中第K个最大元素（10月24日）"><a href="#215、数组中第K个最大元素（10月24日）" class="headerlink" title="215、数组中第K个最大元素（10月24日）"></a>215、数组中第K个最大元素（10月24日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，最小堆。看到题目中第K个最大元素，就知道反过来要用最小堆，当堆大小超过K时，从堆顶弹出元素，直到所有元素经过堆处理，此时堆顶元素恰好为第K个最大元素。</span><br><span class="line">PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((e1,e2)-&gt;e1-e2);</span><br><span class="line"><span class="number">2.</span>我的想法，快速排序。手写快速排序是一个基本题目，需要注意以下函数配合：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end&gt;start)&#123;</span><br><span class="line">            <span class="comment">//调用getRandom，在mid两侧递归</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(end-start+<span class="number">1</span>)+start;</span><br><span class="line">       <span class="comment">//修改nums内容，将范围内的数组，根据比randomNum的大小放在其左右两边</span></span><br><span class="line">       <span class="comment">//方法是维护small指针，指向最后一个比randomNum小的元素，因此从start-1开始</span></span><br><span class="line">   这道题还是看了以前的笔记，因为快排还是容易忘，特点就是在随机数两边分治递归。幸运的是看着笔记还是一下做出来了，本题的方法是快速排序+二分查找。只是二分查找位置不再是<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">        而是<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> getRandom(nums,left,right);</span><br></pre></td></tr></table></figure><h2 id="560、和为K的子数组（10月24日）"><a href="#560、和为K的子数组（10月24日）" class="headerlink" title="560、和为K的子数组（10月24日）"></a>560、和为K的子数组（10月24日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>做了半小时滑动窗口，以为胜利在望，发现数据里有负数，歪江难受得雅痞。</span><br><span class="line"><span class="number">2.</span>我的想法，暴力破解。两层<span class="keyword">for</span>循环击败<span class="number">5</span>%：</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;nums.length;j++)&#123;</span><br><span class="line"><span class="number">3.</span>思路<span class="number">2</span>，前缀和+哈希表优化。上面的方法时间复杂度是O(n^<span class="number">2</span>)，但我们其实不需要通过遍历求每个数组的和，而是能通过前缀和计算出任意数组的和，假设pre[i]表示[<span class="number">0</span>,i]中所有数字的和，pre[j]表示[<span class="number">0</span>,j]中所有数字的和(i&lt;j)，那么</span><br><span class="line">    数组[i+<span class="number">1</span>,j] = pre[j] - pre[i];       <span class="comment">//pre[j] - pre[i] = k</span></span><br><span class="line">    这时候只要把前缀和都放到hashMap，每获得一个新pre，从hashMap中查找(pre-k)的键值。</span><br><span class="line">    注意，最开始时要“ hashMap.put(<span class="number">0</span>,<span class="number">1</span>); ”，因为<span class="number">0</span>位置以前的前缀和为<span class="number">0</span>也算一种情况，即该子数组从<span class="number">0</span>开始。</span><br><span class="line"><span class="number">4.</span>今天这几道题写得都挺好的，主要是以前的一些经典代码，不过还是需要提示关键逻辑才能再写出来。</span><br></pre></td></tr></table></figure><h2 id="394、字符串解码（10月25日）"><a href="#394、字符串解码（10月25日）" class="headerlink" title="394、字符串解码（10月25日）"></a>394、字符串解码（10月25日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，递归。这道题主要考察字符串相关api，以及递归的逻辑。我将dfs函数设计如下：</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[] charArray,<span class="type">int</span> start,StringBuilder builder)</span></span><br><span class="line">对于一段序列：</span><br><span class="line">a.如果是小写字母，直接加入builder；</span><br><span class="line">b.如果是数字，将其后的几个数字一起加入builder2，并将builder2转换为数字；dfs(charArray,i+<span class="number">1</span>,builder1);递归处理<span class="string">&#x27;[&#x27;</span>后面的字符串，并将builder1扩展n倍后加入本轮的builder，将i设置为dfs返回值，即递归<span class="string">&#x27;]&#x27;</span>的索引；</span><br><span class="line">    c.如果是<span class="string">&#x27;]&#x27;</span>，则<span class="keyword">return</span> i，说明本轮递归调用结束。</span><br><span class="line">这样的处理方法，是因为递归的dfs会返回<span class="string">&#x27;]&#x27;</span>的索引，从该索引位置继续遍历，直到遇到本轮的<span class="string">&#x27;]&#x27;</span>。</span><br><span class="line"><span class="number">2.</span>官方题解的简写代码（处理字符串中的连续整数）：</span><br><span class="line">    <span class="comment">//每个dfs维护一个整数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">multi</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//当遇到整数时，就构造完整的整数</span></span><br><span class="line"><span class="keyword">if</span>(s.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) </span><br><span class="line">multi = multi * <span class="number">10</span> + Integer.parseInt(String.valueOf(s.charAt(i))); </span><br><span class="line"><span class="comment">//当递归的dfs返回，扩展递归的返回字符串时，就将该整数减回0，从而不用专门为整数构造builder2</span></span><br><span class="line"><span class="keyword">while</span>(multi &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res.append(result1);</span><br><span class="line">            multi--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>字符串处理api记录复制：</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(builder2.toString());  <span class="comment">//String转int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(String.valueOf(charArray[i]));  <span class="comment">//char转int</span></span><br><span class="line">Character.isDigit(charArray[i]) <span class="comment">//判断char是否为数字</span></span><br><span class="line">Character.isLowerCase(charArray[i])<span class="comment">//判断char是否为小写字母</span></span><br></pre></td></tr></table></figure><h2 id="448、找到所有数组中消失的数字（10月25日）"><a href="#448、找到所有数组中消失的数字（10月25日）" class="headerlink" title="448、找到所有数组中消失的数字（10月25日）"></a>448、找到所有数组中消失的数字（10月25日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，HashSet。将nums中所有数字放入hashSet，再在“ <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length+<span class="number">1</span>;i++) ”范围里遍历，如果i不在hashSet中，就将i加入结果。</span><br><span class="line"><span class="number">2.</span>官方题解，原地修改。HashSet的存在是为了记录nums中的数字，由于nums的长度也为n，恰好能记录[<span class="number">1</span>,n]个数字，遍历数组时将遍历到的索引位置加n，则没遍历到的索引位置势必小于n，再次遍历找到该位置即可。时间复杂度 O(<span class="number">2</span>*n)=O(n)。</span><br><span class="line">    nums[(nums[i]-<span class="number">1</span>)%n] += n;   <span class="comment">//就是处理第一轮索引的情况，10%10-1=-1，但是(10-1)%10=9</span></span><br></pre></td></tr></table></figure><h2 id="155、最小栈（10月26日）"><a href="#155、最小栈（10月26日）" class="headerlink" title="155、最小栈（10月26日）"></a>155、最小栈（10月26日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，双栈。这道题思路很简单，我们最开始的想法是用一个minValue变量存储最小值，每当元素压栈时，就尝试更新最小值，但我们之所以不敢这么做，是因为如果弹栈元素恰好为最小值，那下一个最小值该是谁呢？优化这个思路的方法就是双栈，维护一个最小值栈，原始栈中的每个栈顶与最小值栈中的栈顶一一对应，原始栈弹栈同时也将最小值栈弹栈。</span><br><span class="line">（关键词，双栈对应）</span><br></pre></td></tr></table></figure><h2 id="234、回文链表（10月26日）"><a href="#234、回文链表（10月26日）" class="headerlink" title="234、回文链表（10月26日）"></a>234、回文链表（10月26日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，快慢指针+反转链表。今天要做研究，就挑个软柿子捏一捏。没啥说的，快慢指针时注意初值fast=slow=dummy，反转链表时注意维护prev、cur和temp三枚指针。</span><br></pre></td></tr></table></figure><h2 id="461、汉明距离（10月26日）"><a href="#461、汉明距离（10月26日）" class="headerlink" title="461、汉明距离（10月26日）"></a>461、汉明距离（10月26日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，按位运算。突然想到下面的方法，即比较x和y的每一位，相等时将最终结果result加一。</span><br><span class="line">    (num&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>;   <span class="comment">//获取32位int型数字的每一位</span></span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，异或。x和y异或（x^y）后，获取结果的每一位并累加到result。</span><br></pre></td></tr></table></figure><h2 id="128、最长连续序列（10月27日）"><a href="#128、最长连续序列（10月27日）" class="headerlink" title="128、最长连续序列（10月27日）"></a>128、最长连续序列（10月27日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，排序。将数组nums排好序后，从左到右遍历，维护一个变量prev指向前一个访问的数字，如果本数字恰为前一个数字加一，则更新累积长度tmpValue；<span class="keyword">else</span> <span class="keyword">if</span>本数字不等于前一数字，更新最大累积长度，并将tmpValue恢复为初值<span class="number">1</span>。结束循环后还需要再更新一次最大累积长度，否则会漏掉最后的tmpValue。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，HashSet。<span class="keyword">for</span>(<span class="type">int</span> num:nums)遍历数组，将数字放入hashSet；再<span class="keyword">for</span>(<span class="type">int</span> num:nums)遍历数字，如果hashSet中不包含num-<span class="number">1</span>，说明是一个新序列，将prev初值设置为num，满足<span class="keyword">while</span>(hashSet.contains(prev+<span class="number">1</span>))的情况下，不断更新该序列长度。</span><br></pre></td></tr></table></figure><h2 id="226、反转二叉树（11月2日）"><a href="#226、反转二叉树（11月2日）" class="headerlink" title="226、反转二叉树（11月2日）"></a>226、反转二叉树（11月2日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，层序遍历二叉树。观察题意，其实操作并不复杂，就是交换每个节点的左、右子节点。经典的层序遍历二叉树，是通过维护队列和每层长度count实现的，这道题不需要分层，就按层序遍历时把节点可劲儿往队列里丢，弹出时再交换其左右子节点即可。只是指针变化。</span><br></pre></td></tr></table></figure><h2 id="338、比特位计数（11月5日）"><a href="#338、比特位计数（11月5日）" class="headerlink" title="338、比特位计数（11月5日）"></a>338、比特位计数（11月5日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，按位与。从<span class="number">0</span>到n遍历数字i，由于i为<span class="type">int</span>型，通过下面方法计数i中<span class="number">1</span>的个数，并将本轮结果放入results[i]。</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">32</span>;j++)result += (i&gt;&gt;j)&amp;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="10、正则表达式匹配（11月7日）"><a href="#10、正则表达式匹配（11月7日）" class="headerlink" title="10、正则表达式匹配（11月7日）"></a>10、正则表达式匹配（11月7日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>这道题太难了，看了很多遍题解都无法想通，就这样吧。</span><br></pre></td></tr></table></figure><h2 id="53、把二叉树搜索树转换为累加树（11月7日）"><a href="#53、把二叉树搜索树转换为累加树（11月7日）" class="headerlink" title="53、把二叉树搜索树转换为累加树（11月7日）"></a>53、把二叉树搜索树转换为累加树（11月7日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，栈实现后序遍历二叉树。完了我TM傻掉了，啊啊啊啊，后序遍历指的是中间节点最后访问，这个应该是反序中序遍历，怪不得重新看栈实现后序遍历这么迷。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，递归实现反序中序遍历二叉树。先converBST(root.right)，返回后根据本节点值更新sum，再更新本节点值，最后converBST(root.right)即可。</span><br></pre></td></tr></table></figure><h2 id="543、二叉树的直径（11月7日）"><a href="#543、二叉树的直径（11月7日）" class="headerlink" title="543、二叉树的直径（11月7日）"></a>543、二叉树的直径（11月7日）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.我的想法，深度优先搜索。这道题比较经典，就是dfs左、右叶子节点，通过Math.max(result[0],left+right)判断经过本根节点的路径，向上返回Math.max(left,right)+1即选左边或者右边。</span><br><span class="line">2.我这里遇到root==null时，会返回当前累计长度len-1，这导致需要一个记录深度的变量deep，本位置的更新转化为Math.max(results[0],(left-deep)+(right-deep));，有点复杂了，实际只需要root==null时返回0，不用记录len和deep。</span><br></pre></td></tr></table></figure><h2 id="236、二叉树的最近公共祖先（11月8日）"><a href="#236、二叉树的最近公共祖先（11月8日）" class="headerlink" title="236、二叉树的最近公共祖先（11月8日）"></a>236、二叉树的最近公共祖先（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，HashMap+HashSet+dfs。首先通过dfs遍历二叉树，按&lt;本节点，本节点的父节点&gt;形式放入hashMap，这样就获知了每个节点的父节点信息。从p开始向上遍历至root节点，将路径中遇到的节点都存入hashSet，然后从q开始向上遍历至root节点，观察路径中的节点是否出现在hashSet，若出现则为最近的公共祖先。（关键词，&lt;本节点，本节点的父节点&gt;）</span><br></pre></td></tr></table></figure><h2 id="617、合并二叉树（11月8日）"><a href="#617、合并二叉树（11月8日）" class="headerlink" title="617、合并二叉树（11月8日）"></a>617、合并二叉树（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，广度优先遍历二叉树。这道题和经典广度优先有所差别，也让我有所顾忌。先维护三个队列，分别用于新Tree、root1和root2的广度优先遍历。</span><br><span class="line">    a.以某位置左子节点为例，只有left1和left2都不为<span class="literal">null</span>时，才将其放入各自队列，否则只是连接不为<span class="literal">null</span>的子节点到新Tree，并不放入队列。因为目标是将节点放到新Tree，此时已经把该左子树全都放到新Tree，没有必要继续遍历。</span><br><span class="line">    b.外层循环为 <span class="keyword">while</span>(!tree1.isEmpty()&amp;&amp;!tree2.isEmpty())是和不是或，其实无所谓，上一步已经保证了tree1和tree2在每一时刻都是同步的，相同大小。</span><br><span class="line"><span class="number">2.</span>思路<span class="number">1</span>，递归实现深度优先遍历。递归实现还是比较简单的，直接在mergeTrees递归。首先，root1.val = root1.val+root2.val;，然后分别对二者左、右子树进行mergeTrees，将返回值分别连接到root1的left指针和right指针，最后返回root1即可。</span><br></pre></td></tr></table></figure><h2 id="198、打家劫舍（11月8日）"><a href="#198、打家劫舍（11月8日）" class="headerlink" title="198、打家劫舍（11月8日）"></a>198、打家劫舍（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，动态规划。这道题几天前做过，dp[i]表示偷窃第i号房间的最大收益，dp[i]的计算要考虑合法位置，合法位置包括dp[i-<span class="number">2</span>]和dp[i-<span class="number">3</span>]这两种，其中dp[i-<span class="number">3</span>]可以用dp[i-<span class="number">1</span>]-nums[i-<span class="number">1</span>]表示。最后<span class="keyword">return</span> Math.max(dp[n-<span class="number">2</span>],dp[n-<span class="number">1</span>])即可。</span><br></pre></td></tr></table></figure><h2 id="238、除自身以外数组的乘积（11月8日）"><a href="#238、除自身以外数组的乘积（11月8日）" class="headerlink" title="238、除自身以外数组的乘积（11月8日）"></a>238、除自身以外数组的乘积（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，分治法。最简单的想法是双层<span class="keyword">for</span>循环，但是会超越时间限制，然后就只能想到除再没有办法了。题解的思路为，任意位置result[i]=它左边的所有数乘积*它右边的所有数乘积，故通过<span class="keyword">for</span>+<span class="keyword">for</span>维护leftNums、rightNums数组，leftNums[i]表示i以左所有数字的乘积，rightNums[i]表示i以右所有数字的乘积，result[i]=leftNums[i]*rightNums[i]。</span><br></pre></td></tr></table></figure><h2 id="739、每日温度（11月8日）"><a href="#739、每日温度（11月8日）" class="headerlink" title="739、每日温度（11月8日）"></a>739、每日温度（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，单调栈。最简单的想法还是双层<span class="keyword">for</span>循环，但是会超越时间限制。这是一道单调栈的模板题，我用以下思路实现单调栈，突然发现题解也是这样写得，芜湖起飞：</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;   <span class="comment">//如果新元素比栈顶大，就循环弹栈</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (temperatures[i]&gt;temperatures[index])&#123;</span><br><span class="line">                result[index] = i-index;    <span class="comment">//业务逻辑</span></span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);   <span class="comment">//遇到新元素不论如何都要压栈</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>再记录一下什么时候想到用单调栈：</span><br><span class="line">    通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了。</span><br></pre></td></tr></table></figure><h2 id="438、找到字符串中所有字母异位词（11月8日）"><a href="#438、找到字符串中所有字母异位词（11月8日）" class="headerlink" title="438、找到字符串中所有字母异位词（11月8日）"></a>438、找到字符串中所有字母异位词（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>我的想法，滑动窗口。可能很长时间没做滑动窗口了，竟然第一时间没做出来。顾虑主要是如何对比hashMap或者<span class="type">int</span>[]，这里是直接Arrays.equals(countS,countP)比较，那就没啥说的了，就是先在countS和countP中分别放pLen个s和p中的数字，做第一次比较后，再开始通过<span class="keyword">for</span>(<span class="type">int</span> i=pLen;i&lt;sLen;i++)进行滑动窗口逻辑。</span><br><span class="line"><span class="number">2.</span>比较两个<span class="type">int</span>[]数组是否相等，使用Arrays.equals(countS,countP)；那比较两个hashMap数据是否相等该用啥呢？</span><br></pre></td></tr></table></figure><h2 id="337、打家劫舍Ⅲ（11月8日）"><a href="#337、打家劫舍Ⅲ（11月8日）" class="headerlink" title="337、打家劫舍Ⅲ（11月8日）"></a>337、打家劫舍Ⅲ（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，后序dfs+动态规划。每次做到“打家劫舍”系列就顿时感觉到思路巧妙，</span><br><span class="line">  a.“打家劫舍Ⅰ”需要考虑两种合法位置，dp[i] = Math.max(dp[i-<span class="number">1</span>]-nums[i-<span class="number">1</span>],dp[i-<span class="number">2</span>])+nums[i];</span><br><span class="line">  b.“打家劫舍Ⅱ”是环形房屋，需要额外考虑[<span class="number">0</span>,nums.length-<span class="number">2</span>]范围里的最优解和[<span class="number">1</span>,nums.lenght-<span class="number">1</span>]范围里的最优解两种情况；</span><br><span class="line">  c.“打家劫舍Ⅲ”是二叉树房屋，则和“offertwo92翻转字符”类似要分情况讨论，有两个状态转移方程，列一下注释即明白：</span><br><span class="line">Map&lt;TreeNode,Integer&gt; f = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  <span class="comment">//选取当前节点后的最大收益</span></span><br><span class="line">Map&lt;TreeNode,Integer&gt; g = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  <span class="comment">//放弃当前节点后的最大收益</span></span><br><span class="line"><span class="comment">//如果选择偷盗当前root位置，则收益为放弃其左右子节点的收益之和</span></span><br><span class="line">f.put(root,g.getOrDefault(root.left,<span class="number">0</span>)+g.getOrDefault(root.right,<span class="number">0</span>)+root.val);</span><br><span class="line">    <span class="comment">//如果选择放弃root位置，对于子节点既可以选取，又可以放弃，则收益组成，Math.max(选取左，放弃左)+Math.max(选取右，放弃右)</span></span><br><span class="line">g.put(root,Math.max(f.getOrDefault(root.left,<span class="number">0</span>),g.getOrDefault(root.left,<span class="number">0</span>))</span><br><span class="line">                +Math.max(f.getOrDefault(root.right,<span class="number">0</span>),g.getOrDefault(root.right,<span class="number">0</span>)));</span><br><span class="line"><span class="number">2.</span>本题遍历二叉树时，采用递归dfs实现，需要后序遍历，因为计算根节点收益时，需要知道左子节点和右子节点的收益情况。</span><br></pre></td></tr></table></figure><h2 id="309、最佳买卖股票时机含冷冻期（11月8日）"><a href="#309、最佳买卖股票时机含冷冻期（11月8日）" class="headerlink" title="309、最佳买卖股票时机含冷冻期（11月8日）"></a>309、最佳买卖股票时机含冷冻期（11月8日）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>思路<span class="number">1</span>，动态规划。这是一种新的动态规划题型，转移方程表示最大收益，包括状态和行动分情况讨论，将转移方程列为下式：</span><br><span class="line">    （<span class="number">1</span>）.f[i][<span class="number">0</span>]  <span class="comment">//状态：我们在第i天拥有一支股票  行动：这只股票可以是第i天买入，也可以不是第i天买入</span></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = -prices[i]</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="number">0</span>: f[i][<span class="number">0</span>] = Math.max(f[i-<span class="number">1</span>][<span class="number">2</span>]-prices[i]，f[i-<span class="number">1</span>][<span class="number">0</span>])   <span class="comment">//前者是第i-1天买入，后者是第i-1天已经持有</span></span><br><span class="line">    （<span class="number">2</span>）.f[i][<span class="number">1</span>]  <span class="comment">//状态：我们在第i天不拥有一张股票  行动：我们在第i天卖掉股票（造成不拥有），造成第i+1天的冷冻期</span></span><br><span class="line">f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i!=<span class="number">0</span>: f[i][<span class="number">1</span>] = f[i-<span class="number">1</span>][<span class="number">0</span>]+prices[i]    <span class="comment">//上一状态只能是第i-1天拥有股票</span></span><br><span class="line">（<span class="number">3</span>）.f[i][<span class="number">2</span>]  <span class="comment">//状态：我们在第i天不拥有一张股票  行动：它是（i-1）或以前卖掉的，所以第（i+1）天不存在冷冻期</span></span><br><span class="line">         f[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">         <span class="keyword">if</span> i!=<span class="number">0</span>: f[i][<span class="number">2</span>] = Math.max(f[i-<span class="number">1</span>][<span class="number">1</span>],f[i-<span class="number">1</span>][<span class="number">2</span>])  <span class="comment">//上一状态是i-1天卖掉造成不拥有，或者更为长期的不拥有</span></span><br><span class="line">  通过上面这些式子，我们可以看到收益的传播，上一状态是非冷冻期不持有的最大收益，则会传播到下一状态购入股票的最大收益。最终返回Math.max(f[n-<span class="number">1</span>][<span class="number">1</span>],f[n-<span class="number">1</span>][<span class="number">2</span>])即可，即股票已经被卖掉了。</span><br><span class="line"><span class="number">2.</span>这道题又和分情况讨论不同，它定义转移方程时，需要从状态和行动考虑，会出现同一状态选择不同的行动。下次再做时估计还是难以想到，不过还是在分析中感受到动态规划的魅力。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
