<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OWASPtop10学习笔记</title>
      <link href="/2022/06/21/OWASPtop10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/21/OWASPtop10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h3 id="SpEL标准解析"><a href="#SpEL标准解析" class="headerlink" title="SpEL标准解析"></a>SpEL标准解析</h3><p>1.标准直接传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(filterName);</span><br><span class="line"><span class="type">String</span> <span class="variable">filter</span> <span class="operator">=</span> (String)exp.getValue();</span><br></pre></td></tr></table></figure><p>2.redirect客户端重定向传参<br>解释：通过GET请求将SpEL表达式传递给客户端，以便在thymeleaf模板引擎中进一步执行它是一种严重的安全冲突。<br>后端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">login</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">commandForUser</span> <span class="operator">=</span> <span class="string">&quot;new String(\&quot; + login + &quot;</span>\<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/download?user=&quot;</span> + commandForUser;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:with=<span class="string">&quot;user=$&#123;param.user&#125;&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;Welcome &lt;span th:text=<span class="string">&quot;$&#123;__$&#123;user&#125;__&#125;&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>修复：SpringMVC默认是forward，是服务端行为且共享数据，redirect是客户端行为且不共享数据只通过参数。上述场景该参数是关键的SpEL表达式参数，从SecurityContextHolder中取是安全的，但redirect带参数可能会导致前端修改参数，所以应该通过forward方式不传参而共享model作用域，且thymeleaf模板不必提供这样“${<strong>${user}</strong>}”的SpEL解析窗口。</p><h3 id="LDAP注入"><a href="#LDAP注入" class="headerlink" title="LDAP注入"></a>LDAP注入</h3><p>1.过滤器传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="string">&quot;(uid=&quot;</span> + uid +<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">userEntryQuery</span> <span class="operator">=</span> query().base(LdapConstants.USERS_BASE).filter(filter);</span><br></pre></td></tr></table></figure><p>2.电子邮件传参</p><p>​LDAP注入与防御剖析 <a href="https://blog.csdn.net/quiet_girl/article/details/50716312">https://blog.csdn.net/quiet_girl/article/details/50716312</a></p><p>​LDAP简单理解为多类型目录“目录数据库”，能够提供多种形式数据的存储，主要功能是检索而不是修改，Java通过JNDI访问。</p><p>​攻击场景  controller传参userRegistrationDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">MY_ENTRY</span> <span class="operator">=</span> <span class="string">&quot;cn=&quot;</span> + userRegistrationDto.getEmail().toLowerCase() + <span class="string">&quot;,&quot;</span> + BASE_DN;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">DirContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    context = <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line">    <span class="type">Attributes</span> <span class="variable">attributes</span> <span class="operator">=</span> createAttribute(userRegistrationDto);</span><br><span class="line">    context.createSubContext(MY_ENTRY,attributes)</span><br><span class="line">&#125;<span class="keyword">catch</span>(NamingException e)&#123;</span><br><span class="line">    log.error(<span class="string">&quot;create user in LDAP failed&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​修复 使用ESAPI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String MY_ENTRY = &quot;cn=&quot; + ESAPI.encoder().encodeForLDAP(userRegistrationDto.getEmail().toLowerCase()) + &quot;,&quot; + BASE_DN;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记-六月</title>
      <link href="/2022/06/21/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%85%AD%E6%9C%88/"/>
      <url>/2022/06/21/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%85%AD%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p>坚持练习简单题、中等题，保证对Java基础的掌握。</p><h4 id="6月21日"><a href="#6月21日" class="headerlink" title="6月21日"></a>6月21日</h4><p>给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。所谓无效化 IP 地址，其实就是用 “[.]” 代替了每个 “.”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">defangIPaddr</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        StringBuilder ans=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:address.toCharArray())&#123;</span><br><span class="line">            ans.append(c==<span class="string">&#x27;.&#x27;</span>?<span class="string">&quot;[.]&quot;</span>:c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点简要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.String、StringBuffer和StringBuilder的区别：</span><br><span class="line">简要：String不可变，StringBuffer和StringBuilder能提供方法改变。</span><br><span class="line">a.String类是不可变类，即一旦一个String对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</span><br><span class="line">b.StringBuffer对象则代表一个字符序列可变的字符串，当一个StringBuffer被创建以后，通过StringBuffer提供的append()、insert()、reverse()、setCharAt()、setLength()等方法可以改变这个字符串对象的字符序列。一旦通过StringBuffer生成了最终想要的字符串，就可以调用它的toString()方法将其转换为一个String对象。</span><br><span class="line">c.StringBuilder类也代表可变字符串对象。实际上，StringBuilder和StringBuffer基本相似，两个类的构造器和方法也基本相同。不同的是：StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能略高。</span><br><span class="line">2.toCharArray String-&gt;Char[]</span><br></pre></td></tr></table></figure><h4 id="6月22日"><a href="#6月22日" class="headerlink" title="6月22日"></a>6月22日</h4><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。假设二叉树中至少有一个节点。</p><p>输入: root &#x3D; [2,1,3]输出: 1</p><p>输入: [1,2,3,4,null,5,6,null,null,7]输出: 7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 深度优先遍历：</span></span><br><span class="line"><span class="comment"># 思路：有一个锚点记录当前遍历高度，作为传参；外部变量curVal和curHeight记录当前结果；nonlocal是声明本函数外部参数，比global的作用域要小。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBottomLeftValue</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        curVal = curHeight = <span class="number">0</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node: <span class="type">Optional</span>[TreeNode],height</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            height += <span class="number">1</span></span><br><span class="line">            dfs(node.left,height)</span><br><span class="line">            dfs(node.right,height)</span><br><span class="line">            <span class="keyword">nonlocal</span> curHeight,curVal</span><br><span class="line">            <span class="keyword">if</span> height &gt; curHeight:</span><br><span class="line">                curHeight = height</span><br><span class="line">                curVal = node.val</span><br><span class="line">        dfs(root,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> curVal</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java改写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node,<span class="type">int</span> height)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        height += <span class="number">1</span>;</span><br><span class="line">        dfs(node.left,height);</span><br><span class="line">        dfs(node.right,height);</span><br><span class="line">        <span class="keyword">if</span> (height&gt;curHeight)&#123;</span><br><span class="line">            curHeight = height;</span><br><span class="line">            curVal = node.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> curVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点简要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java中的null关键字，而python是None关键字。null可以赋给引用类型，不能赋给int、double等进本类型。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
